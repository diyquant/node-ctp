#include "ctp_td.h"
#include "baton.h"
#include "convert.h"

namespace node_ctp {

using namespace v8;
using namespace node;

using std::string;
using std::unordered_map;
using std::shared_ptr;
using std::vector;

/* -----------------------------------------------------------------------------
 * 事件枚举
 * -----------------------------------------------------------------------------
 */

/**
 * API请求事件类型
 * @remark CTP自身的EV_RELEASE和EV_JOIN不稳定, 使用自定义EV_EXIT安全退出
 */
enum RequestEvent {
  EV_CREATE_FTDC_TRADER_API = 0,
  EV_GET_API_VERSION = 1,
  EV_RELEASE = 2,
  EV_INIT = 3,
  EV_JOIN = 4,
  EV_GET_TRADING_DAY = 5,
  EV_REGISTER_FRONT = 6,
  EV_REGISTER_NAME_SERVER = 7,
  EV_REGISTER_FENS_USER_INFO = 8,
  EV_REGISTER_SPI = 9,
  EV_SUBSCRIBE_PRIVATE_TOPIC = 10,
  EV_SUBSCRIBE_PUBLIC_TOPIC = 11,
  EV_REQ_AUTHENTICATE = 12,
  EV_REQ_USER_LOGIN = 13,
  EV_REQ_USER_LOGOUT = 14,
  EV_REQ_USER_PASSWORD_UPDATE = 15,
  EV_REQ_TRADING_ACCOUNT_PASSWORD_UPDATE = 16,
  EV_REQ_ORDER_INSERT = 17,
  EV_REQ_PARKED_ORDER_INSERT = 18,
  EV_REQ_PARKED_ORDER_ACTION = 19,
  EV_REQ_ORDER_ACTION = 20,
  EV_REQ_QUERY_MAX_ORDER_VOLUME = 21,
  EV_REQ_SETTLEMENT_INFO_CONFIRM = 22,
  EV_REQ_REMOVE_PARKED_ORDER = 23,
  EV_REQ_REMOVE_PARKED_ORDER_ACTION = 24,
  EV_REQ_EXEC_ORDER_INSERT = 25,
  EV_REQ_EXEC_ORDER_ACTION = 26,
  EV_REQ_FOR_QUOTE_INSERT = 27,
  EV_REQ_QUOTE_INSERT = 28,
  EV_REQ_QUOTE_ACTION = 29,
  EV_REQ_LOCK_INSERT = 30,
  EV_REQ_BATCH_ORDER_ACTION = 31,
  EV_REQ_COMB_ACTION_INSERT = 32,
  EV_REQ_QRY_ORDER = 33,
  EV_REQ_QRY_TRADE = 34,
  EV_REQ_QRY_INVESTOR_POSITION = 35,
  EV_REQ_QRY_TRADING_ACCOUNT = 36,
  EV_REQ_QRY_INVESTOR = 37,
  EV_REQ_QRY_TRADING_CODE = 38,
  EV_REQ_QRY_INSTRUMENT_MARGIN_RATE = 39,
  EV_REQ_QRY_INSTRUMENT_COMMISSION_RATE = 40,
  EV_REQ_QRY_EXCHANGE = 41,
  EV_REQ_QRY_PRODUCT = 42,
  EV_REQ_QRY_INSTRUMENT = 43,
  EV_REQ_QRY_DEPTH_MARKET_DATA = 44,
  EV_REQ_QRY_SETTLEMENT_INFO = 45,
  EV_REQ_QRY_TRANSFER_BANK = 46,
  EV_REQ_QRY_INVESTOR_POSITION_DETAIL = 47,
  EV_REQ_QRY_NOTICE = 48,
  EV_REQ_QRY_SETTLEMENT_INFO_CONFIRM = 49,
  EV_REQ_QRY_INVESTOR_POSITION_COMBINE_DETAIL = 50,
  EV_REQ_QRY_CFMMCTRADING_ACCOUNT_KEY = 51,
  EV_REQ_QRY_EWARRANT_OFFSET = 52,
  EV_REQ_QRY_INVESTOR_PRODUCT_GROUP_MARGIN = 53,
  EV_REQ_QRY_EXCHANGE_MARGIN_RATE = 54,
  EV_REQ_QRY_EXCHANGE_MARGIN_RATE_ADJUST = 55,
  EV_REQ_QRY_EXCHANGE_RATE = 56,
  EV_REQ_QRY_SEC_AGENT_ACIDMAP = 57,
  EV_REQ_QRY_PRODUCT_EXCH_RATE = 58,
  EV_REQ_QRY_PRODUCT_GROUP = 59,
  EV_REQ_QRY_MMINSTRUMENT_COMMISSION_RATE = 60,
  EV_REQ_QRY_MMOPTION_INSTR_COMM_RATE = 61,
  EV_REQ_QRY_INSTRUMENT_ORDER_COMM_RATE = 62,
  EV_REQ_QRY_OPTION_INSTR_TRADE_COST = 63,
  EV_REQ_QRY_OPTION_INSTR_COMM_RATE = 64,
  EV_REQ_QRY_EXEC_ORDER = 65,
  EV_REQ_QRY_FOR_QUOTE = 66,
  EV_REQ_QRY_QUOTE = 67,
  EV_REQ_QRY_LOCK = 68,
  EV_REQ_QRY_LOCK_POSITION = 69,
  EV_REQ_QRY_ETFOPTION_INSTR_COMM_RATE = 70,
  EV_REQ_QRY_INVESTOR_LEVEL = 71,
  EV_REQ_QRY_EXEC_FREEZE = 72,
  EV_REQ_QRY_COMB_INSTRUMENT_GUARD = 73,
  EV_REQ_QRY_COMB_ACTION = 74,
  EV_REQ_QRY_TRANSFER_SERIAL = 75,
  EV_REQ_QRY_ACCOUNTREGISTER = 76,
  EV_REQ_QRY_CONTRACT_BANK = 77,
  EV_REQ_QRY_PARKED_ORDER = 78,
  EV_REQ_QRY_PARKED_ORDER_ACTION = 79,
  EV_REQ_QRY_TRADING_NOTICE = 80,
  EV_REQ_QRY_BROKER_TRADING_PARAMS = 81,
  EV_REQ_QRY_BROKER_TRADING_ALGOS = 82,
  EV_REQ_QUERY_CFMMCTRADING_ACCOUNT_TOKEN = 83,
  EV_REQ_FROM_BANK_TO_FUTURE_BY_FUTURE = 84,
  EV_REQ_FROM_FUTURE_TO_BANK_BY_FUTURE = 85,
  EV_REQ_QUERY_BANK_ACCOUNT_MONEY_BY_FUTURE = 86,
  EV_EXIT = 87,
};

/**
 * SPI响应事件类型
 */
enum ResponseEvent {
  EV_ON_FRONT_CONNECTED = 0,
  EV_ON_FRONT_DISCONNECTED = 1,
  EV_ON_HEART_BEAT_WARNING = 2,
  EV_ON_RSP_AUTHENTICATE = 3,
  EV_ON_RSP_USER_LOGIN = 4,
  EV_ON_RSP_USER_LOGOUT = 5,
  EV_ON_RSP_USER_PASSWORD_UPDATE = 6,
  EV_ON_RSP_TRADING_ACCOUNT_PASSWORD_UPDATE = 7,
  EV_ON_RSP_ORDER_INSERT = 8,
  EV_ON_RSP_PARKED_ORDER_INSERT = 9,
  EV_ON_RSP_PARKED_ORDER_ACTION = 10,
  EV_ON_RSP_ORDER_ACTION = 11,
  EV_ON_RSP_QUERY_MAX_ORDER_VOLUME = 12,
  EV_ON_RSP_SETTLEMENT_INFO_CONFIRM = 13,
  EV_ON_RSP_REMOVE_PARKED_ORDER = 14,
  EV_ON_RSP_REMOVE_PARKED_ORDER_ACTION = 15,
  EV_ON_RSP_EXEC_ORDER_INSERT = 16,
  EV_ON_RSP_EXEC_ORDER_ACTION = 17,
  EV_ON_RSP_FOR_QUOTE_INSERT = 18,
  EV_ON_RSP_QUOTE_INSERT = 19,
  EV_ON_RSP_QUOTE_ACTION = 20,
  EV_ON_RSP_LOCK_INSERT = 21,
  EV_ON_RSP_BATCH_ORDER_ACTION = 22,
  EV_ON_RSP_COMB_ACTION_INSERT = 23,
  EV_ON_RSP_QRY_ORDER = 24,
  EV_ON_RSP_QRY_TRADE = 25,
  EV_ON_RSP_QRY_INVESTOR_POSITION = 26,
  EV_ON_RSP_QRY_TRADING_ACCOUNT = 27,
  EV_ON_RSP_QRY_INVESTOR = 28,
  EV_ON_RSP_QRY_TRADING_CODE = 29,
  EV_ON_RSP_QRY_INSTRUMENT_MARGIN_RATE = 30,
  EV_ON_RSP_QRY_INSTRUMENT_COMMISSION_RATE = 31,
  EV_ON_RSP_QRY_EXCHANGE = 32,
  EV_ON_RSP_QRY_PRODUCT = 33,
  EV_ON_RSP_QRY_INSTRUMENT = 34,
  EV_ON_RSP_QRY_DEPTH_MARKET_DATA = 35,
  EV_ON_RSP_QRY_SETTLEMENT_INFO = 36,
  EV_ON_RSP_QRY_TRANSFER_BANK = 37,
  EV_ON_RSP_QRY_INVESTOR_POSITION_DETAIL = 38,
  EV_ON_RSP_QRY_NOTICE = 39,
  EV_ON_RSP_QRY_SETTLEMENT_INFO_CONFIRM = 40,
  EV_ON_RSP_QRY_INVESTOR_POSITION_COMBINE_DETAIL = 41,
  EV_ON_RSP_QRY_CFMMCTRADING_ACCOUNT_KEY = 42,
  EV_ON_RSP_QRY_EWARRANT_OFFSET = 43,
  EV_ON_RSP_QRY_INVESTOR_PRODUCT_GROUP_MARGIN = 44,
  EV_ON_RSP_QRY_EXCHANGE_MARGIN_RATE = 45,
  EV_ON_RSP_QRY_EXCHANGE_MARGIN_RATE_ADJUST = 46,
  EV_ON_RSP_QRY_EXCHANGE_RATE = 47,
  EV_ON_RSP_QRY_SEC_AGENT_ACIDMAP = 48,
  EV_ON_RSP_QRY_PRODUCT_EXCH_RATE = 49,
  EV_ON_RSP_QRY_PRODUCT_GROUP = 50,
  EV_ON_RSP_QRY_MMINSTRUMENT_COMMISSION_RATE = 51,
  EV_ON_RSP_QRY_MMOPTION_INSTR_COMM_RATE = 52,
  EV_ON_RSP_QRY_INSTRUMENT_ORDER_COMM_RATE = 53,
  EV_ON_RSP_QRY_OPTION_INSTR_TRADE_COST = 54,
  EV_ON_RSP_QRY_OPTION_INSTR_COMM_RATE = 55,
  EV_ON_RSP_QRY_EXEC_ORDER = 56,
  EV_ON_RSP_QRY_FOR_QUOTE = 57,
  EV_ON_RSP_QRY_QUOTE = 58,
  EV_ON_RSP_QRY_LOCK = 59,
  EV_ON_RSP_QRY_LOCK_POSITION = 60,
  EV_ON_RSP_QRY_ETFOPTION_INSTR_COMM_RATE = 61,
  EV_ON_RSP_QRY_INVESTOR_LEVEL = 62,
  EV_ON_RSP_QRY_EXEC_FREEZE = 63,
  EV_ON_RSP_QRY_COMB_INSTRUMENT_GUARD = 64,
  EV_ON_RSP_QRY_COMB_ACTION = 65,
  EV_ON_RSP_QRY_TRANSFER_SERIAL = 66,
  EV_ON_RSP_QRY_ACCOUNTREGISTER = 67,
  EV_ON_RSP_ERROR = 68,
  EV_ON_RTN_ORDER = 69,
  EV_ON_RTN_TRADE = 70,
  EV_ON_ERR_RTN_ORDER_INSERT = 71,
  EV_ON_ERR_RTN_ORDER_ACTION = 72,
  EV_ON_RTN_INSTRUMENT_STATUS = 73,
  EV_ON_RTN_BULLETIN = 74,
  EV_ON_RTN_TRADING_NOTICE = 75,
  EV_ON_RTN_ERROR_CONDITIONAL_ORDER = 76,
  EV_ON_RTN_EXEC_ORDER = 77,
  EV_ON_ERR_RTN_EXEC_ORDER_INSERT = 78,
  EV_ON_ERR_RTN_EXEC_ORDER_ACTION = 79,
  EV_ON_ERR_RTN_FOR_QUOTE_INSERT = 80,
  EV_ON_RTN_QUOTE = 81,
  EV_ON_ERR_RTN_QUOTE_INSERT = 82,
  EV_ON_ERR_RTN_QUOTE_ACTION = 83,
  EV_ON_RTN_FOR_QUOTE_RSP = 84,
  EV_ON_RTN_CFMMCTRADING_ACCOUNT_TOKEN = 85,
  EV_ON_RTN_LOCK = 86,
  EV_ON_ERR_RTN_LOCK_INSERT = 87,
  EV_ON_ERR_RTN_BATCH_ORDER_ACTION = 88,
  EV_ON_RTN_COMB_ACTION = 89,
  EV_ON_ERR_RTN_COMB_ACTION_INSERT = 90,
  EV_ON_RSP_QRY_CONTRACT_BANK = 91,
  EV_ON_RSP_QRY_PARKED_ORDER = 92,
  EV_ON_RSP_QRY_PARKED_ORDER_ACTION = 93,
  EV_ON_RSP_QRY_TRADING_NOTICE = 94,
  EV_ON_RSP_QRY_BROKER_TRADING_PARAMS = 95,
  EV_ON_RSP_QRY_BROKER_TRADING_ALGOS = 96,
  EV_ON_RSP_QUERY_CFMMCTRADING_ACCOUNT_TOKEN = 97,
  EV_ON_RTN_FROM_BANK_TO_FUTURE_BY_BANK = 98,
  EV_ON_RTN_FROM_FUTURE_TO_BANK_BY_BANK = 99,
  EV_ON_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_BANK = 100,
  EV_ON_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_BANK = 101,
  EV_ON_RTN_FROM_BANK_TO_FUTURE_BY_FUTURE = 102,
  EV_ON_RTN_FROM_FUTURE_TO_BANK_BY_FUTURE = 103,
  EV_ON_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE_MANUAL = 104,
  EV_ON_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE_MANUAL = 105,
  EV_ON_RTN_QUERY_BANK_BALANCE_BY_FUTURE = 106,
  EV_ON_ERR_RTN_BANK_TO_FUTURE_BY_FUTURE = 107,
  EV_ON_ERR_RTN_FUTURE_TO_BANK_BY_FUTURE = 108,
  EV_ON_ERR_RTN_REPEAL_BANK_TO_FUTURE_BY_FUTURE_MANUAL = 109,
  EV_ON_ERR_RTN_REPEAL_FUTURE_TO_BANK_BY_FUTURE_MANUAL = 110,
  EV_ON_ERR_RTN_QUERY_BANK_BALANCE_BY_FUTURE = 111,
  EV_ON_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE = 112,
  EV_ON_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE = 113,
  EV_ON_RSP_FROM_BANK_TO_FUTURE_BY_FUTURE = 114,
  EV_ON_RSP_FROM_FUTURE_TO_BANK_BY_FUTURE = 115,
  EV_ON_RSP_QUERY_BANK_ACCOUNT_MONEY_BY_FUTURE = 116,
  EV_ON_RTN_OPEN_ACCOUNT_BY_BANK = 117,
  EV_ON_RTN_CANCEL_ACCOUNT_BY_BANK = 118,
  EV_ON_RTN_CHANGE_ACCOUNT_BY_BANK = 119,
};

/* -----------------------------------------------------------------------------
 * 静态成员初始化
 * -----------------------------------------------------------------------------
 */

Persistent<Function> CtpTd::constructor_;

/* 定义Node层事件字符串->C++层枚举的映射 */
unordered_map<string, int> CtpTd::event_map_ = {
    {"FrontConnected", EV_ON_FRONT_CONNECTED},
    {"FrontDisconnected", EV_ON_FRONT_DISCONNECTED},
    {"HeartBeatWarning", EV_ON_HEART_BEAT_WARNING},
    {"RspAuthenticate", EV_ON_RSP_AUTHENTICATE},
    {"RspUserLogin", EV_ON_RSP_USER_LOGIN},
    {"RspUserLogout", EV_ON_RSP_USER_LOGOUT},
    {"RspUserPasswordUpdate", EV_ON_RSP_USER_PASSWORD_UPDATE},
    {"RspTradingAccountPasswordUpdate",
     EV_ON_RSP_TRADING_ACCOUNT_PASSWORD_UPDATE},
    {"RspOrderInsert", EV_ON_RSP_ORDER_INSERT},
    {"RspParkedOrderInsert", EV_ON_RSP_PARKED_ORDER_INSERT},
    {"RspParkedOrderAction", EV_ON_RSP_PARKED_ORDER_ACTION},
    {"RspOrderAction", EV_ON_RSP_ORDER_ACTION},
    {"RspQueryMaxOrderVolume", EV_ON_RSP_QUERY_MAX_ORDER_VOLUME},
    {"RspSettlementInfoConfirm", EV_ON_RSP_SETTLEMENT_INFO_CONFIRM},
    {"RspRemoveParkedOrder", EV_ON_RSP_REMOVE_PARKED_ORDER},
    {"RspRemoveParkedOrderAction", EV_ON_RSP_REMOVE_PARKED_ORDER_ACTION},
    {"RspExecOrderInsert", EV_ON_RSP_EXEC_ORDER_INSERT},
    {"RspExecOrderAction", EV_ON_RSP_EXEC_ORDER_ACTION},
    {"RspForQuoteInsert", EV_ON_RSP_FOR_QUOTE_INSERT},
    {"RspQuoteInsert", EV_ON_RSP_QUOTE_INSERT},
    {"RspQuoteAction", EV_ON_RSP_QUOTE_ACTION},
    {"RspLockInsert", EV_ON_RSP_LOCK_INSERT},
    {"RspBatchOrderAction", EV_ON_RSP_BATCH_ORDER_ACTION},
    {"RspCombActionInsert", EV_ON_RSP_COMB_ACTION_INSERT},
    {"RspQryOrder", EV_ON_RSP_QRY_ORDER},
    {"RspQryTrade", EV_ON_RSP_QRY_TRADE},
    {"RspQryInvestorPosition", EV_ON_RSP_QRY_INVESTOR_POSITION},
    {"RspQryTradingAccount", EV_ON_RSP_QRY_TRADING_ACCOUNT},
    {"RspQryInvestor", EV_ON_RSP_QRY_INVESTOR},
    {"RspQryTradingCode", EV_ON_RSP_QRY_TRADING_CODE},
    {"RspQryInstrumentMarginRate", EV_ON_RSP_QRY_INSTRUMENT_MARGIN_RATE},
    {"RspQryInstrumentCommissionRate",
     EV_ON_RSP_QRY_INSTRUMENT_COMMISSION_RATE},
    {"RspQryExchange", EV_ON_RSP_QRY_EXCHANGE},
    {"RspQryProduct", EV_ON_RSP_QRY_PRODUCT},
    {"RspQryInstrument", EV_ON_RSP_QRY_INSTRUMENT},
    {"RspQryDepthMarketData", EV_ON_RSP_QRY_DEPTH_MARKET_DATA},
    {"RspQrySettlementInfo", EV_ON_RSP_QRY_SETTLEMENT_INFO},
    {"RspQryTransferBank", EV_ON_RSP_QRY_TRANSFER_BANK},
    {"RspQryInvestorPositionDetail", EV_ON_RSP_QRY_INVESTOR_POSITION_DETAIL},
    {"RspQryNotice", EV_ON_RSP_QRY_NOTICE},
    {"RspQrySettlementInfoConfirm", EV_ON_RSP_QRY_SETTLEMENT_INFO_CONFIRM},
    {"RspQryInvestorPositionCombineDetail",
     EV_ON_RSP_QRY_INVESTOR_POSITION_COMBINE_DETAIL},
    {"RspQryCFMMCTradingAccountKey", EV_ON_RSP_QRY_CFMMCTRADING_ACCOUNT_KEY},
    {"RspQryEWarrantOffset", EV_ON_RSP_QRY_EWARRANT_OFFSET},
    {"RspQryInvestorProductGroupMargin",
     EV_ON_RSP_QRY_INVESTOR_PRODUCT_GROUP_MARGIN},
    {"RspQryExchangeMarginRate", EV_ON_RSP_QRY_EXCHANGE_MARGIN_RATE},
    {"RspQryExchangeMarginRateAdjust",
     EV_ON_RSP_QRY_EXCHANGE_MARGIN_RATE_ADJUST},
    {"RspQryExchangeRate", EV_ON_RSP_QRY_EXCHANGE_RATE},
    {"RspQrySecAgentACIDMap", EV_ON_RSP_QRY_SEC_AGENT_ACIDMAP},
    {"RspQryProductExchRate", EV_ON_RSP_QRY_PRODUCT_EXCH_RATE},
    {"RspQryProductGroup", EV_ON_RSP_QRY_PRODUCT_GROUP},
    {"RspQryMMInstrumentCommissionRate",
     EV_ON_RSP_QRY_MMINSTRUMENT_COMMISSION_RATE},
    {"RspQryMMOptionInstrCommRate", EV_ON_RSP_QRY_MMOPTION_INSTR_COMM_RATE},
    {"RspQryInstrumentOrderCommRate", EV_ON_RSP_QRY_INSTRUMENT_ORDER_COMM_RATE},
    {"RspQryOptionInstrTradeCost", EV_ON_RSP_QRY_OPTION_INSTR_TRADE_COST},
    {"RspQryOptionInstrCommRate", EV_ON_RSP_QRY_OPTION_INSTR_COMM_RATE},
    {"RspQryExecOrder", EV_ON_RSP_QRY_EXEC_ORDER},
    {"RspQryForQuote", EV_ON_RSP_QRY_FOR_QUOTE},
    {"RspQryQuote", EV_ON_RSP_QRY_QUOTE},
    {"RspQryLock", EV_ON_RSP_QRY_LOCK},
    {"RspQryLockPosition", EV_ON_RSP_QRY_LOCK_POSITION},
    {"RspQryETFOptionInstrCommRate", EV_ON_RSP_QRY_ETFOPTION_INSTR_COMM_RATE},
    {"RspQryInvestorLevel", EV_ON_RSP_QRY_INVESTOR_LEVEL},
    {"RspQryExecFreeze", EV_ON_RSP_QRY_EXEC_FREEZE},
    {"RspQryCombInstrumentGuard", EV_ON_RSP_QRY_COMB_INSTRUMENT_GUARD},
    {"RspQryCombAction", EV_ON_RSP_QRY_COMB_ACTION},
    {"RspQryTransferSerial", EV_ON_RSP_QRY_TRANSFER_SERIAL},
    {"RspQryAccountregister", EV_ON_RSP_QRY_ACCOUNTREGISTER},
    {"RspError", EV_ON_RSP_ERROR},
    {"RtnOrder", EV_ON_RTN_ORDER},
    {"RtnTrade", EV_ON_RTN_TRADE},
    {"ErrRtnOrderInsert", EV_ON_ERR_RTN_ORDER_INSERT},
    {"ErrRtnOrderAction", EV_ON_ERR_RTN_ORDER_ACTION},
    {"RtnInstrumentStatus", EV_ON_RTN_INSTRUMENT_STATUS},
    {"RtnBulletin", EV_ON_RTN_BULLETIN},
    {"RtnTradingNotice", EV_ON_RTN_TRADING_NOTICE},
    {"RtnErrorConditionalOrder", EV_ON_RTN_ERROR_CONDITIONAL_ORDER},
    {"RtnExecOrder", EV_ON_RTN_EXEC_ORDER},
    {"ErrRtnExecOrderInsert", EV_ON_ERR_RTN_EXEC_ORDER_INSERT},
    {"ErrRtnExecOrderAction", EV_ON_ERR_RTN_EXEC_ORDER_ACTION},
    {"ErrRtnForQuoteInsert", EV_ON_ERR_RTN_FOR_QUOTE_INSERT},
    {"RtnQuote", EV_ON_RTN_QUOTE},
    {"ErrRtnQuoteInsert", EV_ON_ERR_RTN_QUOTE_INSERT},
    {"ErrRtnQuoteAction", EV_ON_ERR_RTN_QUOTE_ACTION},
    {"RtnForQuoteRsp", EV_ON_RTN_FOR_QUOTE_RSP},
    {"RtnCFMMCTradingAccountToken", EV_ON_RTN_CFMMCTRADING_ACCOUNT_TOKEN},
    {"RtnLock", EV_ON_RTN_LOCK},
    {"ErrRtnLockInsert", EV_ON_ERR_RTN_LOCK_INSERT},
    {"ErrRtnBatchOrderAction", EV_ON_ERR_RTN_BATCH_ORDER_ACTION},
    {"RtnCombAction", EV_ON_RTN_COMB_ACTION},
    {"ErrRtnCombActionInsert", EV_ON_ERR_RTN_COMB_ACTION_INSERT},
    {"RspQryContractBank", EV_ON_RSP_QRY_CONTRACT_BANK},
    {"RspQryParkedOrder", EV_ON_RSP_QRY_PARKED_ORDER},
    {"RspQryParkedOrderAction", EV_ON_RSP_QRY_PARKED_ORDER_ACTION},
    {"RspQryTradingNotice", EV_ON_RSP_QRY_TRADING_NOTICE},
    {"RspQryBrokerTradingParams", EV_ON_RSP_QRY_BROKER_TRADING_PARAMS},
    {"RspQryBrokerTradingAlgos", EV_ON_RSP_QRY_BROKER_TRADING_ALGOS},
    {"RspQueryCFMMCTradingAccountToken",
     EV_ON_RSP_QUERY_CFMMCTRADING_ACCOUNT_TOKEN},
    {"RtnFromBankToFutureByBank", EV_ON_RTN_FROM_BANK_TO_FUTURE_BY_BANK},
    {"RtnFromFutureToBankByBank", EV_ON_RTN_FROM_FUTURE_TO_BANK_BY_BANK},
    {"RtnRepealFromBankToFutureByBank",
     EV_ON_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_BANK},
    {"RtnRepealFromFutureToBankByBank",
     EV_ON_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_BANK},
    {"RtnFromBankToFutureByFuture", EV_ON_RTN_FROM_BANK_TO_FUTURE_BY_FUTURE},
    {"RtnFromFutureToBankByFuture", EV_ON_RTN_FROM_FUTURE_TO_BANK_BY_FUTURE},
    {"RtnRepealFromBankToFutureByFutureManual",
     EV_ON_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE_MANUAL},
    {"RtnRepealFromFutureToBankByFutureManual",
     EV_ON_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE_MANUAL},
    {"RtnQueryBankBalanceByFuture", EV_ON_RTN_QUERY_BANK_BALANCE_BY_FUTURE},
    {"ErrRtnBankToFutureByFuture", EV_ON_ERR_RTN_BANK_TO_FUTURE_BY_FUTURE},
    {"ErrRtnFutureToBankByFuture", EV_ON_ERR_RTN_FUTURE_TO_BANK_BY_FUTURE},
    {"ErrRtnRepealBankToFutureByFutureManual",
     EV_ON_ERR_RTN_REPEAL_BANK_TO_FUTURE_BY_FUTURE_MANUAL},
    {"ErrRtnRepealFutureToBankByFutureManual",
     EV_ON_ERR_RTN_REPEAL_FUTURE_TO_BANK_BY_FUTURE_MANUAL},
    {"ErrRtnQueryBankBalanceByFuture",
     EV_ON_ERR_RTN_QUERY_BANK_BALANCE_BY_FUTURE},
    {"RtnRepealFromBankToFutureByFuture",
     EV_ON_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE},
    {"RtnRepealFromFutureToBankByFuture",
     EV_ON_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE},
    {"RspFromBankToFutureByFuture", EV_ON_RSP_FROM_BANK_TO_FUTURE_BY_FUTURE},
    {"RspFromFutureToBankByFuture", EV_ON_RSP_FROM_FUTURE_TO_BANK_BY_FUTURE},
    {"RspQueryBankAccountMoneyByFuture",
     EV_ON_RSP_QUERY_BANK_ACCOUNT_MONEY_BY_FUTURE},
    {"RtnOpenAccountByBank", EV_ON_RTN_OPEN_ACCOUNT_BY_BANK},
    {"RtnCancelAccountByBank", EV_ON_RTN_CANCEL_ACCOUNT_BY_BANK},
    {"RtnChangeAccountByBank", EV_ON_RTN_CHANGE_ACCOUNT_BY_BANK},
};

/* -----------------------------------------------------------------------------
 * CtpTd类函数
 * -----------------------------------------------------------------------------
 */

CtpTd::CtpTd() : api_(NULL) {
  uv_async_init(uv_default_loop(), &async_, ResponseAsyncAfter);
}

CtpTd::~CtpTd() { uv_close(reinterpret_cast<uv_handle_t *>(&async_), NULL); }

/**
 * 初始化C++类到Node模块
 */
void CtpTd::InitNodeClass(Local<Object> exports) {
  Isolate *isolate = exports->GetIsolate();

  Local<FunctionTemplate> tpl = FunctionTemplate::New(isolate, New);
  tpl->SetClassName(String::NewFromUtf8(isolate, "CtpTd"));
  tpl->InstanceTemplate()->SetInternalFieldCount(1);

  NODE_SET_PROTOTYPE_METHOD(tpl, "createFtdcTraderApi", CreateFtdcTraderApi);
  NODE_SET_PROTOTYPE_METHOD(tpl, "getApiVersion", GetApiVersion);
  NODE_SET_PROTOTYPE_METHOD(tpl, "release", Release);
  NODE_SET_PROTOTYPE_METHOD(tpl, "init", Init);
  NODE_SET_PROTOTYPE_METHOD(tpl, "join", Join);
  NODE_SET_PROTOTYPE_METHOD(tpl, "getTradingDay", GetTradingDay);
  NODE_SET_PROTOTYPE_METHOD(tpl, "registerFront", RegisterFront);
  NODE_SET_PROTOTYPE_METHOD(tpl, "registerNameServer", RegisterNameServer);
  NODE_SET_PROTOTYPE_METHOD(tpl, "registerFensUserInfo", RegisterFensUserInfo);
  NODE_SET_PROTOTYPE_METHOD(tpl, "registerSpi", RegisterSpi);
  NODE_SET_PROTOTYPE_METHOD(tpl, "subscribePrivateTopic",
                            SubscribePrivateTopic);
  NODE_SET_PROTOTYPE_METHOD(tpl, "subscribePublicTopic", SubscribePublicTopic);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqAuthenticate", ReqAuthenticate);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqUserLogin", ReqUserLogin);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqUserLogout", ReqUserLogout);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqUserPasswordUpdate",
                            ReqUserPasswordUpdate);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqTradingAccountPasswordUpdate",
                            ReqTradingAccountPasswordUpdate);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqOrderInsert", ReqOrderInsert);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqParkedOrderInsert", ReqParkedOrderInsert);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqParkedOrderAction", ReqParkedOrderAction);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqOrderAction", ReqOrderAction);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqQueryMaxOrderVolume",
                            ReqQueryMaxOrderVolume);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqSettlementInfoConfirm",
                            ReqSettlementInfoConfirm);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqRemoveParkedOrder", ReqRemoveParkedOrder);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqRemoveParkedOrderAction",
                            ReqRemoveParkedOrderAction);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqExecOrderInsert", ReqExecOrderInsert);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqExecOrderAction", ReqExecOrderAction);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqForQuoteInsert", ReqForQuoteInsert);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqQuoteInsert", ReqQuoteInsert);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqQuoteAction", ReqQuoteAction);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqLockInsert", ReqLockInsert);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqBatchOrderAction", ReqBatchOrderAction);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqCombActionInsert", ReqCombActionInsert);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqQryOrder", ReqQryOrder);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqQryTrade", ReqQryTrade);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqQryInvestorPosition",
                            ReqQryInvestorPosition);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqQryTradingAccount", ReqQryTradingAccount);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqQryInvestor", ReqQryInvestor);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqQryTradingCode", ReqQryTradingCode);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqQryInstrumentMarginRate",
                            ReqQryInstrumentMarginRate);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqQryInstrumentCommissionRate",
                            ReqQryInstrumentCommissionRate);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqQryExchange", ReqQryExchange);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqQryProduct", ReqQryProduct);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqQryInstrument", ReqQryInstrument);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqQryDepthMarketData",
                            ReqQryDepthMarketData);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqQrySettlementInfo", ReqQrySettlementInfo);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqQryTransferBank", ReqQryTransferBank);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqQryInvestorPositionDetail",
                            ReqQryInvestorPositionDetail);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqQryNotice", ReqQryNotice);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqQrySettlementInfoConfirm",
                            ReqQrySettlementInfoConfirm);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqQryInvestorPositionCombineDetail",
                            ReqQryInvestorPositionCombineDetail);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqQryCFMMCTradingAccountKey",
                            ReqQryCFMMCTradingAccountKey);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqQryEWarrantOffset", ReqQryEWarrantOffset);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqQryInvestorProductGroupMargin",
                            ReqQryInvestorProductGroupMargin);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqQryExchangeMarginRate",
                            ReqQryExchangeMarginRate);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqQryExchangeMarginRateAdjust",
                            ReqQryExchangeMarginRateAdjust);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqQryExchangeRate", ReqQryExchangeRate);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqQrySecAgentACIDMap",
                            ReqQrySecAgentACIDMap);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqQryProductExchRate",
                            ReqQryProductExchRate);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqQryProductGroup", ReqQryProductGroup);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqQryMMInstrumentCommissionRate",
                            ReqQryMMInstrumentCommissionRate);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqQryMMOptionInstrCommRate",
                            ReqQryMMOptionInstrCommRate);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqQryInstrumentOrderCommRate",
                            ReqQryInstrumentOrderCommRate);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqQryOptionInstrTradeCost",
                            ReqQryOptionInstrTradeCost);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqQryOptionInstrCommRate",
                            ReqQryOptionInstrCommRate);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqQryExecOrder", ReqQryExecOrder);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqQryForQuote", ReqQryForQuote);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqQryQuote", ReqQryQuote);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqQryLock", ReqQryLock);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqQryLockPosition", ReqQryLockPosition);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqQryETFOptionInstrCommRate",
                            ReqQryETFOptionInstrCommRate);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqQryInvestorLevel", ReqQryInvestorLevel);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqQryExecFreeze", ReqQryExecFreeze);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqQryCombInstrumentGuard",
                            ReqQryCombInstrumentGuard);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqQryCombAction", ReqQryCombAction);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqQryTransferSerial", ReqQryTransferSerial);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqQryAccountregister",
                            ReqQryAccountregister);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqQryContractBank", ReqQryContractBank);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqQryParkedOrder", ReqQryParkedOrder);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqQryParkedOrderAction",
                            ReqQryParkedOrderAction);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqQryTradingNotice", ReqQryTradingNotice);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqQryBrokerTradingParams",
                            ReqQryBrokerTradingParams);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqQryBrokerTradingAlgos",
                            ReqQryBrokerTradingAlgos);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqQueryCFMMCTradingAccountToken",
                            ReqQueryCFMMCTradingAccountToken);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqFromBankToFutureByFuture",
                            ReqFromBankToFutureByFuture);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqFromFutureToBankByFuture",
                            ReqFromFutureToBankByFuture);
  NODE_SET_PROTOTYPE_METHOD(tpl, "reqQueryBankAccountMoneyByFuture",
                            ReqQueryBankAccountMoneyByFuture);
  NODE_SET_PROTOTYPE_METHOD(tpl, "exit", Exit);
  NODE_SET_PROTOTYPE_METHOD(tpl, "on", On);

  constructor_.Reset(isolate, tpl->GetFunction());
  exports->Set(String::NewFromUtf8(isolate, "CtpTd"), tpl->GetFunction());
}

/**
 * Node层构造函数
 */
void CtpTd::New(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (args.IsConstructCall()) {
    /* Invoked as constructor: `new CtpTd(...)` */
    CtpTd *that = new CtpTd();
    that->Wrap(args.This());
    args.GetReturnValue().Set(args.This());
  } else {
    /* Invoked as plain function `CtpTd()`, turn into constructor call */
    Local<Context> ctx = isolate->GetCurrentContext();
    Local<Function> cons = Local<Function>::New(isolate, constructor_);
    Local<Object> ret = cons->NewInstance(ctx).ToLocalChecked();
    args.GetReturnValue().Set(ret);
  }
}

/* ---------------------------------------------------------------------------
 * API接口
 * ---------------------------------------------------------------------------
 */

/**
 * 创建TraderApi
 * @param pszFlowPath 存贮订阅信息文件的目录, 默认为当前目录
 * @return 创建出的UserApi
 */
void CtpTd::CreateFtdcTraderApi(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsString() || !args[1]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  String::Utf8Value flow_path(args[0]);
  Local<Function> cb = Local<Function>::Cast(args[1]);

  RequestBaton *baton =
      new RequestBaton(cb, that, EV_CREATE_FTDC_TRADER_API,
                       shared_ptr<void>(new string(*flow_path)));
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 获取API的版本信息
 * @retrun 获取到的版本号
 */
void CtpTd::GetApiVersion(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Function> cb = Local<Function>::Cast(args[0]);

  RequestBaton *baton = new RequestBaton(cb, that, EV_GET_API_VERSION);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 删除接口对象本身
 * @remark 不再使用本接口对象时,调用该函数删除接口对象
 */
void CtpTd::Release(const FunctionCallbackInfo<Value> &args) { /* 未用 */
}

/**
 * 初始化
 * @remark 初始化运行环境,只有调用后,接口才开始工作
 */
void CtpTd::Init(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Function> cb = Local<Function>::Cast(args[0]);

  RequestBaton *baton = new RequestBaton(cb, that, EV_INIT);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 等待接口线程结束运行
 * @return 线程退出代码
 */
void CtpTd::Join(const FunctionCallbackInfo<Value> &args) { /* 未用 */
}

/**
 * 获取当前交易日
 * @retrun 获取到的交易日
 * @remark 只有登录成功后,才能得到正确的交易日
 */
void CtpTd::GetTradingDay(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Function> cb = Local<Function>::Cast(args[0]);

  RequestBaton *baton = new RequestBaton(cb, that, EV_GET_TRADING_DAY);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 注册前置机网络地址
 * @param pszFrontAddress: 前置机网络地址
 * @remark 网络地址的格式为: "protocol: *ipaddress:port", 如: "tcp:
 * *127.0.0.1:17001"
 * @remark "tcp"代表传输协议, "127.0.0.1"代表服务器地址. "17001"代表服务器端口号
 */
void CtpTd::RegisterFront(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsString() || !args[1]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  String::Utf8Value addr(args[0]);
  Local<Function> cb = Local<Function>::Cast(args[1]);

  RequestBaton *baton = new RequestBaton(cb, that, EV_REGISTER_FRONT,
                                         shared_ptr<void>(new string(*addr)));
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 注册名字服务器网络地址
 * @param pszNsAddress: 名字服务器网络地址
 * @remark 网络地址的格式为: "protocol: *ipaddress:port", 如: "tcp:
 * *127.0.0.1:12001"
 * @remark "tcp"代表传输协议, "127.0.0.1"代表服务器地址. "12001"代表服务器端口号
 * @remark RegisterNameServer优先于RegisterFront
 */
void CtpTd::RegisterNameServer(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsString() || !args[1]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  String::Utf8Value addr(args[0]);
  Local<Function> cb = Local<Function>::Cast(args[1]);

  RequestBaton *baton = new RequestBaton(cb, that, EV_REGISTER_NAME_SERVER,
                                         shared_ptr<void>(new string(*addr)));
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 注册名字服务器用户信息
 * @param pFensUserInfo: 用户信息
 */
void CtpTd::RegisterFensUserInfo(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  Local<Function> cb = Local<Function>::Cast(args[1]);

  CThostFtdcFensUserInfoField *data = new CThostFtdcFensUserInfoField;
  memset(data, 0x0, sizeof(*data));
  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 用户代码 */
  GetNodeObjectString(isolate, obj, "UserID", data->UserID);
  /* 登录模式 */
  GetNodeObjectChar(isolate, obj, "LoginMode", data->LoginMode);

  RequestBaton *baton = new RequestBaton(cb, that, EV_REGISTER_FENS_USER_INFO,
                                         shared_ptr<void>(data));
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 注册回调接口
 * @param pSpi 派生自回调接口类的实例
 */
void CtpTd::RegisterSpi(const FunctionCallbackInfo<Value> &args) { /* 未用 */
}

/**
 * 订阅私有流
 * @param nResumeType 私有流重传方式
 *         THOST_TERT_RESTART:从本交易日开始重传
 *         THOST_TERT_RESUME:从上次收到的续传
 *         THOST_TERT_QUICK:只传送登录后私有流的内容
 * @remark 该方法要在Init方法前调用. 若不调用则不会收到私有流的数据
 */
void CtpTd::SubscribePrivateTopic(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsInt32() || !args[1]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  int resume_type = args[0]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[1]);

  RequestBaton *baton =
      new RequestBaton(cb, that, EV_SUBSCRIBE_PRIVATE_TOPIC,
                       shared_ptr<void>(new int(resume_type)));
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 订阅公共流
 * @param nResumeType 公共流重传方式
 *         THOST_TERT_RESTART:从本交易日开始重传
 *         THOST_TERT_RESUME:从上次收到的续传
 *         THOST_TERT_QUICK:只传送登录后公共流的内容
 * @remark 该方法要在Init方法前调用. 若不调用则不会收到公共流的数据
 */
void CtpTd::SubscribePublicTopic(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsInt32() || !args[1]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  int resume_type = args[0]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[1]);

  RequestBaton *baton =
      new RequestBaton(cb, that, EV_SUBSCRIBE_PUBLIC_TOPIC,
                       shared_ptr<void>(new int(resume_type)));
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 客户端认证请求
 */
void CtpTd::ReqAuthenticate(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcReqAuthenticateField *data = new CThostFtdcReqAuthenticateField;
  memset(data, 0x0, sizeof(*data));

  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 用户代码 */
  GetNodeObjectString(isolate, obj, "UserID", data->UserID);
  /* 用户端产品信息 */
  GetNodeObjectString(isolate, obj, "UserProductInfo", data->UserProductInfo);
  /* 认证码 */
  GetNodeObjectString(isolate, obj, "AuthCode", data->AuthCode);

  RequestBaton *baton = new RequestBaton(cb, that, EV_REQ_AUTHENTICATE,
                                         shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 用户登录请求
 */
void CtpTd::ReqUserLogin(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcReqUserLoginField *data = new CThostFtdcReqUserLoginField;
  memset(data, 0x0, sizeof(*data));

  /* 交易日 */
  GetNodeObjectString(isolate, obj, "TradingDay", data->TradingDay);
  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 用户代码 */
  GetNodeObjectString(isolate, obj, "UserID", data->UserID);
  /* 密码 */
  GetNodeObjectString(isolate, obj, "Password", data->Password);
  /* 用户端产品信息 */
  GetNodeObjectString(isolate, obj, "UserProductInfo", data->UserProductInfo);
  /* 接口端产品信息 */
  GetNodeObjectString(isolate, obj, "InterfaceProductInfo",
                      data->InterfaceProductInfo);
  /* 协议信息 */
  GetNodeObjectString(isolate, obj, "ProtocolInfo", data->ProtocolInfo);
  /* Mac地址 */
  GetNodeObjectString(isolate, obj, "MacAddress", data->MacAddress);
  /* 动态密码 */
  GetNodeObjectString(isolate, obj, "OneTimePassword", data->OneTimePassword);
  /* 终端IP地址 */
  GetNodeObjectString(isolate, obj, "ClientIPAddress", data->ClientIPAddress);
  /* 登录备注 */
  GetNodeObjectString(isolate, obj, "LoginRemark", data->LoginRemark);

  RequestBaton *baton = new RequestBaton(cb, that, EV_REQ_USER_LOGIN,
                                         shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 登出请求
 */
void CtpTd::ReqUserLogout(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcUserLogoutField *data = new CThostFtdcUserLogoutField;
  memset(data, 0x0, sizeof(*data));

  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 用户代码 */
  GetNodeObjectString(isolate, obj, "UserID", data->UserID);

  RequestBaton *baton = new RequestBaton(cb, that, EV_REQ_USER_LOGOUT,
                                         shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 用户口令更新请求
 */
void CtpTd::ReqUserPasswordUpdate(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcUserPasswordUpdateField *data =
      new CThostFtdcUserPasswordUpdateField;
  memset(data, 0x0, sizeof(*data));

  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 用户代码 */
  GetNodeObjectString(isolate, obj, "UserID", data->UserID);
  /* 原来的口令 */
  GetNodeObjectString(isolate, obj, "OldPassword", data->OldPassword);
  /* 新的口令 */
  GetNodeObjectString(isolate, obj, "NewPassword", data->NewPassword);

  RequestBaton *baton = new RequestBaton(cb, that, EV_REQ_USER_PASSWORD_UPDATE,
                                         shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 资金账户口令更新请求
 */
void CtpTd::ReqTradingAccountPasswordUpdate(
    const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcTradingAccountPasswordUpdateField *data =
      new CThostFtdcTradingAccountPasswordUpdateField;
  memset(data, 0x0, sizeof(*data));

  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 投资者帐号 */
  GetNodeObjectString(isolate, obj, "AccountID", data->AccountID);
  /* 原来的口令 */
  GetNodeObjectString(isolate, obj, "OldPassword", data->OldPassword);
  /* 新的口令 */
  GetNodeObjectString(isolate, obj, "NewPassword", data->NewPassword);
  /* 币种代码 */
  GetNodeObjectString(isolate, obj, "CurrencyID", data->CurrencyID);

  RequestBaton *baton =
      new RequestBaton(cb, that, EV_REQ_TRADING_ACCOUNT_PASSWORD_UPDATE,
                       shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 报单录入请求
 */
void CtpTd::ReqOrderInsert(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcInputOrderField *data = new CThostFtdcInputOrderField;
  memset(data, 0x0, sizeof(*data));

  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 投资者代码 */
  GetNodeObjectString(isolate, obj, "InvestorID", data->InvestorID);
  /* 合约代码 */
  GetNodeObjectString(isolate, obj, "InstrumentID", data->InstrumentID);
  /* 报单引用 */
  GetNodeObjectString(isolate, obj, "OrderRef", data->OrderRef);
  /* 用户代码 */
  GetNodeObjectString(isolate, obj, "UserID", data->UserID);
  /* 报单价格条件 */
  GetNodeObjectChar(isolate, obj, "OrderPriceType", data->OrderPriceType);
  /* 买卖方向 */
  GetNodeObjectChar(isolate, obj, "Direction", data->Direction);
  /* 组合开平标志 */
  GetNodeObjectString(isolate, obj, "CombOffsetFlag", data->CombOffsetFlag);
  /* 组合投机套保标志 */
  GetNodeObjectString(isolate, obj, "CombHedgeFlag", data->CombHedgeFlag);
  /* 价格 */
  GetNodeObjectDouble(isolate, obj, "LimitPrice", data->LimitPrice);
  /* 数量 */
  GetNodeObjectInt(isolate, obj, "VolumeTotalOriginal",
                   data->VolumeTotalOriginal);
  /* 有效期类型 */
  GetNodeObjectChar(isolate, obj, "TimeCondition", data->TimeCondition);
  /* GTD日期 */
  GetNodeObjectString(isolate, obj, "GTDDate", data->GTDDate);
  /* 成交量类型 */
  GetNodeObjectChar(isolate, obj, "VolumeCondition", data->VolumeCondition);
  /* 最小成交量 */
  GetNodeObjectInt(isolate, obj, "MinVolume", data->MinVolume);
  /* 触发条件 */
  GetNodeObjectChar(isolate, obj, "ContingentCondition",
                    data->ContingentCondition);
  /* 止损价 */
  GetNodeObjectDouble(isolate, obj, "StopPrice", data->StopPrice);
  /* 强平原因 */
  GetNodeObjectChar(isolate, obj, "ForceCloseReason", data->ForceCloseReason);
  /* 自动挂起标志 */
  GetNodeObjectInt(isolate, obj, "IsAutoSuspend", data->IsAutoSuspend);
  /* 业务单元 */
  GetNodeObjectString(isolate, obj, "BusinessUnit", data->BusinessUnit);
  /* 请求编号 */
  GetNodeObjectInt(isolate, obj, "RequestID", data->RequestID);
  /* 用户强评标志 */
  GetNodeObjectInt(isolate, obj, "UserForceClose", data->UserForceClose);
  /* 互换单标志 */
  GetNodeObjectInt(isolate, obj, "IsSwapOrder", data->IsSwapOrder);
  /* 交易所代码 */
  GetNodeObjectString(isolate, obj, "ExchangeID", data->ExchangeID);
  /* 投资单元代码 */
  GetNodeObjectString(isolate, obj, "InvestUnitID", data->InvestUnitID);
  /* 资金账号 */
  GetNodeObjectString(isolate, obj, "AccountID", data->AccountID);
  /* 币种代码 */
  GetNodeObjectString(isolate, obj, "CurrencyID", data->CurrencyID);
  /* 交易编码 */
  GetNodeObjectString(isolate, obj, "ClientID", data->ClientID);
  /* IP地址 */
  GetNodeObjectString(isolate, obj, "IPAddress", data->IPAddress);
  /* Mac地址 */
  GetNodeObjectString(isolate, obj, "MacAddress", data->MacAddress);

  RequestBaton *baton = new RequestBaton(cb, that, EV_REQ_ORDER_INSERT,
                                         shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 预埋单录入请求
 */
void CtpTd::ReqParkedOrderInsert(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcParkedOrderField *data = new CThostFtdcParkedOrderField;
  memset(data, 0x0, sizeof(*data));

  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 投资者代码 */
  GetNodeObjectString(isolate, obj, "InvestorID", data->InvestorID);
  /* 合约代码 */
  GetNodeObjectString(isolate, obj, "InstrumentID", data->InstrumentID);
  /* 报单引用 */
  GetNodeObjectString(isolate, obj, "OrderRef", data->OrderRef);
  /* 用户代码 */
  GetNodeObjectString(isolate, obj, "UserID", data->UserID);
  /* 报单价格条件 */
  GetNodeObjectChar(isolate, obj, "OrderPriceType", data->OrderPriceType);
  /* 买卖方向 */
  GetNodeObjectChar(isolate, obj, "Direction", data->Direction);
  /* 组合开平标志 */
  GetNodeObjectString(isolate, obj, "CombOffsetFlag", data->CombOffsetFlag);
  /* 组合投机套保标志 */
  GetNodeObjectString(isolate, obj, "CombHedgeFlag", data->CombHedgeFlag);
  /* 价格 */
  GetNodeObjectDouble(isolate, obj, "LimitPrice", data->LimitPrice);
  /* 数量 */
  GetNodeObjectInt(isolate, obj, "VolumeTotalOriginal",
                   data->VolumeTotalOriginal);
  /* 有效期类型 */
  GetNodeObjectChar(isolate, obj, "TimeCondition", data->TimeCondition);
  /* GTD日期 */
  GetNodeObjectString(isolate, obj, "GTDDate", data->GTDDate);
  /* 成交量类型 */
  GetNodeObjectChar(isolate, obj, "VolumeCondition", data->VolumeCondition);
  /* 最小成交量 */
  GetNodeObjectInt(isolate, obj, "MinVolume", data->MinVolume);
  /* 触发条件 */
  GetNodeObjectChar(isolate, obj, "ContingentCondition",
                    data->ContingentCondition);
  /* 止损价 */
  GetNodeObjectDouble(isolate, obj, "StopPrice", data->StopPrice);
  /* 强平原因 */
  GetNodeObjectChar(isolate, obj, "ForceCloseReason", data->ForceCloseReason);
  /* 自动挂起标志 */
  GetNodeObjectInt(isolate, obj, "IsAutoSuspend", data->IsAutoSuspend);
  /* 业务单元 */
  GetNodeObjectString(isolate, obj, "BusinessUnit", data->BusinessUnit);
  /* 请求编号 */
  GetNodeObjectInt(isolate, obj, "RequestID", data->RequestID);
  /* 用户强评标志 */
  GetNodeObjectInt(isolate, obj, "UserForceClose", data->UserForceClose);
  /* 交易所代码 */
  GetNodeObjectString(isolate, obj, "ExchangeID", data->ExchangeID);
  /* 预埋报单编号 */
  GetNodeObjectString(isolate, obj, "ParkedOrderID", data->ParkedOrderID);
  /* 用户类型 */
  GetNodeObjectChar(isolate, obj, "UserType", data->UserType);
  /* 预埋单状态 */
  GetNodeObjectChar(isolate, obj, "Status", data->Status);
  /* 错误代码 */
  GetNodeObjectInt(isolate, obj, "ErrorID", data->ErrorID);
  /* 错误信息 */
  GetNodeObjectString(isolate, obj, "ErrorMsg", data->ErrorMsg);
  /* 互换单标志 */
  GetNodeObjectInt(isolate, obj, "IsSwapOrder", data->IsSwapOrder);
  /* 资金账号 */
  GetNodeObjectString(isolate, obj, "AccountID", data->AccountID);
  /* 币种代码 */
  GetNodeObjectString(isolate, obj, "CurrencyID", data->CurrencyID);
  /* 交易编码 */
  GetNodeObjectString(isolate, obj, "ClientID", data->ClientID);
  /* 投资单元代码 */
  GetNodeObjectString(isolate, obj, "InvestUnitID", data->InvestUnitID);
  /* IP地址 */
  GetNodeObjectString(isolate, obj, "IPAddress", data->IPAddress);
  /* Mac地址 */
  GetNodeObjectString(isolate, obj, "MacAddress", data->MacAddress);

  RequestBaton *baton = new RequestBaton(cb, that, EV_REQ_PARKED_ORDER_INSERT,
                                         shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 预埋撤单录入请求
 */
void CtpTd::ReqParkedOrderAction(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcParkedOrderActionField *data = new CThostFtdcParkedOrderActionField;
  memset(data, 0x0, sizeof(*data));

  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 投资者代码 */
  GetNodeObjectString(isolate, obj, "InvestorID", data->InvestorID);
  /* 报单操作引用 */
  GetNodeObjectInt(isolate, obj, "OrderActionRef", data->OrderActionRef);
  /* 报单引用 */
  GetNodeObjectString(isolate, obj, "OrderRef", data->OrderRef);
  /* 请求编号 */
  GetNodeObjectInt(isolate, obj, "RequestID", data->RequestID);
  /* 前置编号 */
  GetNodeObjectInt(isolate, obj, "FrontID", data->FrontID);
  /* 会话编号 */
  GetNodeObjectInt(isolate, obj, "SessionID", data->SessionID);
  /* 交易所代码 */
  GetNodeObjectString(isolate, obj, "ExchangeID", data->ExchangeID);
  /* 报单编号 */
  GetNodeObjectString(isolate, obj, "OrderSysID", data->OrderSysID);
  /* 操作标志 */
  GetNodeObjectChar(isolate, obj, "ActionFlag", data->ActionFlag);
  /* 价格 */
  GetNodeObjectDouble(isolate, obj, "LimitPrice", data->LimitPrice);
  /* 数量变化 */
  GetNodeObjectInt(isolate, obj, "VolumeChange", data->VolumeChange);
  /* 用户代码 */
  GetNodeObjectString(isolate, obj, "UserID", data->UserID);
  /* 合约代码 */
  GetNodeObjectString(isolate, obj, "InstrumentID", data->InstrumentID);
  /* 预埋撤单单编号 */
  GetNodeObjectString(isolate, obj, "ParkedOrderActionID",
                      data->ParkedOrderActionID);
  /* 用户类型 */
  GetNodeObjectChar(isolate, obj, "UserType", data->UserType);
  /* 预埋撤单状态 */
  GetNodeObjectChar(isolate, obj, "Status", data->Status);
  /* 错误代码 */
  GetNodeObjectInt(isolate, obj, "ErrorID", data->ErrorID);
  /* 错误信息 */
  GetNodeObjectString(isolate, obj, "ErrorMsg", data->ErrorMsg);
  /* 投资单元代码 */
  GetNodeObjectString(isolate, obj, "InvestUnitID", data->InvestUnitID);
  /* IP地址 */
  GetNodeObjectString(isolate, obj, "IPAddress", data->IPAddress);
  /* Mac地址 */
  GetNodeObjectString(isolate, obj, "MacAddress", data->MacAddress);

  RequestBaton *baton = new RequestBaton(cb, that, EV_REQ_PARKED_ORDER_ACTION,
                                         shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 报单操作请求
 */
void CtpTd::ReqOrderAction(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcInputOrderActionField *data = new CThostFtdcInputOrderActionField;
  memset(data, 0x0, sizeof(*data));

  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 投资者代码 */
  GetNodeObjectString(isolate, obj, "InvestorID", data->InvestorID);
  /* 报单操作引用 */
  GetNodeObjectInt(isolate, obj, "OrderActionRef", data->OrderActionRef);
  /* 报单引用 */
  GetNodeObjectString(isolate, obj, "OrderRef", data->OrderRef);
  /* 请求编号 */
  GetNodeObjectInt(isolate, obj, "RequestID", data->RequestID);
  /* 前置编号 */
  GetNodeObjectInt(isolate, obj, "FrontID", data->FrontID);
  /* 会话编号 */
  GetNodeObjectInt(isolate, obj, "SessionID", data->SessionID);
  /* 交易所代码 */
  GetNodeObjectString(isolate, obj, "ExchangeID", data->ExchangeID);
  /* 报单编号 */
  GetNodeObjectString(isolate, obj, "OrderSysID", data->OrderSysID);
  /* 操作标志 */
  GetNodeObjectChar(isolate, obj, "ActionFlag", data->ActionFlag);
  /* 价格 */
  GetNodeObjectDouble(isolate, obj, "LimitPrice", data->LimitPrice);
  /* 数量变化 */
  GetNodeObjectInt(isolate, obj, "VolumeChange", data->VolumeChange);
  /* 用户代码 */
  GetNodeObjectString(isolate, obj, "UserID", data->UserID);
  /* 合约代码 */
  GetNodeObjectString(isolate, obj, "InstrumentID", data->InstrumentID);
  /* 投资单元代码 */
  GetNodeObjectString(isolate, obj, "InvestUnitID", data->InvestUnitID);
  /* IP地址 */
  GetNodeObjectString(isolate, obj, "IPAddress", data->IPAddress);
  /* Mac地址 */
  GetNodeObjectString(isolate, obj, "MacAddress", data->MacAddress);

  RequestBaton *baton = new RequestBaton(cb, that, EV_REQ_ORDER_ACTION,
                                         shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 查询最大报单数量请求
 */
void CtpTd::ReqQueryMaxOrderVolume(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcQueryMaxOrderVolumeField *data =
      new CThostFtdcQueryMaxOrderVolumeField;
  memset(data, 0x0, sizeof(*data));

  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 投资者代码 */
  GetNodeObjectString(isolate, obj, "InvestorID", data->InvestorID);
  /* 合约代码 */
  GetNodeObjectString(isolate, obj, "InstrumentID", data->InstrumentID);
  /* 买卖方向 */
  GetNodeObjectChar(isolate, obj, "Direction", data->Direction);
  /* 开平标志 */
  GetNodeObjectChar(isolate, obj, "OffsetFlag", data->OffsetFlag);
  /* 投机套保标志 */
  GetNodeObjectChar(isolate, obj, "HedgeFlag", data->HedgeFlag);
  /* 最大允许报单数量 */
  GetNodeObjectInt(isolate, obj, "MaxVolume", data->MaxVolume);
  /* 交易所代码 */
  GetNodeObjectString(isolate, obj, "ExchangeID", data->ExchangeID);

  RequestBaton *baton =
      new RequestBaton(cb, that, EV_REQ_QUERY_MAX_ORDER_VOLUME,
                       shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 投资者结算结果确认
 */
void CtpTd::ReqSettlementInfoConfirm(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcSettlementInfoConfirmField *data =
      new CThostFtdcSettlementInfoConfirmField;
  memset(data, 0x0, sizeof(*data));

  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 投资者代码 */
  GetNodeObjectString(isolate, obj, "InvestorID", data->InvestorID);
  /* 确认日期 */
  GetNodeObjectString(isolate, obj, "ConfirmDate", data->ConfirmDate);
  /* 确认时间 */
  GetNodeObjectString(isolate, obj, "ConfirmTime", data->ConfirmTime);

  RequestBaton *baton =
      new RequestBaton(cb, that, EV_REQ_SETTLEMENT_INFO_CONFIRM,
                       shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 请求删除预埋单
 */
void CtpTd::ReqRemoveParkedOrder(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcRemoveParkedOrderField *data = new CThostFtdcRemoveParkedOrderField;
  memset(data, 0x0, sizeof(*data));

  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 投资者代码 */
  GetNodeObjectString(isolate, obj, "InvestorID", data->InvestorID);
  /* 预埋报单编号 */
  GetNodeObjectString(isolate, obj, "ParkedOrderID", data->ParkedOrderID);

  RequestBaton *baton = new RequestBaton(cb, that, EV_REQ_REMOVE_PARKED_ORDER,
                                         shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 请求删除预埋撤单
 */
void CtpTd::ReqRemoveParkedOrderAction(
    const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcRemoveParkedOrderActionField *data =
      new CThostFtdcRemoveParkedOrderActionField;
  memset(data, 0x0, sizeof(*data));

  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 投资者代码 */
  GetNodeObjectString(isolate, obj, "InvestorID", data->InvestorID);
  /* 预埋撤单编号 */
  GetNodeObjectString(isolate, obj, "ParkedOrderActionID",
                      data->ParkedOrderActionID);

  RequestBaton *baton =
      new RequestBaton(cb, that, EV_REQ_REMOVE_PARKED_ORDER_ACTION,
                       shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 执行宣告录入请求
 */
void CtpTd::ReqExecOrderInsert(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcInputExecOrderField *data = new CThostFtdcInputExecOrderField;
  memset(data, 0x0, sizeof(*data));

  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 投资者代码 */
  GetNodeObjectString(isolate, obj, "InvestorID", data->InvestorID);
  /* 合约代码 */
  GetNodeObjectString(isolate, obj, "InstrumentID", data->InstrumentID);
  /* 执行宣告引用 */
  GetNodeObjectString(isolate, obj, "ExecOrderRef", data->ExecOrderRef);
  /* 用户代码 */
  GetNodeObjectString(isolate, obj, "UserID", data->UserID);
  /* 数量 */
  GetNodeObjectInt(isolate, obj, "Volume", data->Volume);
  /* 请求编号 */
  GetNodeObjectInt(isolate, obj, "RequestID", data->RequestID);
  /* 业务单元 */
  GetNodeObjectString(isolate, obj, "BusinessUnit", data->BusinessUnit);
  /* 开平标志 */
  GetNodeObjectChar(isolate, obj, "OffsetFlag", data->OffsetFlag);
  /* 投机套保标志 */
  GetNodeObjectChar(isolate, obj, "HedgeFlag", data->HedgeFlag);
  /* 执行类型 */
  GetNodeObjectChar(isolate, obj, "ActionType", data->ActionType);
  /* 保留头寸申请的持仓方向 */
  GetNodeObjectChar(isolate, obj, "PosiDirection", data->PosiDirection);
  /* 期权行权后是否保留期货头寸的标记 */
  GetNodeObjectChar(isolate, obj, "ReservePositionFlag",
                    data->ReservePositionFlag);
  /* 期权行权后生成的头寸是否自动平仓 */
  GetNodeObjectChar(isolate, obj, "CloseFlag", data->CloseFlag);
  /* 交易所代码 */
  GetNodeObjectString(isolate, obj, "ExchangeID", data->ExchangeID);
  /* 投资单元代码 */
  GetNodeObjectString(isolate, obj, "InvestUnitID", data->InvestUnitID);
  /* 资金账号 */
  GetNodeObjectString(isolate, obj, "AccountID", data->AccountID);
  /* 币种代码 */
  GetNodeObjectString(isolate, obj, "CurrencyID", data->CurrencyID);
  /* 交易编码 */
  GetNodeObjectString(isolate, obj, "ClientID", data->ClientID);
  /* IP地址 */
  GetNodeObjectString(isolate, obj, "IPAddress", data->IPAddress);
  /* Mac地址 */
  GetNodeObjectString(isolate, obj, "MacAddress", data->MacAddress);

  RequestBaton *baton = new RequestBaton(cb, that, EV_REQ_EXEC_ORDER_INSERT,
                                         shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 执行宣告操作请求
 */
void CtpTd::ReqExecOrderAction(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcInputExecOrderActionField *data =
      new CThostFtdcInputExecOrderActionField;
  memset(data, 0x0, sizeof(*data));

  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 投资者代码 */
  GetNodeObjectString(isolate, obj, "InvestorID", data->InvestorID);
  /* 执行宣告操作引用 */
  GetNodeObjectInt(isolate, obj, "ExecOrderActionRef",
                   data->ExecOrderActionRef);
  /* 执行宣告引用 */
  GetNodeObjectString(isolate, obj, "ExecOrderRef", data->ExecOrderRef);
  /* 请求编号 */
  GetNodeObjectInt(isolate, obj, "RequestID", data->RequestID);
  /* 前置编号 */
  GetNodeObjectInt(isolate, obj, "FrontID", data->FrontID);
  /* 会话编号 */
  GetNodeObjectInt(isolate, obj, "SessionID", data->SessionID);
  /* 交易所代码 */
  GetNodeObjectString(isolate, obj, "ExchangeID", data->ExchangeID);
  /* 执行宣告操作编号 */
  GetNodeObjectString(isolate, obj, "ExecOrderSysID", data->ExecOrderSysID);
  /* 操作标志 */
  GetNodeObjectChar(isolate, obj, "ActionFlag", data->ActionFlag);
  /* 用户代码 */
  GetNodeObjectString(isolate, obj, "UserID", data->UserID);
  /* 合约代码 */
  GetNodeObjectString(isolate, obj, "InstrumentID", data->InstrumentID);
  /* 投资单元代码 */
  GetNodeObjectString(isolate, obj, "InvestUnitID", data->InvestUnitID);
  /* IP地址 */
  GetNodeObjectString(isolate, obj, "IPAddress", data->IPAddress);
  /* Mac地址 */
  GetNodeObjectString(isolate, obj, "MacAddress", data->MacAddress);

  RequestBaton *baton = new RequestBaton(cb, that, EV_REQ_EXEC_ORDER_ACTION,
                                         shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 询价录入请求
 */
void CtpTd::ReqForQuoteInsert(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcInputForQuoteField *data = new CThostFtdcInputForQuoteField;
  memset(data, 0x0, sizeof(*data));

  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 投资者代码 */
  GetNodeObjectString(isolate, obj, "InvestorID", data->InvestorID);
  /* 合约代码 */
  GetNodeObjectString(isolate, obj, "InstrumentID", data->InstrumentID);
  /* 询价引用 */
  GetNodeObjectString(isolate, obj, "ForQuoteRef", data->ForQuoteRef);
  /* 用户代码 */
  GetNodeObjectString(isolate, obj, "UserID", data->UserID);
  /* 交易所代码 */
  GetNodeObjectString(isolate, obj, "ExchangeID", data->ExchangeID);
  /* 投资单元代码 */
  GetNodeObjectString(isolate, obj, "InvestUnitID", data->InvestUnitID);
  /* IP地址 */
  GetNodeObjectString(isolate, obj, "IPAddress", data->IPAddress);
  /* Mac地址 */
  GetNodeObjectString(isolate, obj, "MacAddress", data->MacAddress);

  RequestBaton *baton = new RequestBaton(cb, that, EV_REQ_FOR_QUOTE_INSERT,
                                         shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 报价录入请求
 */
void CtpTd::ReqQuoteInsert(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcInputQuoteField *data = new CThostFtdcInputQuoteField;
  memset(data, 0x0, sizeof(*data));

  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 投资者代码 */
  GetNodeObjectString(isolate, obj, "InvestorID", data->InvestorID);
  /* 合约代码 */
  GetNodeObjectString(isolate, obj, "InstrumentID", data->InstrumentID);
  /* 报价引用 */
  GetNodeObjectString(isolate, obj, "QuoteRef", data->QuoteRef);
  /* 用户代码 */
  GetNodeObjectString(isolate, obj, "UserID", data->UserID);
  /* 卖价格 */
  GetNodeObjectDouble(isolate, obj, "AskPrice", data->AskPrice);
  /* 买价格 */
  GetNodeObjectDouble(isolate, obj, "BidPrice", data->BidPrice);
  /* 卖数量 */
  GetNodeObjectInt(isolate, obj, "AskVolume", data->AskVolume);
  /* 买数量 */
  GetNodeObjectInt(isolate, obj, "BidVolume", data->BidVolume);
  /* 请求编号 */
  GetNodeObjectInt(isolate, obj, "RequestID", data->RequestID);
  /* 业务单元 */
  GetNodeObjectString(isolate, obj, "BusinessUnit", data->BusinessUnit);
  /* 卖开平标志 */
  GetNodeObjectChar(isolate, obj, "AskOffsetFlag", data->AskOffsetFlag);
  /* 买开平标志 */
  GetNodeObjectChar(isolate, obj, "BidOffsetFlag", data->BidOffsetFlag);
  /* 卖投机套保标志 */
  GetNodeObjectChar(isolate, obj, "AskHedgeFlag", data->AskHedgeFlag);
  /* 买投机套保标志 */
  GetNodeObjectChar(isolate, obj, "BidHedgeFlag", data->BidHedgeFlag);
  /* 衍生卖报单引用 */
  GetNodeObjectString(isolate, obj, "AskOrderRef", data->AskOrderRef);
  /* 衍生买报单引用 */
  GetNodeObjectString(isolate, obj, "BidOrderRef", data->BidOrderRef);
  /* 应价编号 */
  GetNodeObjectString(isolate, obj, "ForQuoteSysID", data->ForQuoteSysID);
  /* 交易所代码 */
  GetNodeObjectString(isolate, obj, "ExchangeID", data->ExchangeID);
  /* 投资单元代码 */
  GetNodeObjectString(isolate, obj, "InvestUnitID", data->InvestUnitID);
  /* 交易编码 */
  GetNodeObjectString(isolate, obj, "ClientID", data->ClientID);
  /* IP地址 */
  GetNodeObjectString(isolate, obj, "IPAddress", data->IPAddress);
  /* Mac地址 */
  GetNodeObjectString(isolate, obj, "MacAddress", data->MacAddress);

  RequestBaton *baton = new RequestBaton(cb, that, EV_REQ_QUOTE_INSERT,
                                         shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 报价操作请求
 */
void CtpTd::ReqQuoteAction(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcInputQuoteActionField *data = new CThostFtdcInputQuoteActionField;
  memset(data, 0x0, sizeof(*data));

  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 投资者代码 */
  GetNodeObjectString(isolate, obj, "InvestorID", data->InvestorID);
  /* 报价操作引用 */
  GetNodeObjectInt(isolate, obj, "QuoteActionRef", data->QuoteActionRef);
  /* 报价引用 */
  GetNodeObjectString(isolate, obj, "QuoteRef", data->QuoteRef);
  /* 请求编号 */
  GetNodeObjectInt(isolate, obj, "RequestID", data->RequestID);
  /* 前置编号 */
  GetNodeObjectInt(isolate, obj, "FrontID", data->FrontID);
  /* 会话编号 */
  GetNodeObjectInt(isolate, obj, "SessionID", data->SessionID);
  /* 交易所代码 */
  GetNodeObjectString(isolate, obj, "ExchangeID", data->ExchangeID);
  /* 报价操作编号 */
  GetNodeObjectString(isolate, obj, "QuoteSysID", data->QuoteSysID);
  /* 操作标志 */
  GetNodeObjectChar(isolate, obj, "ActionFlag", data->ActionFlag);
  /* 用户代码 */
  GetNodeObjectString(isolate, obj, "UserID", data->UserID);
  /* 合约代码 */
  GetNodeObjectString(isolate, obj, "InstrumentID", data->InstrumentID);
  /* 投资单元代码 */
  GetNodeObjectString(isolate, obj, "InvestUnitID", data->InvestUnitID);
  /* 交易编码 */
  GetNodeObjectString(isolate, obj, "ClientID", data->ClientID);
  /* IP地址 */
  GetNodeObjectString(isolate, obj, "IPAddress", data->IPAddress);
  /* Mac地址 */
  GetNodeObjectString(isolate, obj, "MacAddress", data->MacAddress);

  RequestBaton *baton = new RequestBaton(cb, that, EV_REQ_QUOTE_ACTION,
                                         shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 锁定请求
 */
void CtpTd::ReqLockInsert(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcInputLockField *data = new CThostFtdcInputLockField;
  memset(data, 0x0, sizeof(*data));

  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 投资者代码 */
  GetNodeObjectString(isolate, obj, "InvestorID", data->InvestorID);
  /* 合约代码 */
  GetNodeObjectString(isolate, obj, "InstrumentID", data->InstrumentID);
  /* 锁定引用 */
  GetNodeObjectString(isolate, obj, "LockRef", data->LockRef);
  /* 用户代码 */
  GetNodeObjectString(isolate, obj, "UserID", data->UserID);
  /* 数量 */
  GetNodeObjectInt(isolate, obj, "Volume", data->Volume);
  /* 请求编号 */
  GetNodeObjectInt(isolate, obj, "RequestID", data->RequestID);
  /* 业务单元 */
  GetNodeObjectString(isolate, obj, "BusinessUnit", data->BusinessUnit);
  /* 锁定类型 */
  GetNodeObjectChar(isolate, obj, "LockType", data->LockType);
  /* 交易所代码 */
  GetNodeObjectString(isolate, obj, "ExchangeID", data->ExchangeID);
  /* IP地址 */
  GetNodeObjectString(isolate, obj, "IPAddress", data->IPAddress);
  /* Mac地址 */
  GetNodeObjectString(isolate, obj, "MacAddress", data->MacAddress);

  RequestBaton *baton = new RequestBaton(cb, that, EV_REQ_LOCK_INSERT,
                                         shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 批量报单操作请求
 */
void CtpTd::ReqBatchOrderAction(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcInputBatchOrderActionField *data =
      new CThostFtdcInputBatchOrderActionField;
  memset(data, 0x0, sizeof(*data));

  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 投资者代码 */
  GetNodeObjectString(isolate, obj, "InvestorID", data->InvestorID);
  /* 报单操作引用 */
  GetNodeObjectInt(isolate, obj, "OrderActionRef", data->OrderActionRef);
  /* 请求编号 */
  GetNodeObjectInt(isolate, obj, "RequestID", data->RequestID);
  /* 前置编号 */
  GetNodeObjectInt(isolate, obj, "FrontID", data->FrontID);
  /* 会话编号 */
  GetNodeObjectInt(isolate, obj, "SessionID", data->SessionID);
  /* 交易所代码 */
  GetNodeObjectString(isolate, obj, "ExchangeID", data->ExchangeID);
  /* 用户代码 */
  GetNodeObjectString(isolate, obj, "UserID", data->UserID);
  /* 投资单元代码 */
  GetNodeObjectString(isolate, obj, "InvestUnitID", data->InvestUnitID);
  /* IP地址 */
  GetNodeObjectString(isolate, obj, "IPAddress", data->IPAddress);
  /* Mac地址 */
  GetNodeObjectString(isolate, obj, "MacAddress", data->MacAddress);

  RequestBaton *baton = new RequestBaton(cb, that, EV_REQ_BATCH_ORDER_ACTION,
                                         shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 申请组合录入请求
 */
void CtpTd::ReqCombActionInsert(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcInputCombActionField *data = new CThostFtdcInputCombActionField;
  memset(data, 0x0, sizeof(*data));

  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 投资者代码 */
  GetNodeObjectString(isolate, obj, "InvestorID", data->InvestorID);
  /* 合约代码 */
  GetNodeObjectString(isolate, obj, "InstrumentID", data->InstrumentID);
  /* 组合引用 */
  GetNodeObjectString(isolate, obj, "CombActionRef", data->CombActionRef);
  /* 用户代码 */
  GetNodeObjectString(isolate, obj, "UserID", data->UserID);
  /* 买卖方向 */
  GetNodeObjectChar(isolate, obj, "Direction", data->Direction);
  /* 数量 */
  GetNodeObjectInt(isolate, obj, "Volume", data->Volume);
  /* 组合指令方向 */
  GetNodeObjectChar(isolate, obj, "CombDirection", data->CombDirection);
  /* 投机套保标志 */
  GetNodeObjectChar(isolate, obj, "HedgeFlag", data->HedgeFlag);
  /* 交易所代码 */
  GetNodeObjectString(isolate, obj, "ExchangeID", data->ExchangeID);
  /* IP地址 */
  GetNodeObjectString(isolate, obj, "IPAddress", data->IPAddress);
  /* Mac地址 */
  GetNodeObjectString(isolate, obj, "MacAddress", data->MacAddress);

  RequestBaton *baton = new RequestBaton(cb, that, EV_REQ_COMB_ACTION_INSERT,
                                         shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 请求查询报单
 */
void CtpTd::ReqQryOrder(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcQryOrderField *data = new CThostFtdcQryOrderField;
  memset(data, 0x0, sizeof(*data));

  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 投资者代码 */
  GetNodeObjectString(isolate, obj, "InvestorID", data->InvestorID);
  /* 合约代码 */
  GetNodeObjectString(isolate, obj, "InstrumentID", data->InstrumentID);
  /* 交易所代码 */
  GetNodeObjectString(isolate, obj, "ExchangeID", data->ExchangeID);
  /* 报单编号 */
  GetNodeObjectString(isolate, obj, "OrderSysID", data->OrderSysID);
  /* 开始时间 */
  GetNodeObjectString(isolate, obj, "InsertTimeStart", data->InsertTimeStart);
  /* 结束时间 */
  GetNodeObjectString(isolate, obj, "InsertTimeEnd", data->InsertTimeEnd);

  RequestBaton *baton = new RequestBaton(cb, that, EV_REQ_QRY_ORDER,
                                         shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 请求查询成交
 */
void CtpTd::ReqQryTrade(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcQryTradeField *data = new CThostFtdcQryTradeField;
  memset(data, 0x0, sizeof(*data));

  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 投资者代码 */
  GetNodeObjectString(isolate, obj, "InvestorID", data->InvestorID);
  /* 合约代码 */
  GetNodeObjectString(isolate, obj, "InstrumentID", data->InstrumentID);
  /* 交易所代码 */
  GetNodeObjectString(isolate, obj, "ExchangeID", data->ExchangeID);
  /* 成交编号 */
  GetNodeObjectString(isolate, obj, "TradeID", data->TradeID);
  /* 开始时间 */
  GetNodeObjectString(isolate, obj, "TradeTimeStart", data->TradeTimeStart);
  /* 结束时间 */
  GetNodeObjectString(isolate, obj, "TradeTimeEnd", data->TradeTimeEnd);

  RequestBaton *baton = new RequestBaton(cb, that, EV_REQ_QRY_TRADE,
                                         shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 请求查询投资者持仓
 */
void CtpTd::ReqQryInvestorPosition(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcQryInvestorPositionField *data =
      new CThostFtdcQryInvestorPositionField;
  memset(data, 0x0, sizeof(*data));

  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 投资者代码 */
  GetNodeObjectString(isolate, obj, "InvestorID", data->InvestorID);
  /* 合约代码 */
  GetNodeObjectString(isolate, obj, "InstrumentID", data->InstrumentID);
  /* 交易所代码 */
  GetNodeObjectString(isolate, obj, "ExchangeID", data->ExchangeID);

  RequestBaton *baton = new RequestBaton(cb, that, EV_REQ_QRY_INVESTOR_POSITION,
                                         shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 请求查询资金账户
 */
void CtpTd::ReqQryTradingAccount(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcQryTradingAccountField *data = new CThostFtdcQryTradingAccountField;
  memset(data, 0x0, sizeof(*data));

  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 投资者代码 */
  GetNodeObjectString(isolate, obj, "InvestorID", data->InvestorID);
  /* 币种代码 */
  GetNodeObjectString(isolate, obj, "CurrencyID", data->CurrencyID);
  /* 业务类型 */
  GetNodeObjectChar(isolate, obj, "BizType", data->BizType);

  RequestBaton *baton = new RequestBaton(cb, that, EV_REQ_QRY_TRADING_ACCOUNT,
                                         shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 请求查询投资者
 */
void CtpTd::ReqQryInvestor(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcQryInvestorField *data = new CThostFtdcQryInvestorField;
  memset(data, 0x0, sizeof(*data));

  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 投资者代码 */
  GetNodeObjectString(isolate, obj, "InvestorID", data->InvestorID);

  RequestBaton *baton = new RequestBaton(cb, that, EV_REQ_QRY_INVESTOR,
                                         shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 请求查询交易编码
 */
void CtpTd::ReqQryTradingCode(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcQryTradingCodeField *data = new CThostFtdcQryTradingCodeField;
  memset(data, 0x0, sizeof(*data));

  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 投资者代码 */
  GetNodeObjectString(isolate, obj, "InvestorID", data->InvestorID);
  /* 交易所代码 */
  GetNodeObjectString(isolate, obj, "ExchangeID", data->ExchangeID);
  /* 客户代码 */
  GetNodeObjectString(isolate, obj, "ClientID", data->ClientID);
  /* 交易编码类型 */
  GetNodeObjectChar(isolate, obj, "ClientIDType", data->ClientIDType);

  RequestBaton *baton = new RequestBaton(cb, that, EV_REQ_QRY_TRADING_CODE,
                                         shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 请求查询合约保证金率
 */
void CtpTd::ReqQryInstrumentMarginRate(
    const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcQryInstrumentMarginRateField *data =
      new CThostFtdcQryInstrumentMarginRateField;
  memset(data, 0x0, sizeof(*data));

  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 投资者代码 */
  GetNodeObjectString(isolate, obj, "InvestorID", data->InvestorID);
  /* 合约代码 */
  GetNodeObjectString(isolate, obj, "InstrumentID", data->InstrumentID);
  /* 投机套保标志 */
  GetNodeObjectChar(isolate, obj, "HedgeFlag", data->HedgeFlag);

  RequestBaton *baton =
      new RequestBaton(cb, that, EV_REQ_QRY_INSTRUMENT_MARGIN_RATE,
                       shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 请求查询合约手续费率
 */
void CtpTd::ReqQryInstrumentCommissionRate(
    const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcQryInstrumentCommissionRateField *data =
      new CThostFtdcQryInstrumentCommissionRateField;
  memset(data, 0x0, sizeof(*data));

  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 投资者代码 */
  GetNodeObjectString(isolate, obj, "InvestorID", data->InvestorID);
  /* 合约代码 */
  GetNodeObjectString(isolate, obj, "InstrumentID", data->InstrumentID);
  /* 交易所代码 */
  GetNodeObjectString(isolate, obj, "ExchangeID", data->ExchangeID);

  RequestBaton *baton =
      new RequestBaton(cb, that, EV_REQ_QRY_INSTRUMENT_COMMISSION_RATE,
                       shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 请求查询交易所
 */
void CtpTd::ReqQryExchange(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcQryExchangeField *data = new CThostFtdcQryExchangeField;
  memset(data, 0x0, sizeof(*data));

  /* 交易所代码 */
  GetNodeObjectString(isolate, obj, "ExchangeID", data->ExchangeID);

  RequestBaton *baton = new RequestBaton(cb, that, EV_REQ_QRY_EXCHANGE,
                                         shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 请求查询产品
 */
void CtpTd::ReqQryProduct(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcQryProductField *data = new CThostFtdcQryProductField;
  memset(data, 0x0, sizeof(*data));

  /* 产品代码 */
  GetNodeObjectString(isolate, obj, "ProductID", data->ProductID);
  /* 产品类型 */
  GetNodeObjectChar(isolate, obj, "ProductClass", data->ProductClass);
  /* 交易所代码 */
  GetNodeObjectString(isolate, obj, "ExchangeID", data->ExchangeID);

  RequestBaton *baton = new RequestBaton(cb, that, EV_REQ_QRY_PRODUCT,
                                         shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 请求查询合约
 */
void CtpTd::ReqQryInstrument(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcQryInstrumentField *data = new CThostFtdcQryInstrumentField;
  memset(data, 0x0, sizeof(*data));

  /* 合约代码 */
  GetNodeObjectString(isolate, obj, "InstrumentID", data->InstrumentID);
  /* 交易所代码 */
  GetNodeObjectString(isolate, obj, "ExchangeID", data->ExchangeID);
  /* 合约在交易所的代码 */
  GetNodeObjectString(isolate, obj, "ExchangeInstID", data->ExchangeInstID);
  /* 产品代码 */
  GetNodeObjectString(isolate, obj, "ProductID", data->ProductID);

  RequestBaton *baton = new RequestBaton(cb, that, EV_REQ_QRY_INSTRUMENT,
                                         shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 请求查询行情
 */
void CtpTd::ReqQryDepthMarketData(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcQryDepthMarketDataField *data =
      new CThostFtdcQryDepthMarketDataField;
  memset(data, 0x0, sizeof(*data));

  /* 合约代码 */
  GetNodeObjectString(isolate, obj, "InstrumentID", data->InstrumentID);
  /* 交易所代码 */
  GetNodeObjectString(isolate, obj, "ExchangeID", data->ExchangeID);

  RequestBaton *baton = new RequestBaton(cb, that, EV_REQ_QRY_DEPTH_MARKET_DATA,
                                         shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 请求查询投资者结算结果
 */
void CtpTd::ReqQrySettlementInfo(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcQrySettlementInfoField *data = new CThostFtdcQrySettlementInfoField;
  memset(data, 0x0, sizeof(*data));

  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 投资者代码 */
  GetNodeObjectString(isolate, obj, "InvestorID", data->InvestorID);
  /* 交易日 */
  GetNodeObjectString(isolate, obj, "TradingDay", data->TradingDay);

  RequestBaton *baton = new RequestBaton(cb, that, EV_REQ_QRY_SETTLEMENT_INFO,
                                         shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 请求查询转帐银行
 */
void CtpTd::ReqQryTransferBank(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcQryTransferBankField *data = new CThostFtdcQryTransferBankField;
  memset(data, 0x0, sizeof(*data));

  /* 银行代码 */
  GetNodeObjectString(isolate, obj, "BankID", data->BankID);
  /* 银行分中心代码 */
  GetNodeObjectString(isolate, obj, "BankBrchID", data->BankBrchID);

  RequestBaton *baton = new RequestBaton(cb, that, EV_REQ_QRY_TRANSFER_BANK,
                                         shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 请求查询投资者持仓明细
 */
void CtpTd::ReqQryInvestorPositionDetail(
    const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcQryInvestorPositionDetailField *data =
      new CThostFtdcQryInvestorPositionDetailField;
  memset(data, 0x0, sizeof(*data));

  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 投资者代码 */
  GetNodeObjectString(isolate, obj, "InvestorID", data->InvestorID);
  /* 合约代码 */
  GetNodeObjectString(isolate, obj, "InstrumentID", data->InstrumentID);
  /* 交易所代码 */
  GetNodeObjectString(isolate, obj, "ExchangeID", data->ExchangeID);

  RequestBaton *baton =
      new RequestBaton(cb, that, EV_REQ_QRY_INVESTOR_POSITION_DETAIL,
                       shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 请求查询客户通知
 */
void CtpTd::ReqQryNotice(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcQryNoticeField *data = new CThostFtdcQryNoticeField;
  memset(data, 0x0, sizeof(*data));

  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);

  RequestBaton *baton = new RequestBaton(cb, that, EV_REQ_QRY_NOTICE,
                                         shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 请求查询结算信息确认
 */
void CtpTd::ReqQrySettlementInfoConfirm(
    const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcQrySettlementInfoConfirmField *data =
      new CThostFtdcQrySettlementInfoConfirmField;
  memset(data, 0x0, sizeof(*data));

  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 投资者代码 */
  GetNodeObjectString(isolate, obj, "InvestorID", data->InvestorID);

  RequestBaton *baton =
      new RequestBaton(cb, that, EV_REQ_QRY_SETTLEMENT_INFO_CONFIRM,
                       shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 请求查询投资者持仓明细
 */
void CtpTd::ReqQryInvestorPositionCombineDetail(
    const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcQryInvestorPositionCombineDetailField *data =
      new CThostFtdcQryInvestorPositionCombineDetailField;
  memset(data, 0x0, sizeof(*data));

  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 投资者代码 */
  GetNodeObjectString(isolate, obj, "InvestorID", data->InvestorID);
  /* 组合持仓合约编码 */
  GetNodeObjectString(isolate, obj, "CombInstrumentID", data->CombInstrumentID);

  RequestBaton *baton =
      new RequestBaton(cb, that, EV_REQ_QRY_INVESTOR_POSITION_COMBINE_DETAIL,
                       shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 请求查询保证金监管系统经纪公司资金账户密钥
 */
void CtpTd::ReqQryCFMMCTradingAccountKey(
    const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcQryCFMMCTradingAccountKeyField *data =
      new CThostFtdcQryCFMMCTradingAccountKeyField;
  memset(data, 0x0, sizeof(*data));

  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 投资者代码 */
  GetNodeObjectString(isolate, obj, "InvestorID", data->InvestorID);

  RequestBaton *baton =
      new RequestBaton(cb, that, EV_REQ_QRY_CFMMCTRADING_ACCOUNT_KEY,
                       shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 请求查询仓单折抵信息
 */
void CtpTd::ReqQryEWarrantOffset(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcQryEWarrantOffsetField *data = new CThostFtdcQryEWarrantOffsetField;
  memset(data, 0x0, sizeof(*data));

  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 投资者代码 */
  GetNodeObjectString(isolate, obj, "InvestorID", data->InvestorID);
  /* 交易所代码 */
  GetNodeObjectString(isolate, obj, "ExchangeID", data->ExchangeID);
  /* 合约代码 */
  GetNodeObjectString(isolate, obj, "InstrumentID", data->InstrumentID);

  RequestBaton *baton = new RequestBaton(cb, that, EV_REQ_QRY_EWARRANT_OFFSET,
                                         shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 请求查询投资者品种/跨品种保证金
 */
void CtpTd::ReqQryInvestorProductGroupMargin(
    const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcQryInvestorProductGroupMarginField *data =
      new CThostFtdcQryInvestorProductGroupMarginField;
  memset(data, 0x0, sizeof(*data));

  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 投资者代码 */
  GetNodeObjectString(isolate, obj, "InvestorID", data->InvestorID);
  /* 品种/跨品种标示 */
  GetNodeObjectString(isolate, obj, "ProductGroupID", data->ProductGroupID);
  /* 投机套保标志 */
  GetNodeObjectChar(isolate, obj, "HedgeFlag", data->HedgeFlag);

  RequestBaton *baton =
      new RequestBaton(cb, that, EV_REQ_QRY_INVESTOR_PRODUCT_GROUP_MARGIN,
                       shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 请求查询交易所保证金率
 */
void CtpTd::ReqQryExchangeMarginRate(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcQryExchangeMarginRateField *data =
      new CThostFtdcQryExchangeMarginRateField;
  memset(data, 0x0, sizeof(*data));

  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 合约代码 */
  GetNodeObjectString(isolate, obj, "InstrumentID", data->InstrumentID);
  /* 投机套保标志 */
  GetNodeObjectChar(isolate, obj, "HedgeFlag", data->HedgeFlag);

  RequestBaton *baton =
      new RequestBaton(cb, that, EV_REQ_QRY_EXCHANGE_MARGIN_RATE,
                       shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 请求查询交易所调整保证金率
 */
void CtpTd::ReqQryExchangeMarginRateAdjust(
    const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcQryExchangeMarginRateAdjustField *data =
      new CThostFtdcQryExchangeMarginRateAdjustField;
  memset(data, 0x0, sizeof(*data));

  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 合约代码 */
  GetNodeObjectString(isolate, obj, "InstrumentID", data->InstrumentID);
  /* 投机套保标志 */
  GetNodeObjectChar(isolate, obj, "HedgeFlag", data->HedgeFlag);

  RequestBaton *baton =
      new RequestBaton(cb, that, EV_REQ_QRY_EXCHANGE_MARGIN_RATE_ADJUST,
                       shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 请求查询汇率
 */
void CtpTd::ReqQryExchangeRate(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcQryExchangeRateField *data = new CThostFtdcQryExchangeRateField;
  memset(data, 0x0, sizeof(*data));

  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 源币种 */
  GetNodeObjectString(isolate, obj, "FromCurrencyID", data->FromCurrencyID);
  /* 目标币种 */
  GetNodeObjectString(isolate, obj, "ToCurrencyID", data->ToCurrencyID);

  RequestBaton *baton = new RequestBaton(cb, that, EV_REQ_QRY_EXCHANGE_RATE,
                                         shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 请求查询二级代理操作员银期权限
 */
void CtpTd::ReqQrySecAgentACIDMap(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcQrySecAgentACIDMapField *data =
      new CThostFtdcQrySecAgentACIDMapField;
  memset(data, 0x0, sizeof(*data));

  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 用户代码 */
  GetNodeObjectString(isolate, obj, "UserID", data->UserID);
  /* 资金账户 */
  GetNodeObjectString(isolate, obj, "AccountID", data->AccountID);
  /* 币种 */
  GetNodeObjectString(isolate, obj, "CurrencyID", data->CurrencyID);

  RequestBaton *baton = new RequestBaton(cb, that, EV_REQ_QRY_SEC_AGENT_ACIDMAP,
                                         shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 请求查询产品报价汇率
 */
void CtpTd::ReqQryProductExchRate(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcQryProductExchRateField *data =
      new CThostFtdcQryProductExchRateField;
  memset(data, 0x0, sizeof(*data));

  /* 产品代码 */
  GetNodeObjectString(isolate, obj, "ProductID", data->ProductID);

  RequestBaton *baton = new RequestBaton(cb, that, EV_REQ_QRY_PRODUCT_EXCH_RATE,
                                         shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 请求查询产品组
 */
void CtpTd::ReqQryProductGroup(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcQryProductGroupField *data = new CThostFtdcQryProductGroupField;
  memset(data, 0x0, sizeof(*data));

  /* 产品代码 */
  GetNodeObjectString(isolate, obj, "ProductID", data->ProductID);
  /* 交易所代码 */
  GetNodeObjectString(isolate, obj, "ExchangeID", data->ExchangeID);

  RequestBaton *baton = new RequestBaton(cb, that, EV_REQ_QRY_PRODUCT_GROUP,
                                         shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 请求查询做市商合约手续费率
 */
void CtpTd::ReqQryMMInstrumentCommissionRate(
    const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcQryMMInstrumentCommissionRateField *data =
      new CThostFtdcQryMMInstrumentCommissionRateField;
  memset(data, 0x0, sizeof(*data));

  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 投资者代码 */
  GetNodeObjectString(isolate, obj, "InvestorID", data->InvestorID);
  /* 合约代码 */
  GetNodeObjectString(isolate, obj, "InstrumentID", data->InstrumentID);
  /* 交易所代码 */
  GetNodeObjectString(isolate, obj, "ExchangeID", data->ExchangeID);

  RequestBaton *baton =
      new RequestBaton(cb, that, EV_REQ_QRY_MMINSTRUMENT_COMMISSION_RATE,
                       shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 请求查询做市商期权合约手续费
 */
void CtpTd::ReqQryMMOptionInstrCommRate(
    const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcQryMMOptionInstrCommRateField *data =
      new CThostFtdcQryMMOptionInstrCommRateField;
  memset(data, 0x0, sizeof(*data));

  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 投资者代码 */
  GetNodeObjectString(isolate, obj, "InvestorID", data->InvestorID);
  /* 合约代码 */
  GetNodeObjectString(isolate, obj, "InstrumentID", data->InstrumentID);
  /* 交易所代码 */
  GetNodeObjectString(isolate, obj, "ExchangeID", data->ExchangeID);

  RequestBaton *baton =
      new RequestBaton(cb, that, EV_REQ_QRY_MMOPTION_INSTR_COMM_RATE,
                       shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 请求查询报单手续费
 */
void CtpTd::ReqQryInstrumentOrderCommRate(
    const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcQryInstrumentOrderCommRateField *data =
      new CThostFtdcQryInstrumentOrderCommRateField;
  memset(data, 0x0, sizeof(*data));

  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 投资者代码 */
  GetNodeObjectString(isolate, obj, "InvestorID", data->InvestorID);
  /* 合约代码 */
  GetNodeObjectString(isolate, obj, "InstrumentID", data->InstrumentID);
  /* 交易所代码 */
  GetNodeObjectString(isolate, obj, "ExchangeID", data->ExchangeID);

  RequestBaton *baton =
      new RequestBaton(cb, that, EV_REQ_QRY_INSTRUMENT_ORDER_COMM_RATE,
                       shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 请求查询期权交易成本
 */
void CtpTd::ReqQryOptionInstrTradeCost(
    const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcQryOptionInstrTradeCostField *data =
      new CThostFtdcQryOptionInstrTradeCostField;
  memset(data, 0x0, sizeof(*data));

  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 投资者代码 */
  GetNodeObjectString(isolate, obj, "InvestorID", data->InvestorID);
  /* 合约代码 */
  GetNodeObjectString(isolate, obj, "InstrumentID", data->InstrumentID);
  /* 投机套保标志 */
  GetNodeObjectChar(isolate, obj, "HedgeFlag", data->HedgeFlag);
  /* 期权合约报价 */
  GetNodeObjectDouble(isolate, obj, "InputPrice", data->InputPrice);
  /* 标的价格,填0则用昨结算价 */
  GetNodeObjectDouble(isolate, obj, "UnderlyingPrice", data->UnderlyingPrice);
  /* 交易所代码 */
  GetNodeObjectString(isolate, obj, "ExchangeID", data->ExchangeID);

  RequestBaton *baton =
      new RequestBaton(cb, that, EV_REQ_QRY_OPTION_INSTR_TRADE_COST,
                       shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 请求查询期权合约手续费
 */
void CtpTd::ReqQryOptionInstrCommRate(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcQryOptionInstrCommRateField *data =
      new CThostFtdcQryOptionInstrCommRateField;
  memset(data, 0x0, sizeof(*data));

  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 投资者代码 */
  GetNodeObjectString(isolate, obj, "InvestorID", data->InvestorID);
  /* 合约代码 */
  GetNodeObjectString(isolate, obj, "InstrumentID", data->InstrumentID);
  /* 交易所代码 */
  GetNodeObjectString(isolate, obj, "ExchangeID", data->ExchangeID);

  RequestBaton *baton =
      new RequestBaton(cb, that, EV_REQ_QRY_OPTION_INSTR_COMM_RATE,
                       shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 请求查询执行宣告
 */
void CtpTd::ReqQryExecOrder(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcQryExecOrderField *data = new CThostFtdcQryExecOrderField;
  memset(data, 0x0, sizeof(*data));

  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 投资者代码 */
  GetNodeObjectString(isolate, obj, "InvestorID", data->InvestorID);
  /* 合约代码 */
  GetNodeObjectString(isolate, obj, "InstrumentID", data->InstrumentID);
  /* 交易所代码 */
  GetNodeObjectString(isolate, obj, "ExchangeID", data->ExchangeID);
  /* 执行宣告编号 */
  GetNodeObjectString(isolate, obj, "ExecOrderSysID", data->ExecOrderSysID);
  /* 开始时间 */
  GetNodeObjectString(isolate, obj, "InsertTimeStart", data->InsertTimeStart);
  /* 结束时间 */
  GetNodeObjectString(isolate, obj, "InsertTimeEnd", data->InsertTimeEnd);

  RequestBaton *baton = new RequestBaton(cb, that, EV_REQ_QRY_EXEC_ORDER,
                                         shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 请求查询询价
 */
void CtpTd::ReqQryForQuote(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcQryForQuoteField *data = new CThostFtdcQryForQuoteField;
  memset(data, 0x0, sizeof(*data));

  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 投资者代码 */
  GetNodeObjectString(isolate, obj, "InvestorID", data->InvestorID);
  /* 合约代码 */
  GetNodeObjectString(isolate, obj, "InstrumentID", data->InstrumentID);
  /* 交易所代码 */
  GetNodeObjectString(isolate, obj, "ExchangeID", data->ExchangeID);
  /* 开始时间 */
  GetNodeObjectString(isolate, obj, "InsertTimeStart", data->InsertTimeStart);
  /* 结束时间 */
  GetNodeObjectString(isolate, obj, "InsertTimeEnd", data->InsertTimeEnd);

  RequestBaton *baton = new RequestBaton(cb, that, EV_REQ_QRY_FOR_QUOTE,
                                         shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 请求查询报价
 */
void CtpTd::ReqQryQuote(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcQryQuoteField *data = new CThostFtdcQryQuoteField;
  memset(data, 0x0, sizeof(*data));

  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 投资者代码 */
  GetNodeObjectString(isolate, obj, "InvestorID", data->InvestorID);
  /* 合约代码 */
  GetNodeObjectString(isolate, obj, "InstrumentID", data->InstrumentID);
  /* 交易所代码 */
  GetNodeObjectString(isolate, obj, "ExchangeID", data->ExchangeID);
  /* 报价编号 */
  GetNodeObjectString(isolate, obj, "QuoteSysID", data->QuoteSysID);
  /* 开始时间 */
  GetNodeObjectString(isolate, obj, "InsertTimeStart", data->InsertTimeStart);
  /* 结束时间 */
  GetNodeObjectString(isolate, obj, "InsertTimeEnd", data->InsertTimeEnd);

  RequestBaton *baton = new RequestBaton(cb, that, EV_REQ_QRY_QUOTE,
                                         shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 请求查询锁定
 */
void CtpTd::ReqQryLock(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcQryLockField *data = new CThostFtdcQryLockField;
  memset(data, 0x0, sizeof(*data));

  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 投资者代码 */
  GetNodeObjectString(isolate, obj, "InvestorID", data->InvestorID);
  /* 合约代码 */
  GetNodeObjectString(isolate, obj, "InstrumentID", data->InstrumentID);
  /* 交易所代码 */
  GetNodeObjectString(isolate, obj, "ExchangeID", data->ExchangeID);
  /* 锁定编号 */
  GetNodeObjectString(isolate, obj, "LockSysID", data->LockSysID);
  /* 开始时间 */
  GetNodeObjectString(isolate, obj, "InsertTimeStart", data->InsertTimeStart);
  /* 结束时间 */
  GetNodeObjectString(isolate, obj, "InsertTimeEnd", data->InsertTimeEnd);

  RequestBaton *baton = new RequestBaton(cb, that, EV_REQ_QRY_LOCK,
                                         shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 请求查询锁定证券仓位
 */
void CtpTd::ReqQryLockPosition(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcQryLockPositionField *data = new CThostFtdcQryLockPositionField;
  memset(data, 0x0, sizeof(*data));

  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 投资者代码 */
  GetNodeObjectString(isolate, obj, "InvestorID", data->InvestorID);
  /* 合约代码 */
  GetNodeObjectString(isolate, obj, "InstrumentID", data->InstrumentID);
  /* 交易所代码 */
  GetNodeObjectString(isolate, obj, "ExchangeID", data->ExchangeID);

  RequestBaton *baton = new RequestBaton(cb, that, EV_REQ_QRY_LOCK_POSITION,
                                         shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 请求查询ETF期权合约手续费
 */
void CtpTd::ReqQryETFOptionInstrCommRate(
    const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcQryETFOptionInstrCommRateField *data =
      new CThostFtdcQryETFOptionInstrCommRateField;
  memset(data, 0x0, sizeof(*data));

  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 投资者代码 */
  GetNodeObjectString(isolate, obj, "InvestorID", data->InvestorID);
  /* 合约代码 */
  GetNodeObjectString(isolate, obj, "InstrumentID", data->InstrumentID);
  /* 交易所代码 */
  GetNodeObjectString(isolate, obj, "ExchangeID", data->ExchangeID);

  RequestBaton *baton =
      new RequestBaton(cb, that, EV_REQ_QRY_ETFOPTION_INSTR_COMM_RATE,
                       shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 请求查询投资者分级
 */
void CtpTd::ReqQryInvestorLevel(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcQryInvestorLevelField *data = new CThostFtdcQryInvestorLevelField;
  memset(data, 0x0, sizeof(*data));

  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 投资者代码 */
  GetNodeObjectString(isolate, obj, "InvestorID", data->InvestorID);
  /* 交易所代码 */
  GetNodeObjectString(isolate, obj, "ExchangeID", data->ExchangeID);

  RequestBaton *baton = new RequestBaton(cb, that, EV_REQ_QRY_INVESTOR_LEVEL,
                                         shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 请求查询E+1日行权冻结
 */
void CtpTd::ReqQryExecFreeze(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcQryExecFreezeField *data = new CThostFtdcQryExecFreezeField;
  memset(data, 0x0, sizeof(*data));

  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 投资者代码 */
  GetNodeObjectString(isolate, obj, "InvestorID", data->InvestorID);
  /* 合约代码 */
  GetNodeObjectString(isolate, obj, "InstrumentID", data->InstrumentID);
  /* 交易所代码 */
  GetNodeObjectString(isolate, obj, "ExchangeID", data->ExchangeID);

  RequestBaton *baton = new RequestBaton(cb, that, EV_REQ_QRY_EXEC_FREEZE,
                                         shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 请求查询组合合约安全系数
 */
void CtpTd::ReqQryCombInstrumentGuard(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcQryCombInstrumentGuardField *data =
      new CThostFtdcQryCombInstrumentGuardField;
  memset(data, 0x0, sizeof(*data));

  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 合约代码 */
  GetNodeObjectString(isolate, obj, "InstrumentID", data->InstrumentID);

  RequestBaton *baton =
      new RequestBaton(cb, that, EV_REQ_QRY_COMB_INSTRUMENT_GUARD,
                       shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 请求查询申请组合
 */
void CtpTd::ReqQryCombAction(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcQryCombActionField *data = new CThostFtdcQryCombActionField;
  memset(data, 0x0, sizeof(*data));

  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 投资者代码 */
  GetNodeObjectString(isolate, obj, "InvestorID", data->InvestorID);
  /* 合约代码 */
  GetNodeObjectString(isolate, obj, "InstrumentID", data->InstrumentID);
  /* 交易所代码 */
  GetNodeObjectString(isolate, obj, "ExchangeID", data->ExchangeID);

  RequestBaton *baton = new RequestBaton(cb, that, EV_REQ_QRY_COMB_ACTION,
                                         shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 请求查询转帐流水
 */
void CtpTd::ReqQryTransferSerial(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcQryTransferSerialField *data = new CThostFtdcQryTransferSerialField;
  memset(data, 0x0, sizeof(*data));

  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 投资者帐号 */
  GetNodeObjectString(isolate, obj, "AccountID", data->AccountID);
  /* 银行编码 */
  GetNodeObjectString(isolate, obj, "BankID", data->BankID);
  /* 币种代码 */
  GetNodeObjectString(isolate, obj, "CurrencyID", data->CurrencyID);

  RequestBaton *baton = new RequestBaton(cb, that, EV_REQ_QRY_TRANSFER_SERIAL,
                                         shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 请求查询银期签约关系
 */
void CtpTd::ReqQryAccountregister(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcQryAccountregisterField *data =
      new CThostFtdcQryAccountregisterField;
  memset(data, 0x0, sizeof(*data));

  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 投资者帐号 */
  GetNodeObjectString(isolate, obj, "AccountID", data->AccountID);
  /* 银行编码 */
  GetNodeObjectString(isolate, obj, "BankID", data->BankID);
  /* 银行分支机构编码 */
  GetNodeObjectString(isolate, obj, "BankBranchID", data->BankBranchID);
  /* 币种代码 */
  GetNodeObjectString(isolate, obj, "CurrencyID", data->CurrencyID);

  RequestBaton *baton = new RequestBaton(cb, that, EV_REQ_QRY_ACCOUNTREGISTER,
                                         shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 请求查询签约银行
 */
void CtpTd::ReqQryContractBank(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcQryContractBankField *data = new CThostFtdcQryContractBankField;
  memset(data, 0x0, sizeof(*data));

  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 银行代码 */
  GetNodeObjectString(isolate, obj, "BankID", data->BankID);
  /* 银行分中心代码 */
  GetNodeObjectString(isolate, obj, "BankBrchID", data->BankBrchID);

  RequestBaton *baton = new RequestBaton(cb, that, EV_REQ_QRY_CONTRACT_BANK,
                                         shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 请求查询预埋单
 */
void CtpTd::ReqQryParkedOrder(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcQryParkedOrderField *data = new CThostFtdcQryParkedOrderField;
  memset(data, 0x0, sizeof(*data));

  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 投资者代码 */
  GetNodeObjectString(isolate, obj, "InvestorID", data->InvestorID);
  /* 合约代码 */
  GetNodeObjectString(isolate, obj, "InstrumentID", data->InstrumentID);
  /* 交易所代码 */
  GetNodeObjectString(isolate, obj, "ExchangeID", data->ExchangeID);

  RequestBaton *baton = new RequestBaton(cb, that, EV_REQ_QRY_PARKED_ORDER,
                                         shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 请求查询预埋撤单
 */
void CtpTd::ReqQryParkedOrderAction(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcQryParkedOrderActionField *data =
      new CThostFtdcQryParkedOrderActionField;
  memset(data, 0x0, sizeof(*data));

  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 投资者代码 */
  GetNodeObjectString(isolate, obj, "InvestorID", data->InvestorID);
  /* 合约代码 */
  GetNodeObjectString(isolate, obj, "InstrumentID", data->InstrumentID);
  /* 交易所代码 */
  GetNodeObjectString(isolate, obj, "ExchangeID", data->ExchangeID);

  RequestBaton *baton =
      new RequestBaton(cb, that, EV_REQ_QRY_PARKED_ORDER_ACTION,
                       shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 请求查询交易通知
 */
void CtpTd::ReqQryTradingNotice(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcQryTradingNoticeField *data = new CThostFtdcQryTradingNoticeField;
  memset(data, 0x0, sizeof(*data));

  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 投资者代码 */
  GetNodeObjectString(isolate, obj, "InvestorID", data->InvestorID);

  RequestBaton *baton = new RequestBaton(cb, that, EV_REQ_QRY_TRADING_NOTICE,
                                         shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 请求查询经纪公司交易参数
 */
void CtpTd::ReqQryBrokerTradingParams(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcQryBrokerTradingParamsField *data =
      new CThostFtdcQryBrokerTradingParamsField;
  memset(data, 0x0, sizeof(*data));

  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 投资者代码 */
  GetNodeObjectString(isolate, obj, "InvestorID", data->InvestorID);
  /* 币种代码 */
  GetNodeObjectString(isolate, obj, "CurrencyID", data->CurrencyID);

  RequestBaton *baton =
      new RequestBaton(cb, that, EV_REQ_QRY_BROKER_TRADING_PARAMS,
                       shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 请求查询经纪公司交易算法
 */
void CtpTd::ReqQryBrokerTradingAlgos(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcQryBrokerTradingAlgosField *data =
      new CThostFtdcQryBrokerTradingAlgosField;
  memset(data, 0x0, sizeof(*data));

  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 交易所代码 */
  GetNodeObjectString(isolate, obj, "ExchangeID", data->ExchangeID);
  /* 合约代码 */
  GetNodeObjectString(isolate, obj, "InstrumentID", data->InstrumentID);

  RequestBaton *baton =
      new RequestBaton(cb, that, EV_REQ_QRY_BROKER_TRADING_ALGOS,
                       shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 请求查询监控中心用户令牌
 */
void CtpTd::ReqQueryCFMMCTradingAccountToken(
    const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcQueryCFMMCTradingAccountTokenField *data =
      new CThostFtdcQueryCFMMCTradingAccountTokenField;
  memset(data, 0x0, sizeof(*data));

  /* 经纪公司代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 投资者代码 */
  GetNodeObjectString(isolate, obj, "InvestorID", data->InvestorID);

  RequestBaton *baton =
      new RequestBaton(cb, that, EV_REQ_QUERY_CFMMCTRADING_ACCOUNT_TOKEN,
                       shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 期货发起银行资金转期货请求
 */
void CtpTd::ReqFromBankToFutureByFuture(
    const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcReqTransferField *data = new CThostFtdcReqTransferField;
  memset(data, 0x0, sizeof(*data));

  /* 业务功能码 */
  GetNodeObjectString(isolate, obj, "TradeCode", data->TradeCode);
  /* 银行代码 */
  GetNodeObjectString(isolate, obj, "BankID", data->BankID);
  /* 银行分支机构代码 */
  GetNodeObjectString(isolate, obj, "BankBranchID", data->BankBranchID);
  /* 期商代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 期商分支机构代码 */
  GetNodeObjectString(isolate, obj, "BrokerBranchID", data->BrokerBranchID);
  /* 交易日期 */
  GetNodeObjectString(isolate, obj, "TradeDate", data->TradeDate);
  /* 交易时间 */
  GetNodeObjectString(isolate, obj, "TradeTime", data->TradeTime);
  /* 银行流水号 */
  GetNodeObjectString(isolate, obj, "BankSerial", data->BankSerial);
  /* 交易系统日期 */
  GetNodeObjectString(isolate, obj, "TradingDay", data->TradingDay);
  /* 银期平台消息流水号 */
  GetNodeObjectInt(isolate, obj, "PlateSerial", data->PlateSerial);
  /* 最后分片标志 */
  GetNodeObjectChar(isolate, obj, "LastFragment", data->LastFragment);
  /* 会话号 */
  GetNodeObjectInt(isolate, obj, "SessionID", data->SessionID);
  /* 客户姓名 */
  GetNodeObjectString(isolate, obj, "CustomerName", data->CustomerName);
  /* 证件类型 */
  GetNodeObjectChar(isolate, obj, "IdCardType", data->IdCardType);
  /* 证件号码 */
  GetNodeObjectString(isolate, obj, "IdentifiedCardNo", data->IdentifiedCardNo);
  /* 客户类型 */
  GetNodeObjectChar(isolate, obj, "CustType", data->CustType);
  /* 银行帐号 */
  GetNodeObjectString(isolate, obj, "BankAccount", data->BankAccount);
  /* 银行密码 */
  GetNodeObjectString(isolate, obj, "BankPassWord", data->BankPassWord);
  /* 投资者帐号 */
  GetNodeObjectString(isolate, obj, "AccountID", data->AccountID);
  /* 期货密码 */
  GetNodeObjectString(isolate, obj, "Password", data->Password);
  /* 安装编号 */
  GetNodeObjectInt(isolate, obj, "InstallID", data->InstallID);
  /* 期货公司流水号 */
  GetNodeObjectInt(isolate, obj, "FutureSerial", data->FutureSerial);
  /* 用户标识 */
  GetNodeObjectString(isolate, obj, "UserID", data->UserID);
  /* 验证客户证件号码标志 */
  GetNodeObjectChar(isolate, obj, "VerifyCertNoFlag", data->VerifyCertNoFlag);
  /* 币种代码 */
  GetNodeObjectString(isolate, obj, "CurrencyID", data->CurrencyID);
  /* 转帐金额 */
  GetNodeObjectDouble(isolate, obj, "TradeAmount", data->TradeAmount);
  /* 期货可取金额 */
  GetNodeObjectDouble(isolate, obj, "FutureFetchAmount",
                      data->FutureFetchAmount);
  /* 费用支付标志 */
  GetNodeObjectChar(isolate, obj, "FeePayFlag", data->FeePayFlag);
  /* 应收客户费用 */
  GetNodeObjectDouble(isolate, obj, "CustFee", data->CustFee);
  /* 应收期货公司费用 */
  GetNodeObjectDouble(isolate, obj, "BrokerFee", data->BrokerFee);
  /* 发送方给接收方的消息 */
  GetNodeObjectString(isolate, obj, "Message", data->Message);
  /* 摘要 */
  GetNodeObjectString(isolate, obj, "Digest", data->Digest);
  /* 银行帐号类型 */
  GetNodeObjectChar(isolate, obj, "BankAccType", data->BankAccType);
  /* 渠道标志 */
  GetNodeObjectString(isolate, obj, "DeviceID", data->DeviceID);
  /* 期货单位帐号类型 */
  GetNodeObjectChar(isolate, obj, "BankSecuAccType", data->BankSecuAccType);
  /* 期货公司银行编码 */
  GetNodeObjectString(isolate, obj, "BrokerIDByBank", data->BrokerIDByBank);
  /* 期货单位帐号 */
  GetNodeObjectString(isolate, obj, "BankSecuAcc", data->BankSecuAcc);
  /* 银行密码标志 */
  GetNodeObjectChar(isolate, obj, "BankPwdFlag", data->BankPwdFlag);
  /* 期货资金密码核对标志 */
  GetNodeObjectChar(isolate, obj, "SecuPwdFlag", data->SecuPwdFlag);
  /* 交易柜员 */
  GetNodeObjectString(isolate, obj, "OperNo", data->OperNo);
  /* 请求编号 */
  GetNodeObjectInt(isolate, obj, "RequestID", data->RequestID);
  /* 交易ID */
  GetNodeObjectInt(isolate, obj, "TID", data->TID);
  /* 转账交易状态 */
  GetNodeObjectChar(isolate, obj, "TransferStatus", data->TransferStatus);

  RequestBaton *baton =
      new RequestBaton(cb, that, EV_REQ_FROM_BANK_TO_FUTURE_BY_FUTURE,
                       shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 期货发起期货资金转银行请求
 */
void CtpTd::ReqFromFutureToBankByFuture(
    const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcReqTransferField *data = new CThostFtdcReqTransferField;
  memset(data, 0x0, sizeof(*data));

  /* 业务功能码 */
  GetNodeObjectString(isolate, obj, "TradeCode", data->TradeCode);
  /* 银行代码 */
  GetNodeObjectString(isolate, obj, "BankID", data->BankID);
  /* 银行分支机构代码 */
  GetNodeObjectString(isolate, obj, "BankBranchID", data->BankBranchID);
  /* 期商代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 期商分支机构代码 */
  GetNodeObjectString(isolate, obj, "BrokerBranchID", data->BrokerBranchID);
  /* 交易日期 */
  GetNodeObjectString(isolate, obj, "TradeDate", data->TradeDate);
  /* 交易时间 */
  GetNodeObjectString(isolate, obj, "TradeTime", data->TradeTime);
  /* 银行流水号 */
  GetNodeObjectString(isolate, obj, "BankSerial", data->BankSerial);
  /* 交易系统日期 */
  GetNodeObjectString(isolate, obj, "TradingDay", data->TradingDay);
  /* 银期平台消息流水号 */
  GetNodeObjectInt(isolate, obj, "PlateSerial", data->PlateSerial);
  /* 最后分片标志 */
  GetNodeObjectChar(isolate, obj, "LastFragment", data->LastFragment);
  /* 会话号 */
  GetNodeObjectInt(isolate, obj, "SessionID", data->SessionID);
  /* 客户姓名 */
  GetNodeObjectString(isolate, obj, "CustomerName", data->CustomerName);
  /* 证件类型 */
  GetNodeObjectChar(isolate, obj, "IdCardType", data->IdCardType);
  /* 证件号码 */
  GetNodeObjectString(isolate, obj, "IdentifiedCardNo", data->IdentifiedCardNo);
  /* 客户类型 */
  GetNodeObjectChar(isolate, obj, "CustType", data->CustType);
  /* 银行帐号 */
  GetNodeObjectString(isolate, obj, "BankAccount", data->BankAccount);
  /* 银行密码 */
  GetNodeObjectString(isolate, obj, "BankPassWord", data->BankPassWord);
  /* 投资者帐号 */
  GetNodeObjectString(isolate, obj, "AccountID", data->AccountID);
  /* 期货密码 */
  GetNodeObjectString(isolate, obj, "Password", data->Password);
  /* 安装编号 */
  GetNodeObjectInt(isolate, obj, "InstallID", data->InstallID);
  /* 期货公司流水号 */
  GetNodeObjectInt(isolate, obj, "FutureSerial", data->FutureSerial);
  /* 用户标识 */
  GetNodeObjectString(isolate, obj, "UserID", data->UserID);
  /* 验证客户证件号码标志 */
  GetNodeObjectChar(isolate, obj, "VerifyCertNoFlag", data->VerifyCertNoFlag);
  /* 币种代码 */
  GetNodeObjectString(isolate, obj, "CurrencyID", data->CurrencyID);
  /* 转帐金额 */
  GetNodeObjectDouble(isolate, obj, "TradeAmount", data->TradeAmount);
  /* 期货可取金额 */
  GetNodeObjectDouble(isolate, obj, "FutureFetchAmount",
                      data->FutureFetchAmount);
  /* 费用支付标志 */
  GetNodeObjectChar(isolate, obj, "FeePayFlag", data->FeePayFlag);
  /* 应收客户费用 */
  GetNodeObjectDouble(isolate, obj, "CustFee", data->CustFee);
  /* 应收期货公司费用 */
  GetNodeObjectDouble(isolate, obj, "BrokerFee", data->BrokerFee);
  /* 发送方给接收方的消息 */
  GetNodeObjectString(isolate, obj, "Message", data->Message);
  /* 摘要 */
  GetNodeObjectString(isolate, obj, "Digest", data->Digest);
  /* 银行帐号类型 */
  GetNodeObjectChar(isolate, obj, "BankAccType", data->BankAccType);
  /* 渠道标志 */
  GetNodeObjectString(isolate, obj, "DeviceID", data->DeviceID);
  /* 期货单位帐号类型 */
  GetNodeObjectChar(isolate, obj, "BankSecuAccType", data->BankSecuAccType);
  /* 期货公司银行编码 */
  GetNodeObjectString(isolate, obj, "BrokerIDByBank", data->BrokerIDByBank);
  /* 期货单位帐号 */
  GetNodeObjectString(isolate, obj, "BankSecuAcc", data->BankSecuAcc);
  /* 银行密码标志 */
  GetNodeObjectChar(isolate, obj, "BankPwdFlag", data->BankPwdFlag);
  /* 期货资金密码核对标志 */
  GetNodeObjectChar(isolate, obj, "SecuPwdFlag", data->SecuPwdFlag);
  /* 交易柜员 */
  GetNodeObjectString(isolate, obj, "OperNo", data->OperNo);
  /* 请求编号 */
  GetNodeObjectInt(isolate, obj, "RequestID", data->RequestID);
  /* 交易ID */
  GetNodeObjectInt(isolate, obj, "TID", data->TID);
  /* 转账交易状态 */
  GetNodeObjectChar(isolate, obj, "TransferStatus", data->TransferStatus);

  RequestBaton *baton =
      new RequestBaton(cb, that, EV_REQ_FROM_FUTURE_TO_BANK_BY_FUTURE,
                       shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 期货发起查询银行余额请求
 */
void CtpTd::ReqQueryBankAccountMoneyByFuture(
    const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsObject() || !args[1]->IsInt32() || !args[2]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Object> obj = args[0]->ToObject();
  int request_id = args[1]->Int32Value();
  Local<Function> cb = Local<Function>::Cast(args[2]);

  CThostFtdcReqQueryAccountField *data = new CThostFtdcReqQueryAccountField;
  memset(data, 0x0, sizeof(*data));

  /* 业务功能码 */
  GetNodeObjectString(isolate, obj, "TradeCode", data->TradeCode);
  /* 银行代码 */
  GetNodeObjectString(isolate, obj, "BankID", data->BankID);
  /* 银行分支机构代码 */
  GetNodeObjectString(isolate, obj, "BankBranchID", data->BankBranchID);
  /* 期商代码 */
  GetNodeObjectString(isolate, obj, "BrokerID", data->BrokerID);
  /* 期商分支机构代码 */
  GetNodeObjectString(isolate, obj, "BrokerBranchID", data->BrokerBranchID);
  /* 交易日期 */
  GetNodeObjectString(isolate, obj, "TradeDate", data->TradeDate);
  /* 交易时间 */
  GetNodeObjectString(isolate, obj, "TradeTime", data->TradeTime);
  /* 银行流水号 */
  GetNodeObjectString(isolate, obj, "BankSerial", data->BankSerial);
  /* 交易系统日期 */
  GetNodeObjectString(isolate, obj, "TradingDay", data->TradingDay);
  /* 银期平台消息流水号 */
  GetNodeObjectInt(isolate, obj, "PlateSerial", data->PlateSerial);
  /* 最后分片标志 */
  GetNodeObjectChar(isolate, obj, "LastFragment", data->LastFragment);
  /* 会话号 */
  GetNodeObjectInt(isolate, obj, "SessionID", data->SessionID);
  /* 客户姓名 */
  GetNodeObjectString(isolate, obj, "CustomerName", data->CustomerName);
  /* 证件类型 */
  GetNodeObjectChar(isolate, obj, "IdCardType", data->IdCardType);
  /* 证件号码 */
  GetNodeObjectString(isolate, obj, "IdentifiedCardNo", data->IdentifiedCardNo);
  /* 客户类型 */
  GetNodeObjectChar(isolate, obj, "CustType", data->CustType);
  /* 银行帐号 */
  GetNodeObjectString(isolate, obj, "BankAccount", data->BankAccount);
  /* 银行密码 */
  GetNodeObjectString(isolate, obj, "BankPassWord", data->BankPassWord);
  /* 投资者帐号 */
  GetNodeObjectString(isolate, obj, "AccountID", data->AccountID);
  /* 期货密码 */
  GetNodeObjectString(isolate, obj, "Password", data->Password);
  /* 期货公司流水号 */
  GetNodeObjectInt(isolate, obj, "FutureSerial", data->FutureSerial);
  /* 安装编号 */
  GetNodeObjectInt(isolate, obj, "InstallID", data->InstallID);
  /* 用户标识 */
  GetNodeObjectString(isolate, obj, "UserID", data->UserID);
  /* 验证客户证件号码标志 */
  GetNodeObjectChar(isolate, obj, "VerifyCertNoFlag", data->VerifyCertNoFlag);
  /* 币种代码 */
  GetNodeObjectString(isolate, obj, "CurrencyID", data->CurrencyID);
  /* 摘要 */
  GetNodeObjectString(isolate, obj, "Digest", data->Digest);
  /* 银行帐号类型 */
  GetNodeObjectChar(isolate, obj, "BankAccType", data->BankAccType);
  /* 渠道标志 */
  GetNodeObjectString(isolate, obj, "DeviceID", data->DeviceID);
  /* 期货单位帐号类型 */
  GetNodeObjectChar(isolate, obj, "BankSecuAccType", data->BankSecuAccType);
  /* 期货公司银行编码 */
  GetNodeObjectString(isolate, obj, "BrokerIDByBank", data->BrokerIDByBank);
  /* 期货单位帐号 */
  GetNodeObjectString(isolate, obj, "BankSecuAcc", data->BankSecuAcc);
  /* 银行密码标志 */
  GetNodeObjectChar(isolate, obj, "BankPwdFlag", data->BankPwdFlag);
  /* 期货资金密码核对标志 */
  GetNodeObjectChar(isolate, obj, "SecuPwdFlag", data->SecuPwdFlag);
  /* 交易柜员 */
  GetNodeObjectString(isolate, obj, "OperNo", data->OperNo);
  /* 请求编号 */
  GetNodeObjectInt(isolate, obj, "RequestID", data->RequestID);
  /* 交易ID */
  GetNodeObjectInt(isolate, obj, "TID", data->TID);

  RequestBaton *baton =
      new RequestBaton(cb, that, EV_REQ_QUERY_BANK_ACCOUNT_MONEY_BY_FUTURE,
                       shared_ptr<void>(data), request_id);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/**
 * 安全退出
 */
void CtpTd::Exit(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  Local<Function> cb = Local<Function>::Cast(args[0]);

  RequestBaton *baton = new RequestBaton(cb, that, EV_EXIT);
  uv_queue_work(uv_default_loop(), &baton->work, RequestAsync,
                RequestAsyncAfter);
}

/* ---------------------------------------------------------------------------
 * SPI接口
 * ---------------------------------------------------------------------------
 */

/**
 * 当客户端与交易后台建立起通信连接时(还未登录前), 该方法被调用
 */
void CtpTd::OnFrontConnected() {
  ResponseAsyncSend(new ResponseBaton(EV_ON_FRONT_CONNECTED));
}

/**
 * 当客户端与交易后台通信连接断开时, 该方法被调用. 当发生这个情况后,
 * API会自动重新连接, 客户端可不做处理
 * @param nReason 错误原因
 *         0x1001 网络读失败
 *         0x1002 网络写失败
 *         0x2001 接收心跳超时
 *         0x2002 发送心跳失败
 *         0x2003 收到错误报文
 */
void CtpTd::OnFrontDisconnected(int reason) {
  ResponseAsyncSend(new ResponseBaton(EV_ON_FRONT_DISCONNECTED,
                                      shared_ptr<void>(new int(reason))));
}

/**
 * 心跳超时警告. 当长时间未收到报文时, 该方法被调用
 * @param nTimeLapse 距离上次接收报文的时间
 */
void CtpTd::OnHeartBeatWarning(int time_lapse) {
  ResponseAsyncSend(new ResponseBaton(EV_ON_HEART_BEAT_WARNING,
                                      shared_ptr<void>(new int(time_lapse))));
}

/**
 * 客户端认证响应
 */
void CtpTd::OnRspAuthenticate(CThostFtdcRspAuthenticateField *data,
                              CThostFtdcRspInfoField *error, int request_id,
                              bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_AUTHENTICATE,
      shared_ptr<void>(data ? new CThostFtdcRspAuthenticateField(*data) : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 登录请求响应
 */
void CtpTd::OnRspUserLogin(CThostFtdcRspUserLoginField *data,
                           CThostFtdcRspInfoField *error, int request_id,
                           bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_USER_LOGIN,
      shared_ptr<void>(data ? new CThostFtdcRspUserLoginField(*data) : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 登出请求响应
 */
void CtpTd::OnRspUserLogout(CThostFtdcUserLogoutField *data,
                            CThostFtdcRspInfoField *error, int request_id,
                            bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_USER_LOGOUT,
      shared_ptr<void>(data ? new CThostFtdcUserLogoutField(*data) : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 用户口令更新请求响应
 */
void CtpTd::OnRspUserPasswordUpdate(CThostFtdcUserPasswordUpdateField *data,
                                    CThostFtdcRspInfoField *error,
                                    int request_id, bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_USER_PASSWORD_UPDATE,
      shared_ptr<void>(data ? new CThostFtdcUserPasswordUpdateField(*data)
                            : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 资金账户口令更新请求响应
 */
void CtpTd::OnRspTradingAccountPasswordUpdate(
    CThostFtdcTradingAccountPasswordUpdateField *data,
    CThostFtdcRspInfoField *error, int request_id, bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_TRADING_ACCOUNT_PASSWORD_UPDATE,
      shared_ptr<void>(
          data ? new CThostFtdcTradingAccountPasswordUpdateField(*data) : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 报单录入请求响应
 */
void CtpTd::OnRspOrderInsert(CThostFtdcInputOrderField *data,
                             CThostFtdcRspInfoField *error, int request_id,
                             bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_ORDER_INSERT,
      shared_ptr<void>(data ? new CThostFtdcInputOrderField(*data) : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 预埋单录入请求响应
 */
void CtpTd::OnRspParkedOrderInsert(CThostFtdcParkedOrderField *data,
                                   CThostFtdcRspInfoField *error,
                                   int request_id, bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_PARKED_ORDER_INSERT,
      shared_ptr<void>(data ? new CThostFtdcParkedOrderField(*data) : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 预埋撤单录入请求响应
 */
void CtpTd::OnRspParkedOrderAction(CThostFtdcParkedOrderActionField *data,
                                   CThostFtdcRspInfoField *error,
                                   int request_id, bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_PARKED_ORDER_ACTION,
      shared_ptr<void>(data ? new CThostFtdcParkedOrderActionField(*data)
                            : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 报单操作请求响应
 */
void CtpTd::OnRspOrderAction(CThostFtdcInputOrderActionField *data,
                             CThostFtdcRspInfoField *error, int request_id,
                             bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_ORDER_ACTION,
      shared_ptr<void>(data ? new CThostFtdcInputOrderActionField(*data)
                            : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 查询最大报单数量响应
 */
void CtpTd::OnRspQueryMaxOrderVolume(CThostFtdcQueryMaxOrderVolumeField *data,
                                     CThostFtdcRspInfoField *error,
                                     int request_id, bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_QUERY_MAX_ORDER_VOLUME,
      shared_ptr<void>(data ? new CThostFtdcQueryMaxOrderVolumeField(*data)
                            : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 投资者结算结果确认响应
 */
void CtpTd::OnRspSettlementInfoConfirm(
    CThostFtdcSettlementInfoConfirmField *data, CThostFtdcRspInfoField *error,
    int request_id, bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_SETTLEMENT_INFO_CONFIRM,
      shared_ptr<void>(data ? new CThostFtdcSettlementInfoConfirmField(*data)
                            : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 删除预埋单响应
 */
void CtpTd::OnRspRemoveParkedOrder(CThostFtdcRemoveParkedOrderField *data,
                                   CThostFtdcRspInfoField *error,
                                   int request_id, bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_REMOVE_PARKED_ORDER,
      shared_ptr<void>(data ? new CThostFtdcRemoveParkedOrderField(*data)
                            : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 删除预埋撤单响应
 */
void CtpTd::OnRspRemoveParkedOrderAction(
    CThostFtdcRemoveParkedOrderActionField *data, CThostFtdcRspInfoField *error,
    int request_id, bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_REMOVE_PARKED_ORDER_ACTION,
      shared_ptr<void>(data ? new CThostFtdcRemoveParkedOrderActionField(*data)
                            : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 执行宣告录入请求响应
 */
void CtpTd::OnRspExecOrderInsert(CThostFtdcInputExecOrderField *data,
                                 CThostFtdcRspInfoField *error, int request_id,
                                 bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_EXEC_ORDER_INSERT,
      shared_ptr<void>(data ? new CThostFtdcInputExecOrderField(*data) : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 执行宣告操作请求响应
 */
void CtpTd::OnRspExecOrderAction(CThostFtdcInputExecOrderActionField *data,
                                 CThostFtdcRspInfoField *error, int request_id,
                                 bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_EXEC_ORDER_ACTION,
      shared_ptr<void>(data ? new CThostFtdcInputExecOrderActionField(*data)
                            : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 询价录入请求响应
 */
void CtpTd::OnRspForQuoteInsert(CThostFtdcInputForQuoteField *data,
                                CThostFtdcRspInfoField *error, int request_id,
                                bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_FOR_QUOTE_INSERT,
      shared_ptr<void>(data ? new CThostFtdcInputForQuoteField(*data) : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 报价录入请求响应
 */
void CtpTd::OnRspQuoteInsert(CThostFtdcInputQuoteField *data,
                             CThostFtdcRspInfoField *error, int request_id,
                             bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_QUOTE_INSERT,
      shared_ptr<void>(data ? new CThostFtdcInputQuoteField(*data) : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 报价操作请求响应
 */
void CtpTd::OnRspQuoteAction(CThostFtdcInputQuoteActionField *data,
                             CThostFtdcRspInfoField *error, int request_id,
                             bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_QUOTE_ACTION,
      shared_ptr<void>(data ? new CThostFtdcInputQuoteActionField(*data)
                            : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 锁定应答
 */
void CtpTd::OnRspLockInsert(CThostFtdcInputLockField *data,
                            CThostFtdcRspInfoField *error, int request_id,
                            bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_LOCK_INSERT,
      shared_ptr<void>(data ? new CThostFtdcInputLockField(*data) : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 批量报单操作请求响应
 */
void CtpTd::OnRspBatchOrderAction(CThostFtdcInputBatchOrderActionField *data,
                                  CThostFtdcRspInfoField *error, int request_id,
                                  bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_BATCH_ORDER_ACTION,
      shared_ptr<void>(data ? new CThostFtdcInputBatchOrderActionField(*data)
                            : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 申请组合录入请求响应
 */
void CtpTd::OnRspCombActionInsert(CThostFtdcInputCombActionField *data,
                                  CThostFtdcRspInfoField *error, int request_id,
                                  bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_COMB_ACTION_INSERT,
      shared_ptr<void>(data ? new CThostFtdcInputCombActionField(*data) : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 请求查询报单响应
 */
void CtpTd::OnRspQryOrder(CThostFtdcOrderField *data,
                          CThostFtdcRspInfoField *error, int request_id,
                          bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_QRY_ORDER,
      shared_ptr<void>(data ? new CThostFtdcOrderField(*data) : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 请求查询成交响应
 */
void CtpTd::OnRspQryTrade(CThostFtdcTradeField *data,
                          CThostFtdcRspInfoField *error, int request_id,
                          bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_QRY_TRADE,
      shared_ptr<void>(data ? new CThostFtdcTradeField(*data) : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 请求查询投资者持仓响应
 */
void CtpTd::OnRspQryInvestorPosition(CThostFtdcInvestorPositionField *data,
                                     CThostFtdcRspInfoField *error,
                                     int request_id, bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_QRY_INVESTOR_POSITION,
      shared_ptr<void>(data ? new CThostFtdcInvestorPositionField(*data)
                            : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 请求查询资金账户响应
 */
void CtpTd::OnRspQryTradingAccount(CThostFtdcTradingAccountField *data,
                                   CThostFtdcRspInfoField *error,
                                   int request_id, bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_QRY_TRADING_ACCOUNT,
      shared_ptr<void>(data ? new CThostFtdcTradingAccountField(*data) : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 请求查询投资者响应
 */
void CtpTd::OnRspQryInvestor(CThostFtdcInvestorField *data,
                             CThostFtdcRspInfoField *error, int request_id,
                             bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_QRY_INVESTOR,
      shared_ptr<void>(data ? new CThostFtdcInvestorField(*data) : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 请求查询交易编码响应
 */
void CtpTd::OnRspQryTradingCode(CThostFtdcTradingCodeField *data,
                                CThostFtdcRspInfoField *error, int request_id,
                                bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_QRY_TRADING_CODE,
      shared_ptr<void>(data ? new CThostFtdcTradingCodeField(*data) : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 请求查询合约保证金率响应
 */
void CtpTd::OnRspQryInstrumentMarginRate(
    CThostFtdcInstrumentMarginRateField *data, CThostFtdcRspInfoField *error,
    int request_id, bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_QRY_INSTRUMENT_MARGIN_RATE,
      shared_ptr<void>(data ? new CThostFtdcInstrumentMarginRateField(*data)
                            : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 请求查询合约手续费率响应
 */
void CtpTd::OnRspQryInstrumentCommissionRate(
    CThostFtdcInstrumentCommissionRateField *data,
    CThostFtdcRspInfoField *error, int request_id, bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_QRY_INSTRUMENT_COMMISSION_RATE,
      shared_ptr<void>(data ? new CThostFtdcInstrumentCommissionRateField(*data)
                            : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 请求查询交易所响应
 */
void CtpTd::OnRspQryExchange(CThostFtdcExchangeField *data,
                             CThostFtdcRspInfoField *error, int request_id,
                             bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_QRY_EXCHANGE,
      shared_ptr<void>(data ? new CThostFtdcExchangeField(*data) : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 请求查询产品响应
 */
void CtpTd::OnRspQryProduct(CThostFtdcProductField *data,
                            CThostFtdcRspInfoField *error, int request_id,
                            bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_QRY_PRODUCT,
      shared_ptr<void>(data ? new CThostFtdcProductField(*data) : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 请求查询合约响应
 */
void CtpTd::OnRspQryInstrument(CThostFtdcInstrumentField *data,
                               CThostFtdcRspInfoField *error, int request_id,
                               bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_QRY_INSTRUMENT,
      shared_ptr<void>(data ? new CThostFtdcInstrumentField(*data) : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 请求查询行情响应
 */
void CtpTd::OnRspQryDepthMarketData(CThostFtdcDepthMarketDataField *data,
                                    CThostFtdcRspInfoField *error,
                                    int request_id, bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_QRY_DEPTH_MARKET_DATA,
      shared_ptr<void>(data ? new CThostFtdcDepthMarketDataField(*data) : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 请求查询投资者结算结果响应
 */
void CtpTd::OnRspQrySettlementInfo(CThostFtdcSettlementInfoField *data,
                                   CThostFtdcRspInfoField *error,
                                   int request_id, bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_QRY_SETTLEMENT_INFO,
      shared_ptr<void>(data ? new CThostFtdcSettlementInfoField(*data) : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 请求查询转帐银行响应
 */
void CtpTd::OnRspQryTransferBank(CThostFtdcTransferBankField *data,
                                 CThostFtdcRspInfoField *error, int request_id,
                                 bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_QRY_TRANSFER_BANK,
      shared_ptr<void>(data ? new CThostFtdcTransferBankField(*data) : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 请求查询投资者持仓明细响应
 */
void CtpTd::OnRspQryInvestorPositionDetail(
    CThostFtdcInvestorPositionDetailField *data, CThostFtdcRspInfoField *error,
    int request_id, bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_QRY_INVESTOR_POSITION_DETAIL,
      shared_ptr<void>(data ? new CThostFtdcInvestorPositionDetailField(*data)
                            : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 请求查询客户通知响应
 */
void CtpTd::OnRspQryNotice(CThostFtdcNoticeField *data,
                           CThostFtdcRspInfoField *error, int request_id,
                           bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_QRY_NOTICE,
      shared_ptr<void>(data ? new CThostFtdcNoticeField(*data) : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 请求查询结算信息确认响应
 */
void CtpTd::OnRspQrySettlementInfoConfirm(
    CThostFtdcSettlementInfoConfirmField *data, CThostFtdcRspInfoField *error,
    int request_id, bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_QRY_SETTLEMENT_INFO_CONFIRM,
      shared_ptr<void>(data ? new CThostFtdcSettlementInfoConfirmField(*data)
                            : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 请求查询投资者持仓明细响应
 */
void CtpTd::OnRspQryInvestorPositionCombineDetail(
    CThostFtdcInvestorPositionCombineDetailField *data,
    CThostFtdcRspInfoField *error, int request_id, bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_QRY_INVESTOR_POSITION_COMBINE_DETAIL,
      shared_ptr<void>(
          data ? new CThostFtdcInvestorPositionCombineDetailField(*data)
               : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 查询保证金监管系统经纪公司资金账户密钥响应
 */
void CtpTd::OnRspQryCFMMCTradingAccountKey(
    CThostFtdcCFMMCTradingAccountKeyField *data, CThostFtdcRspInfoField *error,
    int request_id, bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_QRY_CFMMCTRADING_ACCOUNT_KEY,
      shared_ptr<void>(data ? new CThostFtdcCFMMCTradingAccountKeyField(*data)
                            : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 请求查询仓单折抵信息响应
 */
void CtpTd::OnRspQryEWarrantOffset(CThostFtdcEWarrantOffsetField *data,
                                   CThostFtdcRspInfoField *error,
                                   int request_id, bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_QRY_EWARRANT_OFFSET,
      shared_ptr<void>(data ? new CThostFtdcEWarrantOffsetField(*data) : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 请求查询投资者品种/跨品种保证金响应
 */
void CtpTd::OnRspQryInvestorProductGroupMargin(
    CThostFtdcInvestorProductGroupMarginField *data,
    CThostFtdcRspInfoField *error, int request_id, bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_QRY_INVESTOR_PRODUCT_GROUP_MARGIN,
      shared_ptr<void>(
          data ? new CThostFtdcInvestorProductGroupMarginField(*data) : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 请求查询交易所保证金率响应
 */
void CtpTd::OnRspQryExchangeMarginRate(CThostFtdcExchangeMarginRateField *data,
                                       CThostFtdcRspInfoField *error,
                                       int request_id, bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_QRY_EXCHANGE_MARGIN_RATE,
      shared_ptr<void>(data ? new CThostFtdcExchangeMarginRateField(*data)
                            : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 请求查询交易所调整保证金率响应
 */
void CtpTd::OnRspQryExchangeMarginRateAdjust(
    CThostFtdcExchangeMarginRateAdjustField *data,
    CThostFtdcRspInfoField *error, int request_id, bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_QRY_EXCHANGE_MARGIN_RATE_ADJUST,
      shared_ptr<void>(data ? new CThostFtdcExchangeMarginRateAdjustField(*data)
                            : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 请求查询汇率响应
 */
void CtpTd::OnRspQryExchangeRate(CThostFtdcExchangeRateField *data,
                                 CThostFtdcRspInfoField *error, int request_id,
                                 bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_QRY_EXCHANGE_RATE,
      shared_ptr<void>(data ? new CThostFtdcExchangeRateField(*data) : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 请求查询二级代理操作员银期权限响应
 */
void CtpTd::OnRspQrySecAgentACIDMap(CThostFtdcSecAgentACIDMapField *data,
                                    CThostFtdcRspInfoField *error,
                                    int request_id, bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_QRY_SEC_AGENT_ACIDMAP,
      shared_ptr<void>(data ? new CThostFtdcSecAgentACIDMapField(*data) : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 请求查询产品报价汇率
 */
void CtpTd::OnRspQryProductExchRate(CThostFtdcProductExchRateField *data,
                                    CThostFtdcRspInfoField *error,
                                    int request_id, bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_QRY_PRODUCT_EXCH_RATE,
      shared_ptr<void>(data ? new CThostFtdcProductExchRateField(*data) : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 请求查询产品组
 */
void CtpTd::OnRspQryProductGroup(CThostFtdcProductGroupField *data,
                                 CThostFtdcRspInfoField *error, int request_id,
                                 bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_QRY_PRODUCT_GROUP,
      shared_ptr<void>(data ? new CThostFtdcProductGroupField(*data) : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 请求查询做市商合约手续费率响应
 */
void CtpTd::OnRspQryMMInstrumentCommissionRate(
    CThostFtdcMMInstrumentCommissionRateField *data,
    CThostFtdcRspInfoField *error, int request_id, bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_QRY_MMINSTRUMENT_COMMISSION_RATE,
      shared_ptr<void>(
          data ? new CThostFtdcMMInstrumentCommissionRateField(*data) : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 请求查询做市商期权合约手续费响应
 */
void CtpTd::OnRspQryMMOptionInstrCommRate(
    CThostFtdcMMOptionInstrCommRateField *data, CThostFtdcRspInfoField *error,
    int request_id, bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_QRY_MMOPTION_INSTR_COMM_RATE,
      shared_ptr<void>(data ? new CThostFtdcMMOptionInstrCommRateField(*data)
                            : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 请求查询报单手续费响应
 */
void CtpTd::OnRspQryInstrumentOrderCommRate(
    CThostFtdcInstrumentOrderCommRateField *data, CThostFtdcRspInfoField *error,
    int request_id, bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_QRY_INSTRUMENT_ORDER_COMM_RATE,
      shared_ptr<void>(data ? new CThostFtdcInstrumentOrderCommRateField(*data)
                            : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 请求查询期权交易成本响应
 */
void CtpTd::OnRspQryOptionInstrTradeCost(
    CThostFtdcOptionInstrTradeCostField *data, CThostFtdcRspInfoField *error,
    int request_id, bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_QRY_OPTION_INSTR_TRADE_COST,
      shared_ptr<void>(data ? new CThostFtdcOptionInstrTradeCostField(*data)
                            : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 请求查询期权合约手续费响应
 */
void CtpTd::OnRspQryOptionInstrCommRate(
    CThostFtdcOptionInstrCommRateField *data, CThostFtdcRspInfoField *error,
    int request_id, bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_QRY_OPTION_INSTR_COMM_RATE,
      shared_ptr<void>(data ? new CThostFtdcOptionInstrCommRateField(*data)
                            : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 请求查询执行宣告响应
 */
void CtpTd::OnRspQryExecOrder(CThostFtdcExecOrderField *data,
                              CThostFtdcRspInfoField *error, int request_id,
                              bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_QRY_EXEC_ORDER,
      shared_ptr<void>(data ? new CThostFtdcExecOrderField(*data) : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 请求查询询价响应
 */
void CtpTd::OnRspQryForQuote(CThostFtdcForQuoteField *data,
                             CThostFtdcRspInfoField *error, int request_id,
                             bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_QRY_FOR_QUOTE,
      shared_ptr<void>(data ? new CThostFtdcForQuoteField(*data) : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 请求查询报价响应
 */
void CtpTd::OnRspQryQuote(CThostFtdcQuoteField *data,
                          CThostFtdcRspInfoField *error, int request_id,
                          bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_QRY_QUOTE,
      shared_ptr<void>(data ? new CThostFtdcQuoteField(*data) : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 请求查询锁定应答
 */
void CtpTd::OnRspQryLock(CThostFtdcLockField *data,
                         CThostFtdcRspInfoField *error, int request_id,
                         bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_QRY_LOCK,
      shared_ptr<void>(data ? new CThostFtdcLockField(*data) : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 请求查询锁定证券仓位应答
 */
void CtpTd::OnRspQryLockPosition(CThostFtdcLockPositionField *data,
                                 CThostFtdcRspInfoField *error, int request_id,
                                 bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_QRY_LOCK_POSITION,
      shared_ptr<void>(data ? new CThostFtdcLockPositionField(*data) : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 请求查询ETF期权合约手续费响应
 */
void CtpTd::OnRspQryETFOptionInstrCommRate(
    CThostFtdcETFOptionInstrCommRateField *data, CThostFtdcRspInfoField *error,
    int request_id, bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_QRY_ETFOPTION_INSTR_COMM_RATE,
      shared_ptr<void>(data ? new CThostFtdcETFOptionInstrCommRateField(*data)
                            : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 请求查询投资者分级
 */
void CtpTd::OnRspQryInvestorLevel(CThostFtdcInvestorLevelField *data,
                                  CThostFtdcRspInfoField *error, int request_id,
                                  bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_QRY_INVESTOR_LEVEL,
      shared_ptr<void>(data ? new CThostFtdcInvestorLevelField(*data) : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 请求查询E+1日行权冻结响应
 */
void CtpTd::OnRspQryExecFreeze(CThostFtdcExecFreezeField *data,
                               CThostFtdcRspInfoField *error, int request_id,
                               bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_QRY_EXEC_FREEZE,
      shared_ptr<void>(data ? new CThostFtdcExecFreezeField(*data) : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 请求查询组合合约安全系数响应
 */
void CtpTd::OnRspQryCombInstrumentGuard(
    CThostFtdcCombInstrumentGuardField *data, CThostFtdcRspInfoField *error,
    int request_id, bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_QRY_COMB_INSTRUMENT_GUARD,
      shared_ptr<void>(data ? new CThostFtdcCombInstrumentGuardField(*data)
                            : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 请求查询申请组合响应
 */
void CtpTd::OnRspQryCombAction(CThostFtdcCombActionField *data,
                               CThostFtdcRspInfoField *error, int request_id,
                               bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_QRY_COMB_ACTION,
      shared_ptr<void>(data ? new CThostFtdcCombActionField(*data) : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 请求查询转帐流水响应
 */
void CtpTd::OnRspQryTransferSerial(CThostFtdcTransferSerialField *data,
                                   CThostFtdcRspInfoField *error,
                                   int request_id, bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_QRY_TRANSFER_SERIAL,
      shared_ptr<void>(data ? new CThostFtdcTransferSerialField(*data) : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 请求查询银期签约关系响应
 */
void CtpTd::OnRspQryAccountregister(CThostFtdcAccountregisterField *data,
                                    CThostFtdcRspInfoField *error,
                                    int request_id, bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_QRY_ACCOUNTREGISTER,
      shared_ptr<void>(data ? new CThostFtdcAccountregisterField(*data) : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 错误应答
 */
void CtpTd::OnRspError(CThostFtdcRspInfoField *error, int request_id,
                       bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_ERROR,
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 报单通知
 */
void CtpTd::OnRtnOrder(CThostFtdcOrderField *data) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RTN_ORDER,
      shared_ptr<void>(data ? new CThostFtdcOrderField(*data) : NULL)));
}

/**
 * 成交通知
 */
void CtpTd::OnRtnTrade(CThostFtdcTradeField *data) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RTN_TRADE,
      shared_ptr<void>(data ? new CThostFtdcTradeField(*data) : NULL)));
}

/**
 * 报单录入错误回报
 */
void CtpTd::OnErrRtnOrderInsert(CThostFtdcInputOrderField *data,
                                CThostFtdcRspInfoField *error) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_ERR_RTN_ORDER_INSERT,
      shared_ptr<void>(data ? new CThostFtdcInputOrderField(*data) : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL)));
}

/**
 * 报单操作错误回报
 */
void CtpTd::OnErrRtnOrderAction(CThostFtdcOrderActionField *data,
                                CThostFtdcRspInfoField *error) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_ERR_RTN_ORDER_ACTION,
      shared_ptr<void>(data ? new CThostFtdcOrderActionField(*data) : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL)));
}

/**
 * 合约交易状态通知
 */
void CtpTd::OnRtnInstrumentStatus(CThostFtdcInstrumentStatusField *data) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RTN_INSTRUMENT_STATUS,
      shared_ptr<void>(data ? new CThostFtdcInstrumentStatusField(*data)
                            : NULL)));
}

/**
 * 交易所公告通知
 */
void CtpTd::OnRtnBulletin(CThostFtdcBulletinField *data) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RTN_BULLETIN,
      shared_ptr<void>(data ? new CThostFtdcBulletinField(*data) : NULL)));
}

/**
 * 交易通知
 */
void CtpTd::OnRtnTradingNotice(CThostFtdcTradingNoticeInfoField *data) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RTN_TRADING_NOTICE,
      shared_ptr<void>(data ? new CThostFtdcTradingNoticeInfoField(*data)
                            : NULL)));
}

/**
 * 提示条件单校验错误
 */
void CtpTd::OnRtnErrorConditionalOrder(
    CThostFtdcErrorConditionalOrderField *data) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RTN_ERROR_CONDITIONAL_ORDER,
      shared_ptr<void>(data ? new CThostFtdcErrorConditionalOrderField(*data)
                            : NULL)));
}

/**
 * 执行宣告通知
 */
void CtpTd::OnRtnExecOrder(CThostFtdcExecOrderField *data) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RTN_EXEC_ORDER,
      shared_ptr<void>(data ? new CThostFtdcExecOrderField(*data) : NULL)));
}

/**
 * 执行宣告录入错误回报
 */
void CtpTd::OnErrRtnExecOrderInsert(CThostFtdcInputExecOrderField *data,
                                    CThostFtdcRspInfoField *error) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_ERR_RTN_EXEC_ORDER_INSERT,
      shared_ptr<void>(data ? new CThostFtdcInputExecOrderField(*data) : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL)));
}

/**
 * 执行宣告操作错误回报
 */
void CtpTd::OnErrRtnExecOrderAction(CThostFtdcExecOrderActionField *data,
                                    CThostFtdcRspInfoField *error) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_ERR_RTN_EXEC_ORDER_ACTION,
      shared_ptr<void>(data ? new CThostFtdcExecOrderActionField(*data) : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL)));
}

/**
 * 询价录入错误回报
 */
void CtpTd::OnErrRtnForQuoteInsert(CThostFtdcInputForQuoteField *data,
                                   CThostFtdcRspInfoField *error) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_ERR_RTN_FOR_QUOTE_INSERT,
      shared_ptr<void>(data ? new CThostFtdcInputForQuoteField(*data) : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL)));
}

/**
 * 报价通知
 */
void CtpTd::OnRtnQuote(CThostFtdcQuoteField *data) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RTN_QUOTE,
      shared_ptr<void>(data ? new CThostFtdcQuoteField(*data) : NULL)));
}

/**
 * 报价录入错误回报
 */
void CtpTd::OnErrRtnQuoteInsert(CThostFtdcInputQuoteField *data,
                                CThostFtdcRspInfoField *error) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_ERR_RTN_QUOTE_INSERT,
      shared_ptr<void>(data ? new CThostFtdcInputQuoteField(*data) : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL)));
}

/**
 * 报价操作错误回报
 */
void CtpTd::OnErrRtnQuoteAction(CThostFtdcQuoteActionField *data,
                                CThostFtdcRspInfoField *error) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_ERR_RTN_QUOTE_ACTION,
      shared_ptr<void>(data ? new CThostFtdcQuoteActionField(*data) : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL)));
}

/**
 * 询价通知
 */
void CtpTd::OnRtnForQuoteRsp(CThostFtdcForQuoteRspField *data) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RTN_FOR_QUOTE_RSP,
      shared_ptr<void>(data ? new CThostFtdcForQuoteRspField(*data) : NULL)));
}

/**
 * 保证金监控中心用户令牌
 */
void CtpTd::OnRtnCFMMCTradingAccountToken(
    CThostFtdcCFMMCTradingAccountTokenField *data) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RTN_CFMMCTRADING_ACCOUNT_TOKEN,
      shared_ptr<void>(data ? new CThostFtdcCFMMCTradingAccountTokenField(*data)
                            : NULL)));
}

/**
 * 锁定通知
 */
void CtpTd::OnRtnLock(CThostFtdcLockField *data) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RTN_LOCK,
      shared_ptr<void>(data ? new CThostFtdcLockField(*data) : NULL)));
}

/**
 * 锁定错误通知
 */
void CtpTd::OnErrRtnLockInsert(CThostFtdcInputLockField *data,
                               CThostFtdcRspInfoField *error) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_ERR_RTN_LOCK_INSERT,
      shared_ptr<void>(data ? new CThostFtdcInputLockField(*data) : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL)));
}

/**
 * 批量报单操作错误回报
 */
void CtpTd::OnErrRtnBatchOrderAction(CThostFtdcBatchOrderActionField *data,
                                     CThostFtdcRspInfoField *error) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_ERR_RTN_BATCH_ORDER_ACTION,
      shared_ptr<void>(data ? new CThostFtdcBatchOrderActionField(*data)
                            : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL)));
}

/**
 * 申请组合通知
 */
void CtpTd::OnRtnCombAction(CThostFtdcCombActionField *data) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RTN_COMB_ACTION,
      shared_ptr<void>(data ? new CThostFtdcCombActionField(*data) : NULL)));
}

/**
 * 申请组合录入错误回报
 */
void CtpTd::OnErrRtnCombActionInsert(CThostFtdcInputCombActionField *data,
                                     CThostFtdcRspInfoField *error) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_ERR_RTN_COMB_ACTION_INSERT,
      shared_ptr<void>(data ? new CThostFtdcInputCombActionField(*data) : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL)));
}

/**
 * 请求查询签约银行响应
 */
void CtpTd::OnRspQryContractBank(CThostFtdcContractBankField *data,
                                 CThostFtdcRspInfoField *error, int request_id,
                                 bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_QRY_CONTRACT_BANK,
      shared_ptr<void>(data ? new CThostFtdcContractBankField(*data) : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 请求查询预埋单响应
 */
void CtpTd::OnRspQryParkedOrder(CThostFtdcParkedOrderField *data,
                                CThostFtdcRspInfoField *error, int request_id,
                                bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_QRY_PARKED_ORDER,
      shared_ptr<void>(data ? new CThostFtdcParkedOrderField(*data) : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 请求查询预埋撤单响应
 */
void CtpTd::OnRspQryParkedOrderAction(CThostFtdcParkedOrderActionField *data,
                                      CThostFtdcRspInfoField *error,
                                      int request_id, bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_QRY_PARKED_ORDER_ACTION,
      shared_ptr<void>(data ? new CThostFtdcParkedOrderActionField(*data)
                            : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 请求查询交易通知响应
 */
void CtpTd::OnRspQryTradingNotice(CThostFtdcTradingNoticeField *data,
                                  CThostFtdcRspInfoField *error, int request_id,
                                  bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_QRY_TRADING_NOTICE,
      shared_ptr<void>(data ? new CThostFtdcTradingNoticeField(*data) : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 请求查询经纪公司交易参数响应
 */
void CtpTd::OnRspQryBrokerTradingParams(
    CThostFtdcBrokerTradingParamsField *data, CThostFtdcRspInfoField *error,
    int request_id, bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_QRY_BROKER_TRADING_PARAMS,
      shared_ptr<void>(data ? new CThostFtdcBrokerTradingParamsField(*data)
                            : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 请求查询经纪公司交易算法响应
 */
void CtpTd::OnRspQryBrokerTradingAlgos(CThostFtdcBrokerTradingAlgosField *data,
                                       CThostFtdcRspInfoField *error,
                                       int request_id, bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_QRY_BROKER_TRADING_ALGOS,
      shared_ptr<void>(data ? new CThostFtdcBrokerTradingAlgosField(*data)
                            : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 请求查询监控中心用户令牌
 */
void CtpTd::OnRspQueryCFMMCTradingAccountToken(
    CThostFtdcQueryCFMMCTradingAccountTokenField *data,
    CThostFtdcRspInfoField *error, int request_id, bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_QUERY_CFMMCTRADING_ACCOUNT_TOKEN,
      shared_ptr<void>(
          data ? new CThostFtdcQueryCFMMCTradingAccountTokenField(*data)
               : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 银行发起银行资金转期货通知
 */
void CtpTd::OnRtnFromBankToFutureByBank(CThostFtdcRspTransferField *data) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RTN_FROM_BANK_TO_FUTURE_BY_BANK,
      shared_ptr<void>(data ? new CThostFtdcRspTransferField(*data) : NULL)));
}

/**
 * 银行发起期货资金转银行通知
 */
void CtpTd::OnRtnFromFutureToBankByBank(CThostFtdcRspTransferField *data) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RTN_FROM_FUTURE_TO_BANK_BY_BANK,
      shared_ptr<void>(data ? new CThostFtdcRspTransferField(*data) : NULL)));
}

/**
 * 银行发起冲正银行转期货通知
 */
void CtpTd::OnRtnRepealFromBankToFutureByBank(CThostFtdcRspRepealField *data) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_BANK,
      shared_ptr<void>(data ? new CThostFtdcRspRepealField(*data) : NULL)));
}

/**
 * 银行发起冲正期货转银行通知
 */
void CtpTd::OnRtnRepealFromFutureToBankByBank(CThostFtdcRspRepealField *data) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_BANK,
      shared_ptr<void>(data ? new CThostFtdcRspRepealField(*data) : NULL)));
}

/**
 * 期货发起银行资金转期货通知
 */
void CtpTd::OnRtnFromBankToFutureByFuture(CThostFtdcRspTransferField *data) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RTN_FROM_BANK_TO_FUTURE_BY_FUTURE,
      shared_ptr<void>(data ? new CThostFtdcRspTransferField(*data) : NULL)));
}

/**
 * 期货发起期货资金转银行通知
 */
void CtpTd::OnRtnFromFutureToBankByFuture(CThostFtdcRspTransferField *data) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RTN_FROM_FUTURE_TO_BANK_BY_FUTURE,
      shared_ptr<void>(data ? new CThostFtdcRspTransferField(*data) : NULL)));
}

/**
 * 系统运行时期货端手工发起冲正银行转期货请求, 银行处理完毕后报盘发回的通知
 */
void CtpTd::OnRtnRepealFromBankToFutureByFutureManual(
    CThostFtdcRspRepealField *data) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE_MANUAL,
      shared_ptr<void>(data ? new CThostFtdcRspRepealField(*data) : NULL)));
}

/**
 * 系统运行时期货端手工发起冲正期货转银行请求, 银行处理完毕后报盘发回的通知
 */
void CtpTd::OnRtnRepealFromFutureToBankByFutureManual(
    CThostFtdcRspRepealField *data) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE_MANUAL,
      shared_ptr<void>(data ? new CThostFtdcRspRepealField(*data) : NULL)));
}

/**
 * 期货发起查询银行余额通知
 */
void CtpTd::OnRtnQueryBankBalanceByFuture(
    CThostFtdcNotifyQueryAccountField *data) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RTN_QUERY_BANK_BALANCE_BY_FUTURE,
      shared_ptr<void>(data ? new CThostFtdcNotifyQueryAccountField(*data)
                            : NULL)));
}

/**
 * 期货发起银行资金转期货错误回报
 */
void CtpTd::OnErrRtnBankToFutureByFuture(CThostFtdcReqTransferField *data,
                                         CThostFtdcRspInfoField *error) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_ERR_RTN_BANK_TO_FUTURE_BY_FUTURE,
      shared_ptr<void>(data ? new CThostFtdcReqTransferField(*data) : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL)));
}

/**
 * 期货发起期货资金转银行错误回报
 */
void CtpTd::OnErrRtnFutureToBankByFuture(CThostFtdcReqTransferField *data,
                                         CThostFtdcRspInfoField *error) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_ERR_RTN_FUTURE_TO_BANK_BY_FUTURE,
      shared_ptr<void>(data ? new CThostFtdcReqTransferField(*data) : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL)));
}

/**
 * 系统运行时期货端手工发起冲正银行转期货错误回报
 */
void CtpTd::OnErrRtnRepealBankToFutureByFutureManual(
    CThostFtdcReqRepealField *data, CThostFtdcRspInfoField *error) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_ERR_RTN_REPEAL_BANK_TO_FUTURE_BY_FUTURE_MANUAL,
      shared_ptr<void>(data ? new CThostFtdcReqRepealField(*data) : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL)));
}

/**
 * 系统运行时期货端手工发起冲正期货转银行错误回报
 */
void CtpTd::OnErrRtnRepealFutureToBankByFutureManual(
    CThostFtdcReqRepealField *data, CThostFtdcRspInfoField *error) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_ERR_RTN_REPEAL_FUTURE_TO_BANK_BY_FUTURE_MANUAL,
      shared_ptr<void>(data ? new CThostFtdcReqRepealField(*data) : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL)));
}

/**
 * 期货发起查询银行余额错误回报
 */
void CtpTd::OnErrRtnQueryBankBalanceByFuture(
    CThostFtdcReqQueryAccountField *data, CThostFtdcRspInfoField *error) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_ERR_RTN_QUERY_BANK_BALANCE_BY_FUTURE,
      shared_ptr<void>(data ? new CThostFtdcReqQueryAccountField(*data) : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL)));
}

/**
 * 期货发起冲正银行转期货请求, 银行处理完毕后报盘发回的通知
 */
void CtpTd::OnRtnRepealFromBankToFutureByFuture(
    CThostFtdcRspRepealField *data) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE,
      shared_ptr<void>(data ? new CThostFtdcRspRepealField(*data) : NULL)));
}

/**
 * 期货发起冲正期货转银行请求, 银行处理完毕后报盘发回的通知
 */
void CtpTd::OnRtnRepealFromFutureToBankByFuture(
    CThostFtdcRspRepealField *data) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE,
      shared_ptr<void>(data ? new CThostFtdcRspRepealField(*data) : NULL)));
}

/**
 * 期货发起银行资金转期货应答
 */
void CtpTd::OnRspFromBankToFutureByFuture(CThostFtdcReqTransferField *data,
                                          CThostFtdcRspInfoField *error,
                                          int request_id, bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_FROM_BANK_TO_FUTURE_BY_FUTURE,
      shared_ptr<void>(data ? new CThostFtdcReqTransferField(*data) : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 期货发起期货资金转银行应答
 */
void CtpTd::OnRspFromFutureToBankByFuture(CThostFtdcReqTransferField *data,
                                          CThostFtdcRspInfoField *error,
                                          int request_id, bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_FROM_FUTURE_TO_BANK_BY_FUTURE,
      shared_ptr<void>(data ? new CThostFtdcReqTransferField(*data) : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 期货发起查询银行余额应答
 */
void CtpTd::OnRspQueryBankAccountMoneyByFuture(
    CThostFtdcReqQueryAccountField *data, CThostFtdcRspInfoField *error,
    int request_id, bool last) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RSP_QUERY_BANK_ACCOUNT_MONEY_BY_FUTURE,
      shared_ptr<void>(data ? new CThostFtdcReqQueryAccountField(*data) : NULL),
      shared_ptr<void>(error ? new CThostFtdcRspInfoField(*error) : NULL),
      request_id, last));
}

/**
 * 银行发起银期开户通知
 */
void CtpTd::OnRtnOpenAccountByBank(CThostFtdcOpenAccountField *data) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RTN_OPEN_ACCOUNT_BY_BANK,
      shared_ptr<void>(data ? new CThostFtdcOpenAccountField(*data) : NULL)));
}

/**
 * 银行发起银期销户通知
 */
void CtpTd::OnRtnCancelAccountByBank(CThostFtdcCancelAccountField *data) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RTN_CANCEL_ACCOUNT_BY_BANK,
      shared_ptr<void>(data ? new CThostFtdcCancelAccountField(*data) : NULL)));
}

/**
 * 银行发起变更银行账号通知
 */
void CtpTd::OnRtnChangeAccountByBank(CThostFtdcChangeAccountField *data) {
  ResponseAsyncSend(new ResponseBaton(
      EV_ON_RTN_CHANGE_ACCOUNT_BY_BANK,
      shared_ptr<void>(data ? new CThostFtdcChangeAccountField(*data) : NULL)));
}

/* ---------------------------------------------------------------------------
 * 异步相关
 * ---------------------------------------------------------------------------
 */

/**
 * Node层注册SPI事件回调
 */
void CtpTd::On(const FunctionCallbackInfo<Value> &args) {
  Isolate *isolate = args.GetIsolate();

  if (!args[0]->IsString() || !args[1]->IsFunction()) {
    isolate->ThrowException(
        Exception::TypeError(String::NewFromUtf8(isolate, "Wrong arguments")));
    return;
  }

  CtpTd *that = ObjectWrap::Unwrap<CtpTd>(args.Holder());
  String::Utf8Value ev(args[0]);
  Local<Function> cb = Local<Function>::Cast(args[1]);

  unordered_map<string, int>::iterator eIt = event_map_.find(*ev);
  if (eIt == event_map_.end()) {
    isolate->ThrowException(
        Exception::Error(String::NewFromUtf8(isolate, "Unknown event")));
    return;
  }

/* C++层每个事件只保存一个Node层回调函数, 如果事件已经注册则直接覆盖 */
#if 0
  unordered_map<int, Persistent<Function>>::iterator cIt =
      that->callback_map_.find(eIt->second);
  if (cIt != that->callback_map_.end()) {
    isolate->ThrowException(
        Exception::Error(String::NewFromUtf8(isolate, "Duplicate event")));
    return;
  }
#endif

  that->callback_map_[eIt->second].Reset(isolate, cb);
}

/**
 * API请求异步执行时调用
 */
void CtpTd::RequestAsync(uv_work_t *work) {
  RequestBaton *baton = static_cast<RequestBaton *>(work->data);
  CtpTd *that = static_cast<CtpTd *>(baton->that);

  switch (baton->ev) {
    case EV_CREATE_FTDC_TRADER_API: {
      string *flow_path = static_cast<string *>(baton->data.get());
      that->api_ = CThostFtdcTraderApi::CreateFtdcTraderApi(flow_path->c_str());
      that->api_->RegisterSpi(that);
      break;
    }
    case EV_GET_API_VERSION: {
      baton->ret.s = shared_ptr<void>(new string(that->api_->GetApiVersion()));
      break;
    }
    case EV_RELEASE: {
      /* 未用 */
      break;
    }
    case EV_INIT: {
      that->api_->Init();
      break;
    }
    case EV_JOIN: {
      /* 未用 */
      break;
    }
    case EV_GET_TRADING_DAY: {
      baton->ret.s = shared_ptr<void>(new string(that->api_->GetTradingDay()));
      break;
    }
    case EV_REGISTER_FRONT: {
      string *addr = static_cast<string *>(baton->data.get());
      that->api_->RegisterFront(const_cast<char *>(addr->c_str()));
      break;
    }
    case EV_REGISTER_NAME_SERVER: {
      string *addr = static_cast<string *>(baton->data.get());
      that->api_->RegisterNameServer(const_cast<char *>(addr->c_str()));
      break;
    }
    case EV_REGISTER_FENS_USER_INFO: {
      CThostFtdcFensUserInfoField *data =
          static_cast<CThostFtdcFensUserInfoField *>(baton->data.get());
      that->api_->RegisterFensUserInfo(data);
      break;
    }
    case EV_REGISTER_SPI: {
      /* 未用 */
      break;
    }
    case EV_SUBSCRIBE_PRIVATE_TOPIC: {
      int *resume_type = static_cast<int *>(baton->data.get());
      that->api_->SubscribePrivateTopic(
          static_cast<THOST_TE_RESUME_TYPE>(*resume_type));
      break;
    }
    case EV_SUBSCRIBE_PUBLIC_TOPIC: {
      int *resume_type = static_cast<int *>(baton->data.get());
      that->api_->SubscribePublicTopic(
          static_cast<THOST_TE_RESUME_TYPE>(*resume_type));
      break;
    }
    case EV_REQ_AUTHENTICATE: {
      CThostFtdcReqAuthenticateField *data =
          static_cast<CThostFtdcReqAuthenticateField *>(baton->data.get());
      baton->ret.n = that->api_->ReqAuthenticate(data, baton->request_id);
      break;
    }
    case EV_REQ_USER_LOGIN: {
      CThostFtdcReqUserLoginField *data =
          static_cast<CThostFtdcReqUserLoginField *>(baton->data.get());
      baton->ret.n = that->api_->ReqUserLogin(data, baton->request_id);
      break;
    }
    case EV_REQ_USER_LOGOUT: {
      CThostFtdcUserLogoutField *data =
          static_cast<CThostFtdcUserLogoutField *>(baton->data.get());
      baton->ret.n = that->api_->ReqUserLogout(data, baton->request_id);
      break;
    }
    case EV_REQ_USER_PASSWORD_UPDATE: {
      CThostFtdcUserPasswordUpdateField *data =
          static_cast<CThostFtdcUserPasswordUpdateField *>(baton->data.get());
      baton->ret.n = that->api_->ReqUserPasswordUpdate(data, baton->request_id);
      break;
    }
    case EV_REQ_TRADING_ACCOUNT_PASSWORD_UPDATE: {
      CThostFtdcTradingAccountPasswordUpdateField *data =
          static_cast<CThostFtdcTradingAccountPasswordUpdateField *>(
              baton->data.get());
      baton->ret.n =
          that->api_->ReqTradingAccountPasswordUpdate(data, baton->request_id);
      break;
    }
    case EV_REQ_ORDER_INSERT: {
      CThostFtdcInputOrderField *data =
          static_cast<CThostFtdcInputOrderField *>(baton->data.get());
      baton->ret.n = that->api_->ReqOrderInsert(data, baton->request_id);
      break;
    }
    case EV_REQ_PARKED_ORDER_INSERT: {
      CThostFtdcParkedOrderField *data =
          static_cast<CThostFtdcParkedOrderField *>(baton->data.get());
      baton->ret.n = that->api_->ReqParkedOrderInsert(data, baton->request_id);
      break;
    }
    case EV_REQ_PARKED_ORDER_ACTION: {
      CThostFtdcParkedOrderActionField *data =
          static_cast<CThostFtdcParkedOrderActionField *>(baton->data.get());
      baton->ret.n = that->api_->ReqParkedOrderAction(data, baton->request_id);
      break;
    }
    case EV_REQ_ORDER_ACTION: {
      CThostFtdcInputOrderActionField *data =
          static_cast<CThostFtdcInputOrderActionField *>(baton->data.get());
      baton->ret.n = that->api_->ReqOrderAction(data, baton->request_id);
      break;
    }
    case EV_REQ_QUERY_MAX_ORDER_VOLUME: {
      CThostFtdcQueryMaxOrderVolumeField *data =
          static_cast<CThostFtdcQueryMaxOrderVolumeField *>(baton->data.get());
      baton->ret.n =
          that->api_->ReqQueryMaxOrderVolume(data, baton->request_id);
      break;
    }
    case EV_REQ_SETTLEMENT_INFO_CONFIRM: {
      CThostFtdcSettlementInfoConfirmField *data =
          static_cast<CThostFtdcSettlementInfoConfirmField *>(
              baton->data.get());
      baton->ret.n =
          that->api_->ReqSettlementInfoConfirm(data, baton->request_id);
      break;
    }
    case EV_REQ_REMOVE_PARKED_ORDER: {
      CThostFtdcRemoveParkedOrderField *data =
          static_cast<CThostFtdcRemoveParkedOrderField *>(baton->data.get());
      baton->ret.n = that->api_->ReqRemoveParkedOrder(data, baton->request_id);
      break;
    }
    case EV_REQ_REMOVE_PARKED_ORDER_ACTION: {
      CThostFtdcRemoveParkedOrderActionField *data =
          static_cast<CThostFtdcRemoveParkedOrderActionField *>(
              baton->data.get());
      baton->ret.n =
          that->api_->ReqRemoveParkedOrderAction(data, baton->request_id);
      break;
    }
    case EV_REQ_EXEC_ORDER_INSERT: {
      CThostFtdcInputExecOrderField *data =
          static_cast<CThostFtdcInputExecOrderField *>(baton->data.get());
      baton->ret.n = that->api_->ReqExecOrderInsert(data, baton->request_id);
      break;
    }
    case EV_REQ_EXEC_ORDER_ACTION: {
      CThostFtdcInputExecOrderActionField *data =
          static_cast<CThostFtdcInputExecOrderActionField *>(baton->data.get());
      baton->ret.n = that->api_->ReqExecOrderAction(data, baton->request_id);
      break;
    }
    case EV_REQ_FOR_QUOTE_INSERT: {
      CThostFtdcInputForQuoteField *data =
          static_cast<CThostFtdcInputForQuoteField *>(baton->data.get());
      baton->ret.n = that->api_->ReqForQuoteInsert(data, baton->request_id);
      break;
    }
    case EV_REQ_QUOTE_INSERT: {
      CThostFtdcInputQuoteField *data =
          static_cast<CThostFtdcInputQuoteField *>(baton->data.get());
      baton->ret.n = that->api_->ReqQuoteInsert(data, baton->request_id);
      break;
    }
    case EV_REQ_QUOTE_ACTION: {
      CThostFtdcInputQuoteActionField *data =
          static_cast<CThostFtdcInputQuoteActionField *>(baton->data.get());
      baton->ret.n = that->api_->ReqQuoteAction(data, baton->request_id);
      break;
    }
    case EV_REQ_LOCK_INSERT: {
      CThostFtdcInputLockField *data =
          static_cast<CThostFtdcInputLockField *>(baton->data.get());
      baton->ret.n = that->api_->ReqLockInsert(data, baton->request_id);
      break;
    }
    case EV_REQ_BATCH_ORDER_ACTION: {
      CThostFtdcInputBatchOrderActionField *data =
          static_cast<CThostFtdcInputBatchOrderActionField *>(
              baton->data.get());
      baton->ret.n = that->api_->ReqBatchOrderAction(data, baton->request_id);
      break;
    }
    case EV_REQ_COMB_ACTION_INSERT: {
      CThostFtdcInputCombActionField *data =
          static_cast<CThostFtdcInputCombActionField *>(baton->data.get());
      baton->ret.n = that->api_->ReqCombActionInsert(data, baton->request_id);
      break;
    }
    case EV_REQ_QRY_ORDER: {
      CThostFtdcQryOrderField *data =
          static_cast<CThostFtdcQryOrderField *>(baton->data.get());
      baton->ret.n = that->api_->ReqQryOrder(data, baton->request_id);
      break;
    }
    case EV_REQ_QRY_TRADE: {
      CThostFtdcQryTradeField *data =
          static_cast<CThostFtdcQryTradeField *>(baton->data.get());
      baton->ret.n = that->api_->ReqQryTrade(data, baton->request_id);
      break;
    }
    case EV_REQ_QRY_INVESTOR_POSITION: {
      CThostFtdcQryInvestorPositionField *data =
          static_cast<CThostFtdcQryInvestorPositionField *>(baton->data.get());
      baton->ret.n =
          that->api_->ReqQryInvestorPosition(data, baton->request_id);
      break;
    }
    case EV_REQ_QRY_TRADING_ACCOUNT: {
      CThostFtdcQryTradingAccountField *data =
          static_cast<CThostFtdcQryTradingAccountField *>(baton->data.get());
      baton->ret.n = that->api_->ReqQryTradingAccount(data, baton->request_id);
      break;
    }
    case EV_REQ_QRY_INVESTOR: {
      CThostFtdcQryInvestorField *data =
          static_cast<CThostFtdcQryInvestorField *>(baton->data.get());
      baton->ret.n = that->api_->ReqQryInvestor(data, baton->request_id);
      break;
    }
    case EV_REQ_QRY_TRADING_CODE: {
      CThostFtdcQryTradingCodeField *data =
          static_cast<CThostFtdcQryTradingCodeField *>(baton->data.get());
      baton->ret.n = that->api_->ReqQryTradingCode(data, baton->request_id);
      break;
    }
    case EV_REQ_QRY_INSTRUMENT_MARGIN_RATE: {
      CThostFtdcQryInstrumentMarginRateField *data =
          static_cast<CThostFtdcQryInstrumentMarginRateField *>(
              baton->data.get());
      baton->ret.n =
          that->api_->ReqQryInstrumentMarginRate(data, baton->request_id);
      break;
    }
    case EV_REQ_QRY_INSTRUMENT_COMMISSION_RATE: {
      CThostFtdcQryInstrumentCommissionRateField *data =
          static_cast<CThostFtdcQryInstrumentCommissionRateField *>(
              baton->data.get());
      baton->ret.n =
          that->api_->ReqQryInstrumentCommissionRate(data, baton->request_id);
      break;
    }
    case EV_REQ_QRY_EXCHANGE: {
      CThostFtdcQryExchangeField *data =
          static_cast<CThostFtdcQryExchangeField *>(baton->data.get());
      baton->ret.n = that->api_->ReqQryExchange(data, baton->request_id);
      break;
    }
    case EV_REQ_QRY_PRODUCT: {
      CThostFtdcQryProductField *data =
          static_cast<CThostFtdcQryProductField *>(baton->data.get());
      baton->ret.n = that->api_->ReqQryProduct(data, baton->request_id);
      break;
    }
    case EV_REQ_QRY_INSTRUMENT: {
      CThostFtdcQryInstrumentField *data =
          static_cast<CThostFtdcQryInstrumentField *>(baton->data.get());
      baton->ret.n = that->api_->ReqQryInstrument(data, baton->request_id);
      break;
    }
    case EV_REQ_QRY_DEPTH_MARKET_DATA: {
      CThostFtdcQryDepthMarketDataField *data =
          static_cast<CThostFtdcQryDepthMarketDataField *>(baton->data.get());
      baton->ret.n = that->api_->ReqQryDepthMarketData(data, baton->request_id);
      break;
    }
    case EV_REQ_QRY_SETTLEMENT_INFO: {
      CThostFtdcQrySettlementInfoField *data =
          static_cast<CThostFtdcQrySettlementInfoField *>(baton->data.get());
      baton->ret.n = that->api_->ReqQrySettlementInfo(data, baton->request_id);
      break;
    }
    case EV_REQ_QRY_TRANSFER_BANK: {
      CThostFtdcQryTransferBankField *data =
          static_cast<CThostFtdcQryTransferBankField *>(baton->data.get());
      baton->ret.n = that->api_->ReqQryTransferBank(data, baton->request_id);
      break;
    }
    case EV_REQ_QRY_INVESTOR_POSITION_DETAIL: {
      CThostFtdcQryInvestorPositionDetailField *data =
          static_cast<CThostFtdcQryInvestorPositionDetailField *>(
              baton->data.get());
      baton->ret.n =
          that->api_->ReqQryInvestorPositionDetail(data, baton->request_id);
      break;
    }
    case EV_REQ_QRY_NOTICE: {
      CThostFtdcQryNoticeField *data =
          static_cast<CThostFtdcQryNoticeField *>(baton->data.get());
      baton->ret.n = that->api_->ReqQryNotice(data, baton->request_id);
      break;
    }
    case EV_REQ_QRY_SETTLEMENT_INFO_CONFIRM: {
      CThostFtdcQrySettlementInfoConfirmField *data =
          static_cast<CThostFtdcQrySettlementInfoConfirmField *>(
              baton->data.get());
      baton->ret.n =
          that->api_->ReqQrySettlementInfoConfirm(data, baton->request_id);
      break;
    }
    case EV_REQ_QRY_INVESTOR_POSITION_COMBINE_DETAIL: {
      CThostFtdcQryInvestorPositionCombineDetailField *data =
          static_cast<CThostFtdcQryInvestorPositionCombineDetailField *>(
              baton->data.get());
      baton->ret.n = that->api_->ReqQryInvestorPositionCombineDetail(
          data, baton->request_id);
      break;
    }
    case EV_REQ_QRY_CFMMCTRADING_ACCOUNT_KEY: {
      CThostFtdcQryCFMMCTradingAccountKeyField *data =
          static_cast<CThostFtdcQryCFMMCTradingAccountKeyField *>(
              baton->data.get());
      baton->ret.n =
          that->api_->ReqQryCFMMCTradingAccountKey(data, baton->request_id);
      break;
    }
    case EV_REQ_QRY_EWARRANT_OFFSET: {
      CThostFtdcQryEWarrantOffsetField *data =
          static_cast<CThostFtdcQryEWarrantOffsetField *>(baton->data.get());
      baton->ret.n = that->api_->ReqQryEWarrantOffset(data, baton->request_id);
      break;
    }
    case EV_REQ_QRY_INVESTOR_PRODUCT_GROUP_MARGIN: {
      CThostFtdcQryInvestorProductGroupMarginField *data =
          static_cast<CThostFtdcQryInvestorProductGroupMarginField *>(
              baton->data.get());
      baton->ret.n =
          that->api_->ReqQryInvestorProductGroupMargin(data, baton->request_id);
      break;
    }
    case EV_REQ_QRY_EXCHANGE_MARGIN_RATE: {
      CThostFtdcQryExchangeMarginRateField *data =
          static_cast<CThostFtdcQryExchangeMarginRateField *>(
              baton->data.get());
      baton->ret.n =
          that->api_->ReqQryExchangeMarginRate(data, baton->request_id);
      break;
    }
    case EV_REQ_QRY_EXCHANGE_MARGIN_RATE_ADJUST: {
      CThostFtdcQryExchangeMarginRateAdjustField *data =
          static_cast<CThostFtdcQryExchangeMarginRateAdjustField *>(
              baton->data.get());
      baton->ret.n =
          that->api_->ReqQryExchangeMarginRateAdjust(data, baton->request_id);
      break;
    }
    case EV_REQ_QRY_EXCHANGE_RATE: {
      CThostFtdcQryExchangeRateField *data =
          static_cast<CThostFtdcQryExchangeRateField *>(baton->data.get());
      baton->ret.n = that->api_->ReqQryExchangeRate(data, baton->request_id);
      break;
    }
    case EV_REQ_QRY_SEC_AGENT_ACIDMAP: {
      CThostFtdcQrySecAgentACIDMapField *data =
          static_cast<CThostFtdcQrySecAgentACIDMapField *>(baton->data.get());
      baton->ret.n = that->api_->ReqQrySecAgentACIDMap(data, baton->request_id);
      break;
    }
    case EV_REQ_QRY_PRODUCT_EXCH_RATE: {
      CThostFtdcQryProductExchRateField *data =
          static_cast<CThostFtdcQryProductExchRateField *>(baton->data.get());
      baton->ret.n = that->api_->ReqQryProductExchRate(data, baton->request_id);
      break;
    }
    case EV_REQ_QRY_PRODUCT_GROUP: {
      CThostFtdcQryProductGroupField *data =
          static_cast<CThostFtdcQryProductGroupField *>(baton->data.get());
      baton->ret.n = that->api_->ReqQryProductGroup(data, baton->request_id);
      break;
    }
    case EV_REQ_QRY_MMINSTRUMENT_COMMISSION_RATE: {
      CThostFtdcQryMMInstrumentCommissionRateField *data =
          static_cast<CThostFtdcQryMMInstrumentCommissionRateField *>(
              baton->data.get());
      baton->ret.n =
          that->api_->ReqQryMMInstrumentCommissionRate(data, baton->request_id);
      break;
    }
    case EV_REQ_QRY_MMOPTION_INSTR_COMM_RATE: {
      CThostFtdcQryMMOptionInstrCommRateField *data =
          static_cast<CThostFtdcQryMMOptionInstrCommRateField *>(
              baton->data.get());
      baton->ret.n =
          that->api_->ReqQryMMOptionInstrCommRate(data, baton->request_id);
      break;
    }
    case EV_REQ_QRY_INSTRUMENT_ORDER_COMM_RATE: {
      CThostFtdcQryInstrumentOrderCommRateField *data =
          static_cast<CThostFtdcQryInstrumentOrderCommRateField *>(
              baton->data.get());
      baton->ret.n =
          that->api_->ReqQryInstrumentOrderCommRate(data, baton->request_id);
      break;
    }
    case EV_REQ_QRY_OPTION_INSTR_TRADE_COST: {
      CThostFtdcQryOptionInstrTradeCostField *data =
          static_cast<CThostFtdcQryOptionInstrTradeCostField *>(
              baton->data.get());
      baton->ret.n =
          that->api_->ReqQryOptionInstrTradeCost(data, baton->request_id);
      break;
    }
    case EV_REQ_QRY_OPTION_INSTR_COMM_RATE: {
      CThostFtdcQryOptionInstrCommRateField *data =
          static_cast<CThostFtdcQryOptionInstrCommRateField *>(
              baton->data.get());
      baton->ret.n =
          that->api_->ReqQryOptionInstrCommRate(data, baton->request_id);
      break;
    }
    case EV_REQ_QRY_EXEC_ORDER: {
      CThostFtdcQryExecOrderField *data =
          static_cast<CThostFtdcQryExecOrderField *>(baton->data.get());
      baton->ret.n = that->api_->ReqQryExecOrder(data, baton->request_id);
      break;
    }
    case EV_REQ_QRY_FOR_QUOTE: {
      CThostFtdcQryForQuoteField *data =
          static_cast<CThostFtdcQryForQuoteField *>(baton->data.get());
      baton->ret.n = that->api_->ReqQryForQuote(data, baton->request_id);
      break;
    }
    case EV_REQ_QRY_QUOTE: {
      CThostFtdcQryQuoteField *data =
          static_cast<CThostFtdcQryQuoteField *>(baton->data.get());
      baton->ret.n = that->api_->ReqQryQuote(data, baton->request_id);
      break;
    }
    case EV_REQ_QRY_LOCK: {
      CThostFtdcQryLockField *data =
          static_cast<CThostFtdcQryLockField *>(baton->data.get());
      baton->ret.n = that->api_->ReqQryLock(data, baton->request_id);
      break;
    }
    case EV_REQ_QRY_LOCK_POSITION: {
      CThostFtdcQryLockPositionField *data =
          static_cast<CThostFtdcQryLockPositionField *>(baton->data.get());
      baton->ret.n = that->api_->ReqQryLockPosition(data, baton->request_id);
      break;
    }
    case EV_REQ_QRY_ETFOPTION_INSTR_COMM_RATE: {
      CThostFtdcQryETFOptionInstrCommRateField *data =
          static_cast<CThostFtdcQryETFOptionInstrCommRateField *>(
              baton->data.get());
      baton->ret.n =
          that->api_->ReqQryETFOptionInstrCommRate(data, baton->request_id);
      break;
    }
    case EV_REQ_QRY_INVESTOR_LEVEL: {
      CThostFtdcQryInvestorLevelField *data =
          static_cast<CThostFtdcQryInvestorLevelField *>(baton->data.get());
      baton->ret.n = that->api_->ReqQryInvestorLevel(data, baton->request_id);
      break;
    }
    case EV_REQ_QRY_EXEC_FREEZE: {
      CThostFtdcQryExecFreezeField *data =
          static_cast<CThostFtdcQryExecFreezeField *>(baton->data.get());
      baton->ret.n = that->api_->ReqQryExecFreeze(data, baton->request_id);
      break;
    }
    case EV_REQ_QRY_COMB_INSTRUMENT_GUARD: {
      CThostFtdcQryCombInstrumentGuardField *data =
          static_cast<CThostFtdcQryCombInstrumentGuardField *>(
              baton->data.get());
      baton->ret.n =
          that->api_->ReqQryCombInstrumentGuard(data, baton->request_id);
      break;
    }
    case EV_REQ_QRY_COMB_ACTION: {
      CThostFtdcQryCombActionField *data =
          static_cast<CThostFtdcQryCombActionField *>(baton->data.get());
      baton->ret.n = that->api_->ReqQryCombAction(data, baton->request_id);
      break;
    }
    case EV_REQ_QRY_TRANSFER_SERIAL: {
      CThostFtdcQryTransferSerialField *data =
          static_cast<CThostFtdcQryTransferSerialField *>(baton->data.get());
      baton->ret.n = that->api_->ReqQryTransferSerial(data, baton->request_id);
      break;
    }
    case EV_REQ_QRY_ACCOUNTREGISTER: {
      CThostFtdcQryAccountregisterField *data =
          static_cast<CThostFtdcQryAccountregisterField *>(baton->data.get());
      baton->ret.n = that->api_->ReqQryAccountregister(data, baton->request_id);
      break;
    }
    case EV_REQ_QRY_CONTRACT_BANK: {
      CThostFtdcQryContractBankField *data =
          static_cast<CThostFtdcQryContractBankField *>(baton->data.get());
      baton->ret.n = that->api_->ReqQryContractBank(data, baton->request_id);
      break;
    }
    case EV_REQ_QRY_PARKED_ORDER: {
      CThostFtdcQryParkedOrderField *data =
          static_cast<CThostFtdcQryParkedOrderField *>(baton->data.get());
      baton->ret.n = that->api_->ReqQryParkedOrder(data, baton->request_id);
      break;
    }
    case EV_REQ_QRY_PARKED_ORDER_ACTION: {
      CThostFtdcQryParkedOrderActionField *data =
          static_cast<CThostFtdcQryParkedOrderActionField *>(baton->data.get());
      baton->ret.n =
          that->api_->ReqQryParkedOrderAction(data, baton->request_id);
      break;
    }
    case EV_REQ_QRY_TRADING_NOTICE: {
      CThostFtdcQryTradingNoticeField *data =
          static_cast<CThostFtdcQryTradingNoticeField *>(baton->data.get());
      baton->ret.n = that->api_->ReqQryTradingNotice(data, baton->request_id);
      break;
    }
    case EV_REQ_QRY_BROKER_TRADING_PARAMS: {
      CThostFtdcQryBrokerTradingParamsField *data =
          static_cast<CThostFtdcQryBrokerTradingParamsField *>(
              baton->data.get());
      baton->ret.n =
          that->api_->ReqQryBrokerTradingParams(data, baton->request_id);
      break;
    }
    case EV_REQ_QRY_BROKER_TRADING_ALGOS: {
      CThostFtdcQryBrokerTradingAlgosField *data =
          static_cast<CThostFtdcQryBrokerTradingAlgosField *>(
              baton->data.get());
      baton->ret.n =
          that->api_->ReqQryBrokerTradingAlgos(data, baton->request_id);
      break;
    }
    case EV_REQ_QUERY_CFMMCTRADING_ACCOUNT_TOKEN: {
      CThostFtdcQueryCFMMCTradingAccountTokenField *data =
          static_cast<CThostFtdcQueryCFMMCTradingAccountTokenField *>(
              baton->data.get());
      baton->ret.n =
          that->api_->ReqQueryCFMMCTradingAccountToken(data, baton->request_id);
      break;
    }
    case EV_REQ_FROM_BANK_TO_FUTURE_BY_FUTURE: {
      CThostFtdcReqTransferField *data =
          static_cast<CThostFtdcReqTransferField *>(baton->data.get());
      baton->ret.n =
          that->api_->ReqFromBankToFutureByFuture(data, baton->request_id);
      break;
    }
    case EV_REQ_FROM_FUTURE_TO_BANK_BY_FUTURE: {
      CThostFtdcReqTransferField *data =
          static_cast<CThostFtdcReqTransferField *>(baton->data.get());
      baton->ret.n =
          that->api_->ReqFromFutureToBankByFuture(data, baton->request_id);
      break;
    }
    case EV_REQ_QUERY_BANK_ACCOUNT_MONEY_BY_FUTURE: {
      CThostFtdcReqQueryAccountField *data =
          static_cast<CThostFtdcReqQueryAccountField *>(baton->data.get());
      baton->ret.n =
          that->api_->ReqQueryBankAccountMoneyByFuture(data, baton->request_id);
      break;
    }
    case EV_EXIT: {
      if (that->api_) {
        that->api_->RegisterSpi(NULL);
        that->api_->Release();
        that->api_ = NULL;
      }
      /* 释放Node默认循环的引用计数, 使其可以在没有其它事件时可以正常退出 */
      uv_unref(reinterpret_cast<uv_handle_t *>(&that->async_));
      break;
    }
    default: {
      baton->errmsg = "Unknown request event";
      break;
    }
  }
}

/**
 * API请求异步执行完成时调用
 */
void CtpTd::RequestAsyncAfter(uv_work_t *work, int status) {
  Isolate *isolate = Isolate::GetCurrent();
  HandleScope scope(isolate);
  Local<Object> ctx = isolate->GetCurrentContext()->Global();
  RequestBaton *baton = static_cast<RequestBaton *>(work->data);
  Local<Function> cb = Local<Function>::New(isolate, baton->callback);

  /* 如果异步执行时出现错误，则将Node层回调函数第一个参数置为对应错误信息 */
  if (!baton->errmsg.empty()) {
    Local<Value> argv[] = {
        Exception::Error(String::NewFromUtf8(isolate, baton->errmsg.c_str()))};
    MakeCallback(isolate, ctx, cb, 1, argv);
    return;
  }

  switch (baton->ev) {
    /* 以下事件无返回 */
    case EV_CREATE_FTDC_TRADER_API:
    case EV_RELEASE:
    case EV_INIT:
    case EV_JOIN:
    case EV_REGISTER_FRONT:
    case EV_REGISTER_NAME_SERVER:
    case EV_REGISTER_FENS_USER_INFO:
    case EV_REGISTER_SPI:
    case EV_SUBSCRIBE_PRIVATE_TOPIC:
    case EV_SUBSCRIBE_PUBLIC_TOPIC:
    case EV_EXIT: {
      MakeCallback(isolate, ctx, cb, 0, NULL);
      break;
    }

    /* 以下事件返回String */
    case EV_GET_API_VERSION:
    case EV_GET_TRADING_DAY: {
      string *ret = static_cast<string *>(baton->ret.s.get());
      Local<Value> argv[] = {Null(isolate),
                             String::NewFromUtf8(isolate, ret->c_str())};
      MakeCallback(isolate, ctx, cb, 2, argv);
      break;
    }

    /* 以下事件返回Number */
    case EV_REQ_AUTHENTICATE:
    case EV_REQ_USER_LOGIN:
    case EV_REQ_USER_LOGOUT:
    case EV_REQ_USER_PASSWORD_UPDATE:
    case EV_REQ_TRADING_ACCOUNT_PASSWORD_UPDATE:
    case EV_REQ_ORDER_INSERT:
    case EV_REQ_PARKED_ORDER_INSERT:
    case EV_REQ_PARKED_ORDER_ACTION:
    case EV_REQ_ORDER_ACTION:
    case EV_REQ_QUERY_MAX_ORDER_VOLUME:
    case EV_REQ_SETTLEMENT_INFO_CONFIRM:
    case EV_REQ_REMOVE_PARKED_ORDER:
    case EV_REQ_REMOVE_PARKED_ORDER_ACTION:
    case EV_REQ_EXEC_ORDER_INSERT:
    case EV_REQ_EXEC_ORDER_ACTION:
    case EV_REQ_FOR_QUOTE_INSERT:
    case EV_REQ_QUOTE_INSERT:
    case EV_REQ_QUOTE_ACTION:
    case EV_REQ_LOCK_INSERT:
    case EV_REQ_BATCH_ORDER_ACTION:
    case EV_REQ_COMB_ACTION_INSERT:
    case EV_REQ_QRY_ORDER:
    case EV_REQ_QRY_TRADE:
    case EV_REQ_QRY_INVESTOR_POSITION:
    case EV_REQ_QRY_TRADING_ACCOUNT:
    case EV_REQ_QRY_INVESTOR:
    case EV_REQ_QRY_TRADING_CODE:
    case EV_REQ_QRY_INSTRUMENT_MARGIN_RATE:
    case EV_REQ_QRY_INSTRUMENT_COMMISSION_RATE:
    case EV_REQ_QRY_EXCHANGE:
    case EV_REQ_QRY_PRODUCT:
    case EV_REQ_QRY_INSTRUMENT:
    case EV_REQ_QRY_DEPTH_MARKET_DATA:
    case EV_REQ_QRY_SETTLEMENT_INFO:
    case EV_REQ_QRY_TRANSFER_BANK:
    case EV_REQ_QRY_INVESTOR_POSITION_DETAIL:
    case EV_REQ_QRY_NOTICE:
    case EV_REQ_QRY_SETTLEMENT_INFO_CONFIRM:
    case EV_REQ_QRY_INVESTOR_POSITION_COMBINE_DETAIL:
    case EV_REQ_QRY_CFMMCTRADING_ACCOUNT_KEY:
    case EV_REQ_QRY_EWARRANT_OFFSET:
    case EV_REQ_QRY_INVESTOR_PRODUCT_GROUP_MARGIN:
    case EV_REQ_QRY_EXCHANGE_MARGIN_RATE:
    case EV_REQ_QRY_EXCHANGE_MARGIN_RATE_ADJUST:
    case EV_REQ_QRY_EXCHANGE_RATE:
    case EV_REQ_QRY_SEC_AGENT_ACIDMAP:
    case EV_REQ_QRY_PRODUCT_EXCH_RATE:
    case EV_REQ_QRY_PRODUCT_GROUP:
    case EV_REQ_QRY_MMINSTRUMENT_COMMISSION_RATE:
    case EV_REQ_QRY_MMOPTION_INSTR_COMM_RATE:
    case EV_REQ_QRY_INSTRUMENT_ORDER_COMM_RATE:
    case EV_REQ_QRY_OPTION_INSTR_TRADE_COST:
    case EV_REQ_QRY_OPTION_INSTR_COMM_RATE:
    case EV_REQ_QRY_EXEC_ORDER:
    case EV_REQ_QRY_FOR_QUOTE:
    case EV_REQ_QRY_QUOTE:
    case EV_REQ_QRY_LOCK:
    case EV_REQ_QRY_LOCK_POSITION:
    case EV_REQ_QRY_ETFOPTION_INSTR_COMM_RATE:
    case EV_REQ_QRY_INVESTOR_LEVEL:
    case EV_REQ_QRY_EXEC_FREEZE:
    case EV_REQ_QRY_COMB_INSTRUMENT_GUARD:
    case EV_REQ_QRY_COMB_ACTION:
    case EV_REQ_QRY_TRANSFER_SERIAL:
    case EV_REQ_QRY_ACCOUNTREGISTER:
    case EV_REQ_QRY_CONTRACT_BANK:
    case EV_REQ_QRY_PARKED_ORDER:
    case EV_REQ_QRY_PARKED_ORDER_ACTION:
    case EV_REQ_QRY_TRADING_NOTICE:
    case EV_REQ_QRY_BROKER_TRADING_PARAMS:
    case EV_REQ_QRY_BROKER_TRADING_ALGOS:
    case EV_REQ_QUERY_CFMMCTRADING_ACCOUNT_TOKEN:
    case EV_REQ_FROM_BANK_TO_FUTURE_BY_FUTURE:
    case EV_REQ_FROM_FUTURE_TO_BANK_BY_FUTURE:
    case EV_REQ_QUERY_BANK_ACCOUNT_MONEY_BY_FUTURE: {
      Local<Value> argv[] = {Null(isolate), Number::New(isolate, baton->ret.n)};
      MakeCallback(isolate, ctx, cb, 2, argv);
      break;
    }
    default: { break; }
  }

  delete baton;
}

/**
 * 从其它线程向主线程中发送事件
 */
void CtpTd::ResponseAsyncSend(ResponseBaton *baton) {
  queue_.Push(baton);
  async_.data = this;
  uv_async_send(&async_);
}

/**
 * 主线程中SPI事件处理函数
 */
void CtpTd::ResponseAsyncAfter(uv_async_t *async) {
  Isolate *isolate = Isolate::GetCurrent();
  HandleScope scope(isolate);
  Local<Object> ctx = isolate->GetCurrentContext()->Global();
  CtpTd *that = static_cast<CtpTd *>(async->data);
  ResponseBaton *baton = NULL;

  while (that->queue_.TryPop(baton)) {
    /* 检测Node层是否注册了此事件的回调函数 */
    unordered_map<int, Persistent<Function>>::iterator it =
        that->callback_map_.find(baton->ev);
    if (it == that->callback_map_.end()) {
      return;
    }
    Local<Function> cb = Local<Function>::New(isolate, it->second);

    switch (baton->ev) {
      case EV_ON_FRONT_CONNECTED: {
        MakeCallback(isolate, ctx, cb, 0, NULL);
        break;
      }
      case EV_ON_FRONT_DISCONNECTED: {
        Local<Value> argv[] = {
            Number::New(isolate, *static_cast<int *>(baton->data.get()))};
        MakeCallback(isolate, ctx, cb, 1, argv);
        break;
      }
      case EV_ON_HEART_BEAT_WARNING: {
        Local<Value> argv[] = {
            Number::New(isolate, *static_cast<int *>(baton->data.get()))};
        MakeCallback(isolate, ctx, cb, 1, argv);
        break;
      }
      case EV_ON_RSP_AUTHENTICATE: {
        CThostFtdcRspAuthenticateField *data =
            static_cast<CThostFtdcRspAuthenticateField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 用户代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 用户端产品信息 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "UserProductInfo"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->UserProductInfo),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_USER_LOGIN: {
        CThostFtdcRspUserLoginField *data =
            static_cast<CThostFtdcRspUserLoginField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 交易日 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradingDay"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradingDay),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 登录成功时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "LoginTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->LoginTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 用户代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 交易系统名称 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "SystemName"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->SystemName),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 前置编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "FrontID"),
                        Number::New(isolate, data->FrontID));
          /* 会话编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SessionID"),
                        Number::New(isolate, data->SessionID));
          /* 最大报单引用 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "MaxOrderRef"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->MaxOrderRef),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 上期所时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "SHFETime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->SHFETime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 大商所时间 */
          obj_data->Set(String::NewFromUtf8(isolate, "DCETime"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->DCETime),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 郑商所时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CZCETime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CZCETime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 中金所时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "FFEXTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->FFEXTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 能源中心时间 */
          obj_data->Set(String::NewFromUtf8(isolate, "INETime"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->INETime),
                            NewStringType::kNormal)
                            .ToLocalChecked());
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_USER_LOGOUT: {
        CThostFtdcUserLogoutField *data =
            static_cast<CThostFtdcUserLogoutField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 用户代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_USER_PASSWORD_UPDATE: {
        CThostFtdcUserPasswordUpdateField *data =
            static_cast<CThostFtdcUserPasswordUpdateField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 用户代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 原来的口令 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "OldPassword"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->OldPassword),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 新的口令 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "NewPassword"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->NewPassword),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_TRADING_ACCOUNT_PASSWORD_UPDATE: {
        CThostFtdcTradingAccountPasswordUpdateField *data =
            static_cast<CThostFtdcTradingAccountPasswordUpdateField *>(
                baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "AccountID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->AccountID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 原来的口令 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "OldPassword"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->OldPassword),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 新的口令 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "NewPassword"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->NewPassword),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 币种代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CurrencyID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CurrencyID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_ORDER_INSERT: {
        CThostFtdcInputOrderField *data =
            static_cast<CThostFtdcInputOrderField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 合约代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InstrumentID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InstrumentID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 报单引用 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "OrderRef"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->OrderRef),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 用户代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 报单价格条件 */
          obj_data->Set(String::NewFromUtf8(isolate, "OrderPriceType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->OrderPriceType).c_str()));
          /* 买卖方向 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "Direction"),
              String::NewFromUtf8(isolate, string(1, data->Direction).c_str()));
          /* 组合开平标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CombOffsetFlag"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CombOffsetFlag),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 组合投机套保标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CombHedgeFlag"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CombHedgeFlag),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 价格 */
          obj_data->Set(String::NewFromUtf8(isolate, "LimitPrice"),
                        Number::New(isolate, data->LimitPrice));
          /* 数量 */
          obj_data->Set(String::NewFromUtf8(isolate, "VolumeTotalOriginal"),
                        Number::New(isolate, data->VolumeTotalOriginal));
          /* 有效期类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "TimeCondition"),
                        String::NewFromUtf8(
                            isolate, string(1, data->TimeCondition).c_str()));
          /* GTD日期 */
          obj_data->Set(String::NewFromUtf8(isolate, "GTDDate"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->GTDDate),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 成交量类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "VolumeCondition"),
                        String::NewFromUtf8(
                            isolate, string(1, data->VolumeCondition).c_str()));
          /* 最小成交量 */
          obj_data->Set(String::NewFromUtf8(isolate, "MinVolume"),
                        Number::New(isolate, data->MinVolume));
          /* 触发条件 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ContingentCondition"),
              String::NewFromUtf8(
                  isolate, string(1, data->ContingentCondition).c_str()));
          /* 止损价 */
          obj_data->Set(String::NewFromUtf8(isolate, "StopPrice"),
                        Number::New(isolate, data->StopPrice));
          /* 强平原因 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ForceCloseReason"),
              String::NewFromUtf8(isolate,
                                  string(1, data->ForceCloseReason).c_str()));
          /* 自动挂起标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "IsAutoSuspend"),
                        Number::New(isolate, data->IsAutoSuspend));
          /* 业务单元 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BusinessUnit"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BusinessUnit),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 请求编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "RequestID"),
                        Number::New(isolate, data->RequestID));
          /* 用户强评标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserForceClose"),
                        Number::New(isolate, data->UserForceClose));
          /* 互换单标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "IsSwapOrder"),
                        Number::New(isolate, data->IsSwapOrder));
          /* 交易所代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资单元代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestUnitID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestUnitID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 资金账号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "AccountID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->AccountID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 币种代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CurrencyID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CurrencyID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易编码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ClientID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ClientID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* IP地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "IPAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->IPAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* Mac地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "MacAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->MacAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_PARKED_ORDER_INSERT: {
        CThostFtdcParkedOrderField *data =
            static_cast<CThostFtdcParkedOrderField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 合约代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InstrumentID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InstrumentID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 报单引用 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "OrderRef"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->OrderRef),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 用户代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 报单价格条件 */
          obj_data->Set(String::NewFromUtf8(isolate, "OrderPriceType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->OrderPriceType).c_str()));
          /* 买卖方向 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "Direction"),
              String::NewFromUtf8(isolate, string(1, data->Direction).c_str()));
          /* 组合开平标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CombOffsetFlag"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CombOffsetFlag),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 组合投机套保标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CombHedgeFlag"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CombHedgeFlag),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 价格 */
          obj_data->Set(String::NewFromUtf8(isolate, "LimitPrice"),
                        Number::New(isolate, data->LimitPrice));
          /* 数量 */
          obj_data->Set(String::NewFromUtf8(isolate, "VolumeTotalOriginal"),
                        Number::New(isolate, data->VolumeTotalOriginal));
          /* 有效期类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "TimeCondition"),
                        String::NewFromUtf8(
                            isolate, string(1, data->TimeCondition).c_str()));
          /* GTD日期 */
          obj_data->Set(String::NewFromUtf8(isolate, "GTDDate"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->GTDDate),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 成交量类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "VolumeCondition"),
                        String::NewFromUtf8(
                            isolate, string(1, data->VolumeCondition).c_str()));
          /* 最小成交量 */
          obj_data->Set(String::NewFromUtf8(isolate, "MinVolume"),
                        Number::New(isolate, data->MinVolume));
          /* 触发条件 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ContingentCondition"),
              String::NewFromUtf8(
                  isolate, string(1, data->ContingentCondition).c_str()));
          /* 止损价 */
          obj_data->Set(String::NewFromUtf8(isolate, "StopPrice"),
                        Number::New(isolate, data->StopPrice));
          /* 强平原因 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ForceCloseReason"),
              String::NewFromUtf8(isolate,
                                  string(1, data->ForceCloseReason).c_str()));
          /* 自动挂起标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "IsAutoSuspend"),
                        Number::New(isolate, data->IsAutoSuspend));
          /* 业务单元 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BusinessUnit"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BusinessUnit),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 请求编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "RequestID"),
                        Number::New(isolate, data->RequestID));
          /* 用户强评标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserForceClose"),
                        Number::New(isolate, data->UserForceClose));
          /* 交易所代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 预埋报单编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ParkedOrderID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ParkedOrderID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 用户类型 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "UserType"),
              String::NewFromUtf8(isolate, string(1, data->UserType).c_str()));
          /* 预埋单状态 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "Status"),
              String::NewFromUtf8(isolate, string(1, data->Status).c_str()));
          /* 错误代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "ErrorID"),
                        Number::New(isolate, data->ErrorID));
          /* 错误信息 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 互换单标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "IsSwapOrder"),
                        Number::New(isolate, data->IsSwapOrder));
          /* 资金账号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "AccountID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->AccountID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 币种代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CurrencyID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CurrencyID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易编码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ClientID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ClientID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资单元代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestUnitID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestUnitID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* IP地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "IPAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->IPAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* Mac地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "MacAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->MacAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_PARKED_ORDER_ACTION: {
        CThostFtdcParkedOrderActionField *data =
            static_cast<CThostFtdcParkedOrderActionField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 报单操作引用 */
          obj_data->Set(String::NewFromUtf8(isolate, "OrderActionRef"),
                        Number::New(isolate, data->OrderActionRef));
          /* 报单引用 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "OrderRef"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->OrderRef),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 请求编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "RequestID"),
                        Number::New(isolate, data->RequestID));
          /* 前置编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "FrontID"),
                        Number::New(isolate, data->FrontID));
          /* 会话编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SessionID"),
                        Number::New(isolate, data->SessionID));
          /* 交易所代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 报单编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "OrderSysID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->OrderSysID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 操作标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "ActionFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->ActionFlag).c_str()));
          /* 价格 */
          obj_data->Set(String::NewFromUtf8(isolate, "LimitPrice"),
                        Number::New(isolate, data->LimitPrice));
          /* 数量变化 */
          obj_data->Set(String::NewFromUtf8(isolate, "VolumeChange"),
                        Number::New(isolate, data->VolumeChange));
          /* 用户代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 合约代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InstrumentID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InstrumentID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 预埋撤单单编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ParkedOrderActionID"),
              String::NewFromOneByte(isolate, reinterpret_cast<uint8_t *>(
                                                  data->ParkedOrderActionID),
                                     NewStringType::kNormal)
                  .ToLocalChecked());
          /* 用户类型 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "UserType"),
              String::NewFromUtf8(isolate, string(1, data->UserType).c_str()));
          /* 预埋撤单状态 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "Status"),
              String::NewFromUtf8(isolate, string(1, data->Status).c_str()));
          /* 错误代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "ErrorID"),
                        Number::New(isolate, data->ErrorID));
          /* 错误信息 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资单元代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestUnitID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestUnitID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* IP地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "IPAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->IPAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* Mac地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "MacAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->MacAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_ORDER_ACTION: {
        CThostFtdcInputOrderActionField *data =
            static_cast<CThostFtdcInputOrderActionField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 报单操作引用 */
          obj_data->Set(String::NewFromUtf8(isolate, "OrderActionRef"),
                        Number::New(isolate, data->OrderActionRef));
          /* 报单引用 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "OrderRef"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->OrderRef),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 请求编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "RequestID"),
                        Number::New(isolate, data->RequestID));
          /* 前置编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "FrontID"),
                        Number::New(isolate, data->FrontID));
          /* 会话编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SessionID"),
                        Number::New(isolate, data->SessionID));
          /* 交易所代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 报单编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "OrderSysID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->OrderSysID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 操作标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "ActionFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->ActionFlag).c_str()));
          /* 价格 */
          obj_data->Set(String::NewFromUtf8(isolate, "LimitPrice"),
                        Number::New(isolate, data->LimitPrice));
          /* 数量变化 */
          obj_data->Set(String::NewFromUtf8(isolate, "VolumeChange"),
                        Number::New(isolate, data->VolumeChange));
          /* 用户代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 合约代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InstrumentID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InstrumentID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资单元代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestUnitID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestUnitID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* IP地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "IPAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->IPAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* Mac地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "MacAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->MacAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_QUERY_MAX_ORDER_VOLUME: {
        CThostFtdcQueryMaxOrderVolumeField *data =
            static_cast<CThostFtdcQueryMaxOrderVolumeField *>(
                baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 合约代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InstrumentID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InstrumentID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 买卖方向 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "Direction"),
              String::NewFromUtf8(isolate, string(1, data->Direction).c_str()));
          /* 开平标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "OffsetFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->OffsetFlag).c_str()));
          /* 投机套保标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "HedgeFlag"),
              String::NewFromUtf8(isolate, string(1, data->HedgeFlag).c_str()));
          /* 最大允许报单数量 */
          obj_data->Set(String::NewFromUtf8(isolate, "MaxVolume"),
                        Number::New(isolate, data->MaxVolume));
          /* 交易所代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_SETTLEMENT_INFO_CONFIRM: {
        CThostFtdcSettlementInfoConfirmField *data =
            static_cast<CThostFtdcSettlementInfoConfirmField *>(
                baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 确认日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ConfirmDate"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ConfirmDate),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 确认时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ConfirmTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ConfirmTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_REMOVE_PARKED_ORDER: {
        CThostFtdcRemoveParkedOrderField *data =
            static_cast<CThostFtdcRemoveParkedOrderField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 预埋报单编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ParkedOrderID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ParkedOrderID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_REMOVE_PARKED_ORDER_ACTION: {
        CThostFtdcRemoveParkedOrderActionField *data =
            static_cast<CThostFtdcRemoveParkedOrderActionField *>(
                baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 预埋撤单编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ParkedOrderActionID"),
              String::NewFromOneByte(isolate, reinterpret_cast<uint8_t *>(
                                                  data->ParkedOrderActionID),
                                     NewStringType::kNormal)
                  .ToLocalChecked());
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_EXEC_ORDER_INSERT: {
        CThostFtdcInputExecOrderField *data =
            static_cast<CThostFtdcInputExecOrderField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 合约代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InstrumentID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InstrumentID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 执行宣告引用 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExecOrderRef"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExecOrderRef),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 用户代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 数量 */
          obj_data->Set(String::NewFromUtf8(isolate, "Volume"),
                        Number::New(isolate, data->Volume));
          /* 请求编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "RequestID"),
                        Number::New(isolate, data->RequestID));
          /* 业务单元 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BusinessUnit"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BusinessUnit),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 开平标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "OffsetFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->OffsetFlag).c_str()));
          /* 投机套保标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "HedgeFlag"),
              String::NewFromUtf8(isolate, string(1, data->HedgeFlag).c_str()));
          /* 执行类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "ActionType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->ActionType).c_str()));
          /* 保留头寸申请的持仓方向 */
          obj_data->Set(String::NewFromUtf8(isolate, "PosiDirection"),
                        String::NewFromUtf8(
                            isolate, string(1, data->PosiDirection).c_str()));
          /* 期权行权后是否保留期货头寸的标记 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ReservePositionFlag"),
              String::NewFromUtf8(
                  isolate, string(1, data->ReservePositionFlag).c_str()));
          /* 期权行权后生成的头寸是否自动平仓 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CloseFlag"),
              String::NewFromUtf8(isolate, string(1, data->CloseFlag).c_str()));
          /* 交易所代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资单元代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestUnitID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestUnitID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 资金账号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "AccountID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->AccountID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 币种代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CurrencyID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CurrencyID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易编码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ClientID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ClientID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* IP地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "IPAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->IPAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* Mac地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "MacAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->MacAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_EXEC_ORDER_ACTION: {
        CThostFtdcInputExecOrderActionField *data =
            static_cast<CThostFtdcInputExecOrderActionField *>(
                baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 执行宣告操作引用 */
          obj_data->Set(String::NewFromUtf8(isolate, "ExecOrderActionRef"),
                        Number::New(isolate, data->ExecOrderActionRef));
          /* 执行宣告引用 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExecOrderRef"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExecOrderRef),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 请求编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "RequestID"),
                        Number::New(isolate, data->RequestID));
          /* 前置编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "FrontID"),
                        Number::New(isolate, data->FrontID));
          /* 会话编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SessionID"),
                        Number::New(isolate, data->SessionID));
          /* 交易所代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 执行宣告操作编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExecOrderSysID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExecOrderSysID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 操作标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "ActionFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->ActionFlag).c_str()));
          /* 用户代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 合约代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InstrumentID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InstrumentID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资单元代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestUnitID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestUnitID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* IP地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "IPAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->IPAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* Mac地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "MacAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->MacAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_FOR_QUOTE_INSERT: {
        CThostFtdcInputForQuoteField *data =
            static_cast<CThostFtdcInputForQuoteField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 合约代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InstrumentID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InstrumentID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 询价引用 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ForQuoteRef"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ForQuoteRef),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 用户代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 交易所代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资单元代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestUnitID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestUnitID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* IP地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "IPAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->IPAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* Mac地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "MacAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->MacAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_QUOTE_INSERT: {
        CThostFtdcInputQuoteField *data =
            static_cast<CThostFtdcInputQuoteField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 合约代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InstrumentID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InstrumentID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 报价引用 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "QuoteRef"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->QuoteRef),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 用户代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 卖价格 */
          obj_data->Set(String::NewFromUtf8(isolate, "AskPrice"),
                        Number::New(isolate, data->AskPrice));
          /* 买价格 */
          obj_data->Set(String::NewFromUtf8(isolate, "BidPrice"),
                        Number::New(isolate, data->BidPrice));
          /* 卖数量 */
          obj_data->Set(String::NewFromUtf8(isolate, "AskVolume"),
                        Number::New(isolate, data->AskVolume));
          /* 买数量 */
          obj_data->Set(String::NewFromUtf8(isolate, "BidVolume"),
                        Number::New(isolate, data->BidVolume));
          /* 请求编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "RequestID"),
                        Number::New(isolate, data->RequestID));
          /* 业务单元 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BusinessUnit"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BusinessUnit),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 卖开平标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "AskOffsetFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->AskOffsetFlag).c_str()));
          /* 买开平标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "BidOffsetFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BidOffsetFlag).c_str()));
          /* 卖投机套保标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "AskHedgeFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->AskHedgeFlag).c_str()));
          /* 买投机套保标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "BidHedgeFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BidHedgeFlag).c_str()));
          /* 衍生卖报单引用 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "AskOrderRef"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->AskOrderRef),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 衍生买报单引用 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BidOrderRef"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BidOrderRef),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 应价编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ForQuoteSysID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ForQuoteSysID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易所代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资单元代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestUnitID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestUnitID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易编码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ClientID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ClientID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* IP地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "IPAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->IPAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* Mac地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "MacAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->MacAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_QUOTE_ACTION: {
        CThostFtdcInputQuoteActionField *data =
            static_cast<CThostFtdcInputQuoteActionField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 报价操作引用 */
          obj_data->Set(String::NewFromUtf8(isolate, "QuoteActionRef"),
                        Number::New(isolate, data->QuoteActionRef));
          /* 报价引用 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "QuoteRef"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->QuoteRef),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 请求编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "RequestID"),
                        Number::New(isolate, data->RequestID));
          /* 前置编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "FrontID"),
                        Number::New(isolate, data->FrontID));
          /* 会话编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SessionID"),
                        Number::New(isolate, data->SessionID));
          /* 交易所代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 报价操作编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "QuoteSysID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->QuoteSysID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 操作标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "ActionFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->ActionFlag).c_str()));
          /* 用户代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 合约代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InstrumentID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InstrumentID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资单元代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestUnitID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestUnitID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易编码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ClientID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ClientID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* IP地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "IPAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->IPAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* Mac地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "MacAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->MacAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_LOCK_INSERT: {
        CThostFtdcInputLockField *data =
            static_cast<CThostFtdcInputLockField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 合约代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InstrumentID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InstrumentID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 锁定引用 */
          obj_data->Set(String::NewFromUtf8(isolate, "LockRef"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->LockRef),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 用户代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 数量 */
          obj_data->Set(String::NewFromUtf8(isolate, "Volume"),
                        Number::New(isolate, data->Volume));
          /* 请求编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "RequestID"),
                        Number::New(isolate, data->RequestID));
          /* 业务单元 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BusinessUnit"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BusinessUnit),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 锁定类型 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "LockType"),
              String::NewFromUtf8(isolate, string(1, data->LockType).c_str()));
          /* 交易所代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* IP地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "IPAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->IPAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* Mac地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "MacAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->MacAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_BATCH_ORDER_ACTION: {
        CThostFtdcInputBatchOrderActionField *data =
            static_cast<CThostFtdcInputBatchOrderActionField *>(
                baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 报单操作引用 */
          obj_data->Set(String::NewFromUtf8(isolate, "OrderActionRef"),
                        Number::New(isolate, data->OrderActionRef));
          /* 请求编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "RequestID"),
                        Number::New(isolate, data->RequestID));
          /* 前置编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "FrontID"),
                        Number::New(isolate, data->FrontID));
          /* 会话编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SessionID"),
                        Number::New(isolate, data->SessionID));
          /* 交易所代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 用户代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 投资单元代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestUnitID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestUnitID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* IP地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "IPAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->IPAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* Mac地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "MacAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->MacAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_COMB_ACTION_INSERT: {
        CThostFtdcInputCombActionField *data =
            static_cast<CThostFtdcInputCombActionField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 合约代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InstrumentID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InstrumentID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 组合引用 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CombActionRef"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CombActionRef),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 用户代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 买卖方向 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "Direction"),
              String::NewFromUtf8(isolate, string(1, data->Direction).c_str()));
          /* 数量 */
          obj_data->Set(String::NewFromUtf8(isolate, "Volume"),
                        Number::New(isolate, data->Volume));
          /* 组合指令方向 */
          obj_data->Set(String::NewFromUtf8(isolate, "CombDirection"),
                        String::NewFromUtf8(
                            isolate, string(1, data->CombDirection).c_str()));
          /* 投机套保标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "HedgeFlag"),
              String::NewFromUtf8(isolate, string(1, data->HedgeFlag).c_str()));
          /* 交易所代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* IP地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "IPAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->IPAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* Mac地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "MacAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->MacAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_QRY_ORDER: {
        CThostFtdcOrderField *data =
            static_cast<CThostFtdcOrderField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 合约代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InstrumentID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InstrumentID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 报单引用 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "OrderRef"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->OrderRef),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 用户代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 报单价格条件 */
          obj_data->Set(String::NewFromUtf8(isolate, "OrderPriceType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->OrderPriceType).c_str()));
          /* 买卖方向 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "Direction"),
              String::NewFromUtf8(isolate, string(1, data->Direction).c_str()));
          /* 组合开平标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CombOffsetFlag"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CombOffsetFlag),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 组合投机套保标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CombHedgeFlag"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CombHedgeFlag),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 价格 */
          obj_data->Set(String::NewFromUtf8(isolate, "LimitPrice"),
                        Number::New(isolate, data->LimitPrice));
          /* 数量 */
          obj_data->Set(String::NewFromUtf8(isolate, "VolumeTotalOriginal"),
                        Number::New(isolate, data->VolumeTotalOriginal));
          /* 有效期类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "TimeCondition"),
                        String::NewFromUtf8(
                            isolate, string(1, data->TimeCondition).c_str()));
          /* GTD日期 */
          obj_data->Set(String::NewFromUtf8(isolate, "GTDDate"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->GTDDate),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 成交量类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "VolumeCondition"),
                        String::NewFromUtf8(
                            isolate, string(1, data->VolumeCondition).c_str()));
          /* 最小成交量 */
          obj_data->Set(String::NewFromUtf8(isolate, "MinVolume"),
                        Number::New(isolate, data->MinVolume));
          /* 触发条件 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ContingentCondition"),
              String::NewFromUtf8(
                  isolate, string(1, data->ContingentCondition).c_str()));
          /* 止损价 */
          obj_data->Set(String::NewFromUtf8(isolate, "StopPrice"),
                        Number::New(isolate, data->StopPrice));
          /* 强平原因 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ForceCloseReason"),
              String::NewFromUtf8(isolate,
                                  string(1, data->ForceCloseReason).c_str()));
          /* 自动挂起标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "IsAutoSuspend"),
                        Number::New(isolate, data->IsAutoSuspend));
          /* 业务单元 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BusinessUnit"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BusinessUnit),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 请求编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "RequestID"),
                        Number::New(isolate, data->RequestID));
          /* 本地报单编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "OrderLocalID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->OrderLocalID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易所代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 会员代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ParticipantID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ParticipantID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 客户代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ClientID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ClientID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 合约在交易所的代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeInstID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeInstID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易所交易员代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TraderID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TraderID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 安装编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "InstallID"),
                        Number::New(isolate, data->InstallID));
          /* 报单提交状态 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "OrderSubmitStatus"),
              String::NewFromUtf8(isolate,
                                  string(1, data->OrderSubmitStatus).c_str()));
          /* 报单提示序号 */
          obj_data->Set(String::NewFromUtf8(isolate, "NotifySequence"),
                        Number::New(isolate, data->NotifySequence));
          /* 交易日 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradingDay"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradingDay),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 结算编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SettlementID"),
                        Number::New(isolate, data->SettlementID));
          /* 报单编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "OrderSysID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->OrderSysID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 报单来源 */
          obj_data->Set(String::NewFromUtf8(isolate, "OrderSource"),
                        String::NewFromUtf8(
                            isolate, string(1, data->OrderSource).c_str()));
          /* 报单状态 */
          obj_data->Set(String::NewFromUtf8(isolate, "OrderStatus"),
                        String::NewFromUtf8(
                            isolate, string(1, data->OrderStatus).c_str()));
          /* 报单类型 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "OrderType"),
              String::NewFromUtf8(isolate, string(1, data->OrderType).c_str()));
          /* 今成交数量 */
          obj_data->Set(String::NewFromUtf8(isolate, "VolumeTraded"),
                        Number::New(isolate, data->VolumeTraded));
          /* 剩余数量 */
          obj_data->Set(String::NewFromUtf8(isolate, "VolumeTotal"),
                        Number::New(isolate, data->VolumeTotal));
          /* 报单日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InsertDate"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InsertDate),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 委托时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InsertTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InsertTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 激活时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ActiveTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ActiveTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 挂起时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "SuspendTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->SuspendTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 最后修改时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "UpdateTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->UpdateTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 撤销时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CancelTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CancelTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 最后修改交易所交易员代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ActiveTraderID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ActiveTraderID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 结算会员编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ClearingPartID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ClearingPartID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 序号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SequenceNo"),
                        Number::New(isolate, data->SequenceNo));
          /* 前置编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "FrontID"),
                        Number::New(isolate, data->FrontID));
          /* 会话编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SessionID"),
                        Number::New(isolate, data->SessionID));
          /* 用户端产品信息 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "UserProductInfo"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->UserProductInfo),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 状态信息 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "StatusMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->StatusMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 用户强评标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserForceClose"),
                        Number::New(isolate, data->UserForceClose));
          /* 操作用户代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ActiveUserID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ActiveUserID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 经纪公司报单编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "BrokerOrderSeq"),
                        Number::New(isolate, data->BrokerOrderSeq));
          /* 相关报单 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "RelativeOrderSysID"),
              String::NewFromOneByte(isolate, reinterpret_cast<uint8_t *>(
                                                  data->RelativeOrderSysID),
                                     NewStringType::kNormal)
                  .ToLocalChecked());
          /* 郑商所成交数量 */
          obj_data->Set(String::NewFromUtf8(isolate, "ZCETotalTradedVolume"),
                        Number::New(isolate, data->ZCETotalTradedVolume));
          /* 互换单标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "IsSwapOrder"),
                        Number::New(isolate, data->IsSwapOrder));
          /* 营业部编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BranchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BranchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资单元代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestUnitID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestUnitID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 资金账号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "AccountID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->AccountID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 币种代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CurrencyID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CurrencyID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* IP地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "IPAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->IPAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* Mac地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "MacAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->MacAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_QRY_TRADE: {
        CThostFtdcTradeField *data =
            static_cast<CThostFtdcTradeField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 合约代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InstrumentID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InstrumentID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 报单引用 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "OrderRef"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->OrderRef),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 用户代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 交易所代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 成交编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "TradeID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->TradeID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 买卖方向 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "Direction"),
              String::NewFromUtf8(isolate, string(1, data->Direction).c_str()));
          /* 报单编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "OrderSysID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->OrderSysID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 会员代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ParticipantID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ParticipantID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 客户代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ClientID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ClientID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易角色 */
          obj_data->Set(String::NewFromUtf8(isolate, "TradingRole"),
                        String::NewFromUtf8(
                            isolate, string(1, data->TradingRole).c_str()));
          /* 合约在交易所的代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeInstID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeInstID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 开平标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "OffsetFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->OffsetFlag).c_str()));
          /* 投机套保标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "HedgeFlag"),
              String::NewFromUtf8(isolate, string(1, data->HedgeFlag).c_str()));
          /* 价格 */
          obj_data->Set(String::NewFromUtf8(isolate, "Price"),
                        Number::New(isolate, data->Price));
          /* 数量 */
          obj_data->Set(String::NewFromUtf8(isolate, "Volume"),
                        Number::New(isolate, data->Volume));
          /* 成交时期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeDate"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeDate),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 成交时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 成交类型 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeType"),
              String::NewFromUtf8(isolate, string(1, data->TradeType).c_str()));
          /* 成交价来源 */
          obj_data->Set(String::NewFromUtf8(isolate, "PriceSource"),
                        String::NewFromUtf8(
                            isolate, string(1, data->PriceSource).c_str()));
          /* 交易所交易员代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TraderID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TraderID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 本地报单编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "OrderLocalID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->OrderLocalID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 结算会员编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ClearingPartID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ClearingPartID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 业务单元 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BusinessUnit"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BusinessUnit),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 序号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SequenceNo"),
                        Number::New(isolate, data->SequenceNo));
          /* 交易日 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradingDay"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradingDay),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 结算编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SettlementID"),
                        Number::New(isolate, data->SettlementID));
          /* 经纪公司报单编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "BrokerOrderSeq"),
                        Number::New(isolate, data->BrokerOrderSeq));
          /* 成交来源 */
          obj_data->Set(String::NewFromUtf8(isolate, "TradeSource"),
                        String::NewFromUtf8(
                            isolate, string(1, data->TradeSource).c_str()));
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_QRY_INVESTOR_POSITION: {
        CThostFtdcInvestorPositionField *data =
            static_cast<CThostFtdcInvestorPositionField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 合约代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InstrumentID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InstrumentID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 持仓多空方向 */
          obj_data->Set(String::NewFromUtf8(isolate, "PosiDirection"),
                        String::NewFromUtf8(
                            isolate, string(1, data->PosiDirection).c_str()));
          /* 投机套保标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "HedgeFlag"),
              String::NewFromUtf8(isolate, string(1, data->HedgeFlag).c_str()));
          /* 持仓日期 */
          obj_data->Set(String::NewFromUtf8(isolate, "PositionDate"),
                        String::NewFromUtf8(
                            isolate, string(1, data->PositionDate).c_str()));
          /* 上日持仓 */
          obj_data->Set(String::NewFromUtf8(isolate, "YdPosition"),
                        Number::New(isolate, data->YdPosition));
          /* 今日持仓 */
          obj_data->Set(String::NewFromUtf8(isolate, "Position"),
                        Number::New(isolate, data->Position));
          /* 多头冻结 */
          obj_data->Set(String::NewFromUtf8(isolate, "LongFrozen"),
                        Number::New(isolate, data->LongFrozen));
          /* 空头冻结 */
          obj_data->Set(String::NewFromUtf8(isolate, "ShortFrozen"),
                        Number::New(isolate, data->ShortFrozen));
          /* 开仓冻结金额 */
          obj_data->Set(String::NewFromUtf8(isolate, "LongFrozenAmount"),
                        Number::New(isolate, data->LongFrozenAmount));
          /* 开仓冻结金额 */
          obj_data->Set(String::NewFromUtf8(isolate, "ShortFrozenAmount"),
                        Number::New(isolate, data->ShortFrozenAmount));
          /* 开仓量 */
          obj_data->Set(String::NewFromUtf8(isolate, "OpenVolume"),
                        Number::New(isolate, data->OpenVolume));
          /* 平仓量 */
          obj_data->Set(String::NewFromUtf8(isolate, "CloseVolume"),
                        Number::New(isolate, data->CloseVolume));
          /* 开仓金额 */
          obj_data->Set(String::NewFromUtf8(isolate, "OpenAmount"),
                        Number::New(isolate, data->OpenAmount));
          /* 平仓金额 */
          obj_data->Set(String::NewFromUtf8(isolate, "CloseAmount"),
                        Number::New(isolate, data->CloseAmount));
          /* 持仓成本 */
          obj_data->Set(String::NewFromUtf8(isolate, "PositionCost"),
                        Number::New(isolate, data->PositionCost));
          /* 上次占用的保证金 */
          obj_data->Set(String::NewFromUtf8(isolate, "PreMargin"),
                        Number::New(isolate, data->PreMargin));
          /* 占用的保证金 */
          obj_data->Set(String::NewFromUtf8(isolate, "UseMargin"),
                        Number::New(isolate, data->UseMargin));
          /* 冻结的保证金 */
          obj_data->Set(String::NewFromUtf8(isolate, "FrozenMargin"),
                        Number::New(isolate, data->FrozenMargin));
          /* 冻结的资金 */
          obj_data->Set(String::NewFromUtf8(isolate, "FrozenCash"),
                        Number::New(isolate, data->FrozenCash));
          /* 冻结的手续费 */
          obj_data->Set(String::NewFromUtf8(isolate, "FrozenCommission"),
                        Number::New(isolate, data->FrozenCommission));
          /* 资金差额 */
          obj_data->Set(String::NewFromUtf8(isolate, "CashIn"),
                        Number::New(isolate, data->CashIn));
          /* 手续费 */
          obj_data->Set(String::NewFromUtf8(isolate, "Commission"),
                        Number::New(isolate, data->Commission));
          /* 平仓盈亏 */
          obj_data->Set(String::NewFromUtf8(isolate, "CloseProfit"),
                        Number::New(isolate, data->CloseProfit));
          /* 持仓盈亏 */
          obj_data->Set(String::NewFromUtf8(isolate, "PositionProfit"),
                        Number::New(isolate, data->PositionProfit));
          /* 上次结算价 */
          obj_data->Set(String::NewFromUtf8(isolate, "PreSettlementPrice"),
                        Number::New(isolate, data->PreSettlementPrice));
          /* 本次结算价 */
          obj_data->Set(String::NewFromUtf8(isolate, "SettlementPrice"),
                        Number::New(isolate, data->SettlementPrice));
          /* 交易日 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradingDay"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradingDay),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 结算编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SettlementID"),
                        Number::New(isolate, data->SettlementID));
          /* 开仓成本 */
          obj_data->Set(String::NewFromUtf8(isolate, "OpenCost"),
                        Number::New(isolate, data->OpenCost));
          /* 交易所保证金 */
          obj_data->Set(String::NewFromUtf8(isolate, "ExchangeMargin"),
                        Number::New(isolate, data->ExchangeMargin));
          /* 组合成交形成的持仓 */
          obj_data->Set(String::NewFromUtf8(isolate, "CombPosition"),
                        Number::New(isolate, data->CombPosition));
          /* 组合多头冻结 */
          obj_data->Set(String::NewFromUtf8(isolate, "CombLongFrozen"),
                        Number::New(isolate, data->CombLongFrozen));
          /* 组合空头冻结 */
          obj_data->Set(String::NewFromUtf8(isolate, "CombShortFrozen"),
                        Number::New(isolate, data->CombShortFrozen));
          /* 逐日盯市平仓盈亏 */
          obj_data->Set(String::NewFromUtf8(isolate, "CloseProfitByDate"),
                        Number::New(isolate, data->CloseProfitByDate));
          /* 逐笔对冲平仓盈亏 */
          obj_data->Set(String::NewFromUtf8(isolate, "CloseProfitByTrade"),
                        Number::New(isolate, data->CloseProfitByTrade));
          /* 今日持仓 */
          obj_data->Set(String::NewFromUtf8(isolate, "TodayPosition"),
                        Number::New(isolate, data->TodayPosition));
          /* 保证金率 */
          obj_data->Set(String::NewFromUtf8(isolate, "MarginRateByMoney"),
                        Number::New(isolate, data->MarginRateByMoney));
          /* 保证金率(按手数) */
          obj_data->Set(String::NewFromUtf8(isolate, "MarginRateByVolume"),
                        Number::New(isolate, data->MarginRateByVolume));
          /* 执行冻结 */
          obj_data->Set(String::NewFromUtf8(isolate, "StrikeFrozen"),
                        Number::New(isolate, data->StrikeFrozen));
          /* 执行冻结金额 */
          obj_data->Set(String::NewFromUtf8(isolate, "StrikeFrozenAmount"),
                        Number::New(isolate, data->StrikeFrozenAmount));
          /* 放弃执行冻结 */
          obj_data->Set(String::NewFromUtf8(isolate, "AbandonFrozen"),
                        Number::New(isolate, data->AbandonFrozen));
          /* 交易所代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 执行冻结的昨仓 */
          obj_data->Set(String::NewFromUtf8(isolate, "YdStrikeFrozen"),
                        Number::New(isolate, data->YdStrikeFrozen));
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_QRY_TRADING_ACCOUNT: {
        CThostFtdcTradingAccountField *data =
            static_cast<CThostFtdcTradingAccountField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "AccountID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->AccountID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 上次质押金额 */
          obj_data->Set(String::NewFromUtf8(isolate, "PreMortgage"),
                        Number::New(isolate, data->PreMortgage));
          /* 上次信用额度 */
          obj_data->Set(String::NewFromUtf8(isolate, "PreCredit"),
                        Number::New(isolate, data->PreCredit));
          /* 上次存款额 */
          obj_data->Set(String::NewFromUtf8(isolate, "PreDeposit"),
                        Number::New(isolate, data->PreDeposit));
          /* 上次结算准备金 */
          obj_data->Set(String::NewFromUtf8(isolate, "PreBalance"),
                        Number::New(isolate, data->PreBalance));
          /* 上次占用的保证金 */
          obj_data->Set(String::NewFromUtf8(isolate, "PreMargin"),
                        Number::New(isolate, data->PreMargin));
          /* 利息基数 */
          obj_data->Set(String::NewFromUtf8(isolate, "InterestBase"),
                        Number::New(isolate, data->InterestBase));
          /* 利息收入 */
          obj_data->Set(String::NewFromUtf8(isolate, "Interest"),
                        Number::New(isolate, data->Interest));
          /* 入金金额 */
          obj_data->Set(String::NewFromUtf8(isolate, "Deposit"),
                        Number::New(isolate, data->Deposit));
          /* 出金金额 */
          obj_data->Set(String::NewFromUtf8(isolate, "Withdraw"),
                        Number::New(isolate, data->Withdraw));
          /* 冻结的保证金 */
          obj_data->Set(String::NewFromUtf8(isolate, "FrozenMargin"),
                        Number::New(isolate, data->FrozenMargin));
          /* 冻结的资金 */
          obj_data->Set(String::NewFromUtf8(isolate, "FrozenCash"),
                        Number::New(isolate, data->FrozenCash));
          /* 冻结的手续费 */
          obj_data->Set(String::NewFromUtf8(isolate, "FrozenCommission"),
                        Number::New(isolate, data->FrozenCommission));
          /* 当前保证金总额 */
          obj_data->Set(String::NewFromUtf8(isolate, "CurrMargin"),
                        Number::New(isolate, data->CurrMargin));
          /* 资金差额 */
          obj_data->Set(String::NewFromUtf8(isolate, "CashIn"),
                        Number::New(isolate, data->CashIn));
          /* 手续费 */
          obj_data->Set(String::NewFromUtf8(isolate, "Commission"),
                        Number::New(isolate, data->Commission));
          /* 平仓盈亏 */
          obj_data->Set(String::NewFromUtf8(isolate, "CloseProfit"),
                        Number::New(isolate, data->CloseProfit));
          /* 持仓盈亏 */
          obj_data->Set(String::NewFromUtf8(isolate, "PositionProfit"),
                        Number::New(isolate, data->PositionProfit));
          /* 期货结算准备金 */
          obj_data->Set(String::NewFromUtf8(isolate, "Balance"),
                        Number::New(isolate, data->Balance));
          /* 可用资金 */
          obj_data->Set(String::NewFromUtf8(isolate, "Available"),
                        Number::New(isolate, data->Available));
          /* 可取资金 */
          obj_data->Set(String::NewFromUtf8(isolate, "WithdrawQuota"),
                        Number::New(isolate, data->WithdrawQuota));
          /* 基本准备金 */
          obj_data->Set(String::NewFromUtf8(isolate, "Reserve"),
                        Number::New(isolate, data->Reserve));
          /* 交易日 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradingDay"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradingDay),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 结算编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SettlementID"),
                        Number::New(isolate, data->SettlementID));
          /* 信用额度 */
          obj_data->Set(String::NewFromUtf8(isolate, "Credit"),
                        Number::New(isolate, data->Credit));
          /* 质押金额 */
          obj_data->Set(String::NewFromUtf8(isolate, "Mortgage"),
                        Number::New(isolate, data->Mortgage));
          /* 交易所保证金 */
          obj_data->Set(String::NewFromUtf8(isolate, "ExchangeMargin"),
                        Number::New(isolate, data->ExchangeMargin));
          /* 投资者交割保证金 */
          obj_data->Set(String::NewFromUtf8(isolate, "DeliveryMargin"),
                        Number::New(isolate, data->DeliveryMargin));
          /* 交易所交割保证金 */
          obj_data->Set(String::NewFromUtf8(isolate, "ExchangeDeliveryMargin"),
                        Number::New(isolate, data->ExchangeDeliveryMargin));
          /* 保底期货结算准备金 */
          obj_data->Set(String::NewFromUtf8(isolate, "ReserveBalance"),
                        Number::New(isolate, data->ReserveBalance));
          /* 币种代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CurrencyID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CurrencyID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 上次货币质入金额 */
          obj_data->Set(String::NewFromUtf8(isolate, "PreFundMortgageIn"),
                        Number::New(isolate, data->PreFundMortgageIn));
          /* 上次货币质出金额 */
          obj_data->Set(String::NewFromUtf8(isolate, "PreFundMortgageOut"),
                        Number::New(isolate, data->PreFundMortgageOut));
          /* 货币质入金额 */
          obj_data->Set(String::NewFromUtf8(isolate, "FundMortgageIn"),
                        Number::New(isolate, data->FundMortgageIn));
          /* 货币质出金额 */
          obj_data->Set(String::NewFromUtf8(isolate, "FundMortgageOut"),
                        Number::New(isolate, data->FundMortgageOut));
          /* 货币质押余额 */
          obj_data->Set(String::NewFromUtf8(isolate, "FundMortgageAvailable"),
                        Number::New(isolate, data->FundMortgageAvailable));
          /* 可质押货币金额 */
          obj_data->Set(String::NewFromUtf8(isolate, "MortgageableFund"),
                        Number::New(isolate, data->MortgageableFund));
          /* 特殊产品占用保证金 */
          obj_data->Set(String::NewFromUtf8(isolate, "SpecProductMargin"),
                        Number::New(isolate, data->SpecProductMargin));
          /* 特殊产品冻结保证金 */
          obj_data->Set(String::NewFromUtf8(isolate, "SpecProductFrozenMargin"),
                        Number::New(isolate, data->SpecProductFrozenMargin));
          /* 特殊产品手续费 */
          obj_data->Set(String::NewFromUtf8(isolate, "SpecProductCommission"),
                        Number::New(isolate, data->SpecProductCommission));
          /* 特殊产品冻结手续费 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "SpecProductFrozenCommission"),
              Number::New(isolate, data->SpecProductFrozenCommission));
          /* 特殊产品持仓盈亏 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "SpecProductPositionProfit"),
              Number::New(isolate, data->SpecProductPositionProfit));
          /* 特殊产品平仓盈亏 */
          obj_data->Set(String::NewFromUtf8(isolate, "SpecProductCloseProfit"),
                        Number::New(isolate, data->SpecProductCloseProfit));
          /* 根据持仓盈亏算法计算的特殊产品持仓盈亏 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "SpecProductPositionProfitByAlg"),
              Number::New(isolate, data->SpecProductPositionProfitByAlg));
          /* 特殊产品交易所保证金 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "SpecProductExchangeMargin"),
              Number::New(isolate, data->SpecProductExchangeMargin));
          /* 业务类型 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BizType"),
              String::NewFromUtf8(isolate, string(1, data->BizType).c_str()));
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_QRY_INVESTOR: {
        CThostFtdcInvestorField *data =
            static_cast<CThostFtdcInvestorField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者分组代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorGroupID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorGroupID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者名称 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorName"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorName),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 证件类型 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "IdentifiedCardType"),
              String::NewFromUtf8(isolate,
                                  string(1, data->IdentifiedCardType).c_str()));
          /* 证件号码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "IdentifiedCardNo"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->IdentifiedCardNo),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 是否活跃 */
          obj_data->Set(String::NewFromUtf8(isolate, "IsActive"),
                        Number::New(isolate, data->IsActive));
          /* 联系电话 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "Telephone"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->Telephone),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 通讯地址 */
          obj_data->Set(String::NewFromUtf8(isolate, "Address"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->Address),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 开户日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "OpenDate"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->OpenDate),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 手机 */
          obj_data->Set(String::NewFromUtf8(isolate, "Mobile"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->Mobile),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 手续费率模板代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CommModelID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CommModelID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 保证金率模板代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "MarginModelID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->MarginModelID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_QRY_TRADING_CODE: {
        CThostFtdcTradingCodeField *data =
            static_cast<CThostFtdcTradingCodeField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易所代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 客户代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ClientID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ClientID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 是否活跃 */
          obj_data->Set(String::NewFromUtf8(isolate, "IsActive"),
                        Number::New(isolate, data->IsActive));
          /* 交易编码类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "ClientIDType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->ClientIDType).c_str()));
          /* 营业部编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BranchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BranchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 业务类型 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BizType"),
              String::NewFromUtf8(isolate, string(1, data->BizType).c_str()));
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_QRY_INSTRUMENT_MARGIN_RATE: {
        CThostFtdcInstrumentMarginRateField *data =
            static_cast<CThostFtdcInstrumentMarginRateField *>(
                baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 合约代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InstrumentID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InstrumentID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者范围 */
          obj_data->Set(String::NewFromUtf8(isolate, "InvestorRange"),
                        String::NewFromUtf8(
                            isolate, string(1, data->InvestorRange).c_str()));
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投机套保标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "HedgeFlag"),
              String::NewFromUtf8(isolate, string(1, data->HedgeFlag).c_str()));
          /* 多头保证金率 */
          obj_data->Set(String::NewFromUtf8(isolate, "LongMarginRatioByMoney"),
                        Number::New(isolate, data->LongMarginRatioByMoney));
          /* 多头保证金费 */
          obj_data->Set(String::NewFromUtf8(isolate, "LongMarginRatioByVolume"),
                        Number::New(isolate, data->LongMarginRatioByVolume));
          /* 空头保证金率 */
          obj_data->Set(String::NewFromUtf8(isolate, "ShortMarginRatioByMoney"),
                        Number::New(isolate, data->ShortMarginRatioByMoney));
          /* 空头保证金费 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ShortMarginRatioByVolume"),
              Number::New(isolate, data->ShortMarginRatioByVolume));
          /* 是否相对交易所收取 */
          obj_data->Set(String::NewFromUtf8(isolate, "IsRelative"),
                        Number::New(isolate, data->IsRelative));
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_QRY_INSTRUMENT_COMMISSION_RATE: {
        CThostFtdcInstrumentCommissionRateField *data =
            static_cast<CThostFtdcInstrumentCommissionRateField *>(
                baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 合约代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InstrumentID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InstrumentID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者范围 */
          obj_data->Set(String::NewFromUtf8(isolate, "InvestorRange"),
                        String::NewFromUtf8(
                            isolate, string(1, data->InvestorRange).c_str()));
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 开仓手续费率 */
          obj_data->Set(String::NewFromUtf8(isolate, "OpenRatioByMoney"),
                        Number::New(isolate, data->OpenRatioByMoney));
          /* 开仓手续费 */
          obj_data->Set(String::NewFromUtf8(isolate, "OpenRatioByVolume"),
                        Number::New(isolate, data->OpenRatioByVolume));
          /* 平仓手续费率 */
          obj_data->Set(String::NewFromUtf8(isolate, "CloseRatioByMoney"),
                        Number::New(isolate, data->CloseRatioByMoney));
          /* 平仓手续费 */
          obj_data->Set(String::NewFromUtf8(isolate, "CloseRatioByVolume"),
                        Number::New(isolate, data->CloseRatioByVolume));
          /* 平今手续费率 */
          obj_data->Set(String::NewFromUtf8(isolate, "CloseTodayRatioByMoney"),
                        Number::New(isolate, data->CloseTodayRatioByMoney));
          /* 平今手续费 */
          obj_data->Set(String::NewFromUtf8(isolate, "CloseTodayRatioByVolume"),
                        Number::New(isolate, data->CloseTodayRatioByVolume));
          /* 交易所代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 业务类型 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BizType"),
              String::NewFromUtf8(isolate, string(1, data->BizType).c_str()));
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_QRY_EXCHANGE: {
        CThostFtdcExchangeField *data =
            static_cast<CThostFtdcExchangeField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 交易所代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易所名称 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeName"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeName),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易所属性 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeProperty"),
              String::NewFromUtf8(isolate,
                                  string(1, data->ExchangeProperty).c_str()));
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_QRY_PRODUCT: {
        CThostFtdcProductField *data =
            static_cast<CThostFtdcProductField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 产品代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ProductID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ProductID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 产品名称 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ProductName"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ProductName),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易所代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 产品类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "ProductClass"),
                        String::NewFromUtf8(
                            isolate, string(1, data->ProductClass).c_str()));
          /* 合约数量乘数 */
          obj_data->Set(String::NewFromUtf8(isolate, "VolumeMultiple"),
                        Number::New(isolate, data->VolumeMultiple));
          /* 最小变动价位 */
          obj_data->Set(String::NewFromUtf8(isolate, "PriceTick"),
                        Number::New(isolate, data->PriceTick));
          /* 市价单最大下单量 */
          obj_data->Set(String::NewFromUtf8(isolate, "MaxMarketOrderVolume"),
                        Number::New(isolate, data->MaxMarketOrderVolume));
          /* 市价单最小下单量 */
          obj_data->Set(String::NewFromUtf8(isolate, "MinMarketOrderVolume"),
                        Number::New(isolate, data->MinMarketOrderVolume));
          /* 限价单最大下单量 */
          obj_data->Set(String::NewFromUtf8(isolate, "MaxLimitOrderVolume"),
                        Number::New(isolate, data->MaxLimitOrderVolume));
          /* 限价单最小下单量 */
          obj_data->Set(String::NewFromUtf8(isolate, "MinLimitOrderVolume"),
                        Number::New(isolate, data->MinLimitOrderVolume));
          /* 持仓类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "PositionType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->PositionType).c_str()));
          /* 持仓日期类型 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "PositionDateType"),
              String::NewFromUtf8(isolate,
                                  string(1, data->PositionDateType).c_str()));
          /* 平仓处理类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "CloseDealType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->CloseDealType).c_str()));
          /* 交易币种类型 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeCurrencyID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeCurrencyID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 质押资金可用范围 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "MortgageFundUseRange"),
              String::NewFromUtf8(
                  isolate, string(1, data->MortgageFundUseRange).c_str()));
          /* 交易所产品代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeProductID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeProductID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 合约基础商品乘数 */
          obj_data->Set(String::NewFromUtf8(isolate, "UnderlyingMultiple"),
                        Number::New(isolate, data->UnderlyingMultiple));
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_QRY_INSTRUMENT: {
        CThostFtdcInstrumentField *data =
            static_cast<CThostFtdcInstrumentField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 合约代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InstrumentID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InstrumentID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易所代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 合约名称 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InstrumentName"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InstrumentName),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 合约在交易所的代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeInstID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeInstID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 产品代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ProductID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ProductID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 产品类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "ProductClass"),
                        String::NewFromUtf8(
                            isolate, string(1, data->ProductClass).c_str()));
          /* 交割年份 */
          obj_data->Set(String::NewFromUtf8(isolate, "DeliveryYear"),
                        Number::New(isolate, data->DeliveryYear));
          /* 交割月 */
          obj_data->Set(String::NewFromUtf8(isolate, "DeliveryMonth"),
                        Number::New(isolate, data->DeliveryMonth));
          /* 市价单最大下单量 */
          obj_data->Set(String::NewFromUtf8(isolate, "MaxMarketOrderVolume"),
                        Number::New(isolate, data->MaxMarketOrderVolume));
          /* 市价单最小下单量 */
          obj_data->Set(String::NewFromUtf8(isolate, "MinMarketOrderVolume"),
                        Number::New(isolate, data->MinMarketOrderVolume));
          /* 限价单最大下单量 */
          obj_data->Set(String::NewFromUtf8(isolate, "MaxLimitOrderVolume"),
                        Number::New(isolate, data->MaxLimitOrderVolume));
          /* 限价单最小下单量 */
          obj_data->Set(String::NewFromUtf8(isolate, "MinLimitOrderVolume"),
                        Number::New(isolate, data->MinLimitOrderVolume));
          /* 合约数量乘数 */
          obj_data->Set(String::NewFromUtf8(isolate, "VolumeMultiple"),
                        Number::New(isolate, data->VolumeMultiple));
          /* 最小变动价位 */
          obj_data->Set(String::NewFromUtf8(isolate, "PriceTick"),
                        Number::New(isolate, data->PriceTick));
          /* 创建日 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CreateDate"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CreateDate),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 上市日 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "OpenDate"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->OpenDate),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 到期日 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExpireDate"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExpireDate),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 开始交割日 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "StartDelivDate"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->StartDelivDate),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 结束交割日 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "EndDelivDate"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->EndDelivDate),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 合约生命周期状态 */
          obj_data->Set(String::NewFromUtf8(isolate, "InstLifePhase"),
                        String::NewFromUtf8(
                            isolate, string(1, data->InstLifePhase).c_str()));
          /* 当前是否交易 */
          obj_data->Set(String::NewFromUtf8(isolate, "IsTrading"),
                        Number::New(isolate, data->IsTrading));
          /* 持仓类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "PositionType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->PositionType).c_str()));
          /* 持仓日期类型 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "PositionDateType"),
              String::NewFromUtf8(isolate,
                                  string(1, data->PositionDateType).c_str()));
          /* 多头保证金率 */
          obj_data->Set(String::NewFromUtf8(isolate, "LongMarginRatio"),
                        Number::New(isolate, data->LongMarginRatio));
          /* 空头保证金率 */
          obj_data->Set(String::NewFromUtf8(isolate, "ShortMarginRatio"),
                        Number::New(isolate, data->ShortMarginRatio));
          /* 是否使用大额单边保证金算法 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "MaxMarginSideAlgorithm"),
              String::NewFromUtf8(
                  isolate, string(1, data->MaxMarginSideAlgorithm).c_str()));
          /* 基础商品代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "UnderlyingInstrID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->UnderlyingInstrID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 执行价 */
          obj_data->Set(String::NewFromUtf8(isolate, "StrikePrice"),
                        Number::New(isolate, data->StrikePrice));
          /* 期权类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "OptionsType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->OptionsType).c_str()));
          /* 合约基础商品乘数 */
          obj_data->Set(String::NewFromUtf8(isolate, "UnderlyingMultiple"),
                        Number::New(isolate, data->UnderlyingMultiple));
          /* 组合类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "CombinationType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->CombinationType).c_str()));
          /* 最小买下单单位 */
          obj_data->Set(String::NewFromUtf8(isolate, "MinBuyVolume"),
                        Number::New(isolate, data->MinBuyVolume));
          /* 最小卖下单单位 */
          obj_data->Set(String::NewFromUtf8(isolate, "MinSellVolume"),
                        Number::New(isolate, data->MinSellVolume));
          /* 合约标识码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InstrumentCode"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InstrumentCode),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_QRY_DEPTH_MARKET_DATA: {
        CThostFtdcDepthMarketDataField *data =
            static_cast<CThostFtdcDepthMarketDataField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 交易日 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradingDay"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradingDay),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 合约代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InstrumentID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InstrumentID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易所代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 合约在交易所的代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeInstID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeInstID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 最新价 */
          obj_data->Set(String::NewFromUtf8(isolate, "LastPrice"),
                        Number::New(isolate, data->LastPrice));
          /* 上次结算价 */
          obj_data->Set(String::NewFromUtf8(isolate, "PreSettlementPrice"),
                        Number::New(isolate, data->PreSettlementPrice));
          /* 昨收盘 */
          obj_data->Set(String::NewFromUtf8(isolate, "PreClosePrice"),
                        Number::New(isolate, data->PreClosePrice));
          /* 昨持仓量 */
          obj_data->Set(String::NewFromUtf8(isolate, "PreOpenInterest"),
                        Number::New(isolate, data->PreOpenInterest));
          /* 今开盘 */
          obj_data->Set(String::NewFromUtf8(isolate, "OpenPrice"),
                        Number::New(isolate, data->OpenPrice));
          /* 最高价 */
          obj_data->Set(String::NewFromUtf8(isolate, "HighestPrice"),
                        Number::New(isolate, data->HighestPrice));
          /* 最低价 */
          obj_data->Set(String::NewFromUtf8(isolate, "LowestPrice"),
                        Number::New(isolate, data->LowestPrice));
          /* 数量 */
          obj_data->Set(String::NewFromUtf8(isolate, "Volume"),
                        Number::New(isolate, data->Volume));
          /* 成交金额 */
          obj_data->Set(String::NewFromUtf8(isolate, "Turnover"),
                        Number::New(isolate, data->Turnover));
          /* 持仓量 */
          obj_data->Set(String::NewFromUtf8(isolate, "OpenInterest"),
                        Number::New(isolate, data->OpenInterest));
          /* 今收盘 */
          obj_data->Set(String::NewFromUtf8(isolate, "ClosePrice"),
                        Number::New(isolate, data->ClosePrice));
          /* 本次结算价 */
          obj_data->Set(String::NewFromUtf8(isolate, "SettlementPrice"),
                        Number::New(isolate, data->SettlementPrice));
          /* 涨停板价 */
          obj_data->Set(String::NewFromUtf8(isolate, "UpperLimitPrice"),
                        Number::New(isolate, data->UpperLimitPrice));
          /* 跌停板价 */
          obj_data->Set(String::NewFromUtf8(isolate, "LowerLimitPrice"),
                        Number::New(isolate, data->LowerLimitPrice));
          /* 昨虚实度 */
          obj_data->Set(String::NewFromUtf8(isolate, "PreDelta"),
                        Number::New(isolate, data->PreDelta));
          /* 今虚实度 */
          obj_data->Set(String::NewFromUtf8(isolate, "CurrDelta"),
                        Number::New(isolate, data->CurrDelta));
          /* 最后修改时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "UpdateTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->UpdateTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 最后修改毫秒 */
          obj_data->Set(String::NewFromUtf8(isolate, "UpdateMillisec"),
                        Number::New(isolate, data->UpdateMillisec));
          /* 申买价一 */
          obj_data->Set(String::NewFromUtf8(isolate, "BidPrice1"),
                        Number::New(isolate, data->BidPrice1));
          /* 申买量一 */
          obj_data->Set(String::NewFromUtf8(isolate, "BidVolume1"),
                        Number::New(isolate, data->BidVolume1));
          /* 申卖价一 */
          obj_data->Set(String::NewFromUtf8(isolate, "AskPrice1"),
                        Number::New(isolate, data->AskPrice1));
          /* 申卖量一 */
          obj_data->Set(String::NewFromUtf8(isolate, "AskVolume1"),
                        Number::New(isolate, data->AskVolume1));
          /* 申买价二 */
          obj_data->Set(String::NewFromUtf8(isolate, "BidPrice2"),
                        Number::New(isolate, data->BidPrice2));
          /* 申买量二 */
          obj_data->Set(String::NewFromUtf8(isolate, "BidVolume2"),
                        Number::New(isolate, data->BidVolume2));
          /* 申卖价二 */
          obj_data->Set(String::NewFromUtf8(isolate, "AskPrice2"),
                        Number::New(isolate, data->AskPrice2));
          /* 申卖量二 */
          obj_data->Set(String::NewFromUtf8(isolate, "AskVolume2"),
                        Number::New(isolate, data->AskVolume2));
          /* 申买价三 */
          obj_data->Set(String::NewFromUtf8(isolate, "BidPrice3"),
                        Number::New(isolate, data->BidPrice3));
          /* 申买量三 */
          obj_data->Set(String::NewFromUtf8(isolate, "BidVolume3"),
                        Number::New(isolate, data->BidVolume3));
          /* 申卖价三 */
          obj_data->Set(String::NewFromUtf8(isolate, "AskPrice3"),
                        Number::New(isolate, data->AskPrice3));
          /* 申卖量三 */
          obj_data->Set(String::NewFromUtf8(isolate, "AskVolume3"),
                        Number::New(isolate, data->AskVolume3));
          /* 申买价四 */
          obj_data->Set(String::NewFromUtf8(isolate, "BidPrice4"),
                        Number::New(isolate, data->BidPrice4));
          /* 申买量四 */
          obj_data->Set(String::NewFromUtf8(isolate, "BidVolume4"),
                        Number::New(isolate, data->BidVolume4));
          /* 申卖价四 */
          obj_data->Set(String::NewFromUtf8(isolate, "AskPrice4"),
                        Number::New(isolate, data->AskPrice4));
          /* 申卖量四 */
          obj_data->Set(String::NewFromUtf8(isolate, "AskVolume4"),
                        Number::New(isolate, data->AskVolume4));
          /* 申买价五 */
          obj_data->Set(String::NewFromUtf8(isolate, "BidPrice5"),
                        Number::New(isolate, data->BidPrice5));
          /* 申买量五 */
          obj_data->Set(String::NewFromUtf8(isolate, "BidVolume5"),
                        Number::New(isolate, data->BidVolume5));
          /* 申卖价五 */
          obj_data->Set(String::NewFromUtf8(isolate, "AskPrice5"),
                        Number::New(isolate, data->AskPrice5));
          /* 申卖量五 */
          obj_data->Set(String::NewFromUtf8(isolate, "AskVolume5"),
                        Number::New(isolate, data->AskVolume5));
          /* 当日均价 */
          obj_data->Set(String::NewFromUtf8(isolate, "AveragePrice"),
                        Number::New(isolate, data->AveragePrice));
          /* 业务日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ActionDay"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ActionDay),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_QRY_SETTLEMENT_INFO: {
        CThostFtdcSettlementInfoField *data =
            static_cast<CThostFtdcSettlementInfoField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 交易日 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradingDay"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradingDay),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 结算编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SettlementID"),
                        Number::New(isolate, data->SettlementID));
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 序号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SequenceNo"),
                        Number::New(isolate, data->SequenceNo));
          /* 消息正文 */
          obj_data->Set(String::NewFromUtf8(isolate, "Content"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->Content),
                            NewStringType::kNormal)
                            .ToLocalChecked());
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_QRY_TRANSFER_BANK: {
        CThostFtdcTransferBankField *data =
            static_cast<CThostFtdcTransferBankField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 银行代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->BankID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 银行分中心代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankBrchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankBrchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行名称 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankName"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankName),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 是否活跃 */
          obj_data->Set(String::NewFromUtf8(isolate, "IsActive"),
                        Number::New(isolate, data->IsActive));
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_QRY_INVESTOR_POSITION_DETAIL: {
        CThostFtdcInvestorPositionDetailField *data =
            static_cast<CThostFtdcInvestorPositionDetailField *>(
                baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 合约代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InstrumentID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InstrumentID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投机套保标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "HedgeFlag"),
              String::NewFromUtf8(isolate, string(1, data->HedgeFlag).c_str()));
          /* 买卖 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "Direction"),
              String::NewFromUtf8(isolate, string(1, data->Direction).c_str()));
          /* 开仓日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "OpenDate"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->OpenDate),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 成交编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "TradeID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->TradeID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 数量 */
          obj_data->Set(String::NewFromUtf8(isolate, "Volume"),
                        Number::New(isolate, data->Volume));
          /* 开仓价 */
          obj_data->Set(String::NewFromUtf8(isolate, "OpenPrice"),
                        Number::New(isolate, data->OpenPrice));
          /* 交易日 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradingDay"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradingDay),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 结算编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SettlementID"),
                        Number::New(isolate, data->SettlementID));
          /* 成交类型 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeType"),
              String::NewFromUtf8(isolate, string(1, data->TradeType).c_str()));
          /* 组合合约代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CombInstrumentID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CombInstrumentID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易所代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 逐日盯市平仓盈亏 */
          obj_data->Set(String::NewFromUtf8(isolate, "CloseProfitByDate"),
                        Number::New(isolate, data->CloseProfitByDate));
          /* 逐笔对冲平仓盈亏 */
          obj_data->Set(String::NewFromUtf8(isolate, "CloseProfitByTrade"),
                        Number::New(isolate, data->CloseProfitByTrade));
          /* 逐日盯市持仓盈亏 */
          obj_data->Set(String::NewFromUtf8(isolate, "PositionProfitByDate"),
                        Number::New(isolate, data->PositionProfitByDate));
          /* 逐笔对冲持仓盈亏 */
          obj_data->Set(String::NewFromUtf8(isolate, "PositionProfitByTrade"),
                        Number::New(isolate, data->PositionProfitByTrade));
          /* 投资者保证金 */
          obj_data->Set(String::NewFromUtf8(isolate, "Margin"),
                        Number::New(isolate, data->Margin));
          /* 交易所保证金 */
          obj_data->Set(String::NewFromUtf8(isolate, "ExchMargin"),
                        Number::New(isolate, data->ExchMargin));
          /* 保证金率 */
          obj_data->Set(String::NewFromUtf8(isolate, "MarginRateByMoney"),
                        Number::New(isolate, data->MarginRateByMoney));
          /* 保证金率(按手数) */
          obj_data->Set(String::NewFromUtf8(isolate, "MarginRateByVolume"),
                        Number::New(isolate, data->MarginRateByVolume));
          /* 昨结算价 */
          obj_data->Set(String::NewFromUtf8(isolate, "LastSettlementPrice"),
                        Number::New(isolate, data->LastSettlementPrice));
          /* 结算价 */
          obj_data->Set(String::NewFromUtf8(isolate, "SettlementPrice"),
                        Number::New(isolate, data->SettlementPrice));
          /* 平仓量 */
          obj_data->Set(String::NewFromUtf8(isolate, "CloseVolume"),
                        Number::New(isolate, data->CloseVolume));
          /* 平仓金额 */
          obj_data->Set(String::NewFromUtf8(isolate, "CloseAmount"),
                        Number::New(isolate, data->CloseAmount));
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_QRY_NOTICE: {
        CThostFtdcNoticeField *data =
            static_cast<CThostFtdcNoticeField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 消息正文 */
          obj_data->Set(String::NewFromUtf8(isolate, "Content"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->Content),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 经纪公司通知内容序列号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "SequenceLabel"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->SequenceLabel),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_QRY_SETTLEMENT_INFO_CONFIRM: {
        CThostFtdcSettlementInfoConfirmField *data =
            static_cast<CThostFtdcSettlementInfoConfirmField *>(
                baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 确认日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ConfirmDate"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ConfirmDate),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 确认时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ConfirmTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ConfirmTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_QRY_INVESTOR_POSITION_COMBINE_DETAIL: {
        CThostFtdcInvestorPositionCombineDetailField *data =
            static_cast<CThostFtdcInvestorPositionCombineDetailField *>(
                baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 交易日 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradingDay"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradingDay),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 开仓日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "OpenDate"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->OpenDate),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易所代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 结算编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SettlementID"),
                        Number::New(isolate, data->SettlementID));
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 组合编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ComTradeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ComTradeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 撮合编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "TradeID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->TradeID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 合约代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InstrumentID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InstrumentID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投机套保标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "HedgeFlag"),
              String::NewFromUtf8(isolate, string(1, data->HedgeFlag).c_str()));
          /* 买卖 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "Direction"),
              String::NewFromUtf8(isolate, string(1, data->Direction).c_str()));
          /* 持仓量 */
          obj_data->Set(String::NewFromUtf8(isolate, "TotalAmt"),
                        Number::New(isolate, data->TotalAmt));
          /* 投资者保证金 */
          obj_data->Set(String::NewFromUtf8(isolate, "Margin"),
                        Number::New(isolate, data->Margin));
          /* 交易所保证金 */
          obj_data->Set(String::NewFromUtf8(isolate, "ExchMargin"),
                        Number::New(isolate, data->ExchMargin));
          /* 保证金率 */
          obj_data->Set(String::NewFromUtf8(isolate, "MarginRateByMoney"),
                        Number::New(isolate, data->MarginRateByMoney));
          /* 保证金率(按手数) */
          obj_data->Set(String::NewFromUtf8(isolate, "MarginRateByVolume"),
                        Number::New(isolate, data->MarginRateByVolume));
          /* 单腿编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "LegID"),
                        Number::New(isolate, data->LegID));
          /* 单腿乘数 */
          obj_data->Set(String::NewFromUtf8(isolate, "LegMultiple"),
                        Number::New(isolate, data->LegMultiple));
          /* 组合持仓合约编码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CombInstrumentID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CombInstrumentID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 成交组号 */
          obj_data->Set(String::NewFromUtf8(isolate, "TradeGroupID"),
                        Number::New(isolate, data->TradeGroupID));
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_QRY_CFMMCTRADING_ACCOUNT_KEY: {
        CThostFtdcCFMMCTradingAccountKeyField *data =
            static_cast<CThostFtdcCFMMCTradingAccountKeyField *>(
                baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 经纪公司统一编码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ParticipantID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ParticipantID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "AccountID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->AccountID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 密钥编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "KeyID"),
                        Number::New(isolate, data->KeyID));
          /* 动态密钥 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CurrentKey"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CurrentKey),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_QRY_EWARRANT_OFFSET: {
        CThostFtdcEWarrantOffsetField *data =
            static_cast<CThostFtdcEWarrantOffsetField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 交易日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradingDay"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradingDay),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易所代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 合约代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InstrumentID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InstrumentID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 买卖方向 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "Direction"),
              String::NewFromUtf8(isolate, string(1, data->Direction).c_str()));
          /* 投机套保标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "HedgeFlag"),
              String::NewFromUtf8(isolate, string(1, data->HedgeFlag).c_str()));
          /* 数量 */
          obj_data->Set(String::NewFromUtf8(isolate, "Volume"),
                        Number::New(isolate, data->Volume));
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_QRY_INVESTOR_PRODUCT_GROUP_MARGIN: {
        CThostFtdcInvestorProductGroupMarginField *data =
            static_cast<CThostFtdcInvestorProductGroupMarginField *>(
                baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 品种/跨品种标示 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ProductGroupID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ProductGroupID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易日 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradingDay"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradingDay),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 结算编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SettlementID"),
                        Number::New(isolate, data->SettlementID));
          /* 冻结的保证金 */
          obj_data->Set(String::NewFromUtf8(isolate, "FrozenMargin"),
                        Number::New(isolate, data->FrozenMargin));
          /* 多头冻结的保证金 */
          obj_data->Set(String::NewFromUtf8(isolate, "LongFrozenMargin"),
                        Number::New(isolate, data->LongFrozenMargin));
          /* 空头冻结的保证金 */
          obj_data->Set(String::NewFromUtf8(isolate, "ShortFrozenMargin"),
                        Number::New(isolate, data->ShortFrozenMargin));
          /* 占用的保证金 */
          obj_data->Set(String::NewFromUtf8(isolate, "UseMargin"),
                        Number::New(isolate, data->UseMargin));
          /* 多头保证金 */
          obj_data->Set(String::NewFromUtf8(isolate, "LongUseMargin"),
                        Number::New(isolate, data->LongUseMargin));
          /* 空头保证金 */
          obj_data->Set(String::NewFromUtf8(isolate, "ShortUseMargin"),
                        Number::New(isolate, data->ShortUseMargin));
          /* 交易所保证金 */
          obj_data->Set(String::NewFromUtf8(isolate, "ExchMargin"),
                        Number::New(isolate, data->ExchMargin));
          /* 交易所多头保证金 */
          obj_data->Set(String::NewFromUtf8(isolate, "LongExchMargin"),
                        Number::New(isolate, data->LongExchMargin));
          /* 交易所空头保证金 */
          obj_data->Set(String::NewFromUtf8(isolate, "ShortExchMargin"),
                        Number::New(isolate, data->ShortExchMargin));
          /* 平仓盈亏 */
          obj_data->Set(String::NewFromUtf8(isolate, "CloseProfit"),
                        Number::New(isolate, data->CloseProfit));
          /* 冻结的手续费 */
          obj_data->Set(String::NewFromUtf8(isolate, "FrozenCommission"),
                        Number::New(isolate, data->FrozenCommission));
          /* 手续费 */
          obj_data->Set(String::NewFromUtf8(isolate, "Commission"),
                        Number::New(isolate, data->Commission));
          /* 冻结的资金 */
          obj_data->Set(String::NewFromUtf8(isolate, "FrozenCash"),
                        Number::New(isolate, data->FrozenCash));
          /* 资金差额 */
          obj_data->Set(String::NewFromUtf8(isolate, "CashIn"),
                        Number::New(isolate, data->CashIn));
          /* 持仓盈亏 */
          obj_data->Set(String::NewFromUtf8(isolate, "PositionProfit"),
                        Number::New(isolate, data->PositionProfit));
          /* 折抵总金额 */
          obj_data->Set(String::NewFromUtf8(isolate, "OffsetAmount"),
                        Number::New(isolate, data->OffsetAmount));
          /* 多头折抵总金额 */
          obj_data->Set(String::NewFromUtf8(isolate, "LongOffsetAmount"),
                        Number::New(isolate, data->LongOffsetAmount));
          /* 空头折抵总金额 */
          obj_data->Set(String::NewFromUtf8(isolate, "ShortOffsetAmount"),
                        Number::New(isolate, data->ShortOffsetAmount));
          /* 交易所折抵总金额 */
          obj_data->Set(String::NewFromUtf8(isolate, "ExchOffsetAmount"),
                        Number::New(isolate, data->ExchOffsetAmount));
          /* 交易所多头折抵总金额 */
          obj_data->Set(String::NewFromUtf8(isolate, "LongExchOffsetAmount"),
                        Number::New(isolate, data->LongExchOffsetAmount));
          /* 交易所空头折抵总金额 */
          obj_data->Set(String::NewFromUtf8(isolate, "ShortExchOffsetAmount"),
                        Number::New(isolate, data->ShortExchOffsetAmount));
          /* 投机套保标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "HedgeFlag"),
              String::NewFromUtf8(isolate, string(1, data->HedgeFlag).c_str()));
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_QRY_EXCHANGE_MARGIN_RATE: {
        CThostFtdcExchangeMarginRateField *data =
            static_cast<CThostFtdcExchangeMarginRateField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 合约代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InstrumentID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InstrumentID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投机套保标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "HedgeFlag"),
              String::NewFromUtf8(isolate, string(1, data->HedgeFlag).c_str()));
          /* 多头保证金率 */
          obj_data->Set(String::NewFromUtf8(isolate, "LongMarginRatioByMoney"),
                        Number::New(isolate, data->LongMarginRatioByMoney));
          /* 多头保证金费 */
          obj_data->Set(String::NewFromUtf8(isolate, "LongMarginRatioByVolume"),
                        Number::New(isolate, data->LongMarginRatioByVolume));
          /* 空头保证金率 */
          obj_data->Set(String::NewFromUtf8(isolate, "ShortMarginRatioByMoney"),
                        Number::New(isolate, data->ShortMarginRatioByMoney));
          /* 空头保证金费 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ShortMarginRatioByVolume"),
              Number::New(isolate, data->ShortMarginRatioByVolume));
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_QRY_EXCHANGE_MARGIN_RATE_ADJUST: {
        CThostFtdcExchangeMarginRateAdjustField *data =
            static_cast<CThostFtdcExchangeMarginRateAdjustField *>(
                baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 合约代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InstrumentID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InstrumentID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投机套保标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "HedgeFlag"),
              String::NewFromUtf8(isolate, string(1, data->HedgeFlag).c_str()));
          /* 跟随交易所投资者多头保证金率 */
          obj_data->Set(String::NewFromUtf8(isolate, "LongMarginRatioByMoney"),
                        Number::New(isolate, data->LongMarginRatioByMoney));
          /* 跟随交易所投资者多头保证金费 */
          obj_data->Set(String::NewFromUtf8(isolate, "LongMarginRatioByVolume"),
                        Number::New(isolate, data->LongMarginRatioByVolume));
          /* 跟随交易所投资者空头保证金率 */
          obj_data->Set(String::NewFromUtf8(isolate, "ShortMarginRatioByMoney"),
                        Number::New(isolate, data->ShortMarginRatioByMoney));
          /* 跟随交易所投资者空头保证金费 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ShortMarginRatioByVolume"),
              Number::New(isolate, data->ShortMarginRatioByVolume));
          /* 交易所多头保证金率 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchLongMarginRatioByMoney"),
              Number::New(isolate, data->ExchLongMarginRatioByMoney));
          /* 交易所多头保证金费 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchLongMarginRatioByVolume"),
              Number::New(isolate, data->ExchLongMarginRatioByVolume));
          /* 交易所空头保证金率 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchShortMarginRatioByMoney"),
              Number::New(isolate, data->ExchShortMarginRatioByMoney));
          /* 交易所空头保证金费 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchShortMarginRatioByVolume"),
              Number::New(isolate, data->ExchShortMarginRatioByVolume));
          /* 不跟随交易所投资者多头保证金率 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "NoLongMarginRatioByMoney"),
              Number::New(isolate, data->NoLongMarginRatioByMoney));
          /* 不跟随交易所投资者多头保证金费 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "NoLongMarginRatioByVolume"),
              Number::New(isolate, data->NoLongMarginRatioByVolume));
          /* 不跟随交易所投资者空头保证金率 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "NoShortMarginRatioByMoney"),
              Number::New(isolate, data->NoShortMarginRatioByMoney));
          /* 不跟随交易所投资者空头保证金费 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "NoShortMarginRatioByVolume"),
              Number::New(isolate, data->NoShortMarginRatioByVolume));
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_QRY_EXCHANGE_RATE: {
        CThostFtdcExchangeRateField *data =
            static_cast<CThostFtdcExchangeRateField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 源币种 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "FromCurrencyID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->FromCurrencyID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 源币种单位数量 */
          obj_data->Set(String::NewFromUtf8(isolate, "FromCurrencyUnit"),
                        Number::New(isolate, data->FromCurrencyUnit));
          /* 目标币种 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ToCurrencyID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ToCurrencyID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 汇率 */
          obj_data->Set(String::NewFromUtf8(isolate, "ExchangeRate"),
                        Number::New(isolate, data->ExchangeRate));
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_QRY_SEC_AGENT_ACIDMAP: {
        CThostFtdcSecAgentACIDMapField *data =
            static_cast<CThostFtdcSecAgentACIDMapField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 用户代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 资金账户 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "AccountID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->AccountID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 币种 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CurrencyID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CurrencyID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 境外中介机构资金帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerSecAgentID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerSecAgentID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_QRY_PRODUCT_EXCH_RATE: {
        CThostFtdcProductExchRateField *data =
            static_cast<CThostFtdcProductExchRateField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 产品代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ProductID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ProductID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 报价币种类型 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "QuoteCurrencyID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->QuoteCurrencyID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 汇率 */
          obj_data->Set(String::NewFromUtf8(isolate, "ExchangeRate"),
                        Number::New(isolate, data->ExchangeRate));
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_QRY_PRODUCT_GROUP: {
        CThostFtdcProductGroupField *data =
            static_cast<CThostFtdcProductGroupField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 产品代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ProductID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ProductID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易所代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 产品组代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ProductGroupID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ProductGroupID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_QRY_MMINSTRUMENT_COMMISSION_RATE: {
        CThostFtdcMMInstrumentCommissionRateField *data =
            static_cast<CThostFtdcMMInstrumentCommissionRateField *>(
                baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 合约代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InstrumentID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InstrumentID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者范围 */
          obj_data->Set(String::NewFromUtf8(isolate, "InvestorRange"),
                        String::NewFromUtf8(
                            isolate, string(1, data->InvestorRange).c_str()));
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 开仓手续费率 */
          obj_data->Set(String::NewFromUtf8(isolate, "OpenRatioByMoney"),
                        Number::New(isolate, data->OpenRatioByMoney));
          /* 开仓手续费 */
          obj_data->Set(String::NewFromUtf8(isolate, "OpenRatioByVolume"),
                        Number::New(isolate, data->OpenRatioByVolume));
          /* 平仓手续费率 */
          obj_data->Set(String::NewFromUtf8(isolate, "CloseRatioByMoney"),
                        Number::New(isolate, data->CloseRatioByMoney));
          /* 平仓手续费 */
          obj_data->Set(String::NewFromUtf8(isolate, "CloseRatioByVolume"),
                        Number::New(isolate, data->CloseRatioByVolume));
          /* 平今手续费率 */
          obj_data->Set(String::NewFromUtf8(isolate, "CloseTodayRatioByMoney"),
                        Number::New(isolate, data->CloseTodayRatioByMoney));
          /* 平今手续费 */
          obj_data->Set(String::NewFromUtf8(isolate, "CloseTodayRatioByVolume"),
                        Number::New(isolate, data->CloseTodayRatioByVolume));
          /* 交易所代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_QRY_MMOPTION_INSTR_COMM_RATE: {
        CThostFtdcMMOptionInstrCommRateField *data =
            static_cast<CThostFtdcMMOptionInstrCommRateField *>(
                baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 合约代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InstrumentID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InstrumentID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者范围 */
          obj_data->Set(String::NewFromUtf8(isolate, "InvestorRange"),
                        String::NewFromUtf8(
                            isolate, string(1, data->InvestorRange).c_str()));
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 开仓手续费率 */
          obj_data->Set(String::NewFromUtf8(isolate, "OpenRatioByMoney"),
                        Number::New(isolate, data->OpenRatioByMoney));
          /* 开仓手续费 */
          obj_data->Set(String::NewFromUtf8(isolate, "OpenRatioByVolume"),
                        Number::New(isolate, data->OpenRatioByVolume));
          /* 平仓手续费率 */
          obj_data->Set(String::NewFromUtf8(isolate, "CloseRatioByMoney"),
                        Number::New(isolate, data->CloseRatioByMoney));
          /* 平仓手续费 */
          obj_data->Set(String::NewFromUtf8(isolate, "CloseRatioByVolume"),
                        Number::New(isolate, data->CloseRatioByVolume));
          /* 平今手续费率 */
          obj_data->Set(String::NewFromUtf8(isolate, "CloseTodayRatioByMoney"),
                        Number::New(isolate, data->CloseTodayRatioByMoney));
          /* 平今手续费 */
          obj_data->Set(String::NewFromUtf8(isolate, "CloseTodayRatioByVolume"),
                        Number::New(isolate, data->CloseTodayRatioByVolume));
          /* 执行手续费率 */
          obj_data->Set(String::NewFromUtf8(isolate, "StrikeRatioByMoney"),
                        Number::New(isolate, data->StrikeRatioByMoney));
          /* 执行手续费 */
          obj_data->Set(String::NewFromUtf8(isolate, "StrikeRatioByVolume"),
                        Number::New(isolate, data->StrikeRatioByVolume));
          /* 交易所代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_QRY_INSTRUMENT_ORDER_COMM_RATE: {
        CThostFtdcInstrumentOrderCommRateField *data =
            static_cast<CThostFtdcInstrumentOrderCommRateField *>(
                baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 合约代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InstrumentID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InstrumentID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者范围 */
          obj_data->Set(String::NewFromUtf8(isolate, "InvestorRange"),
                        String::NewFromUtf8(
                            isolate, string(1, data->InvestorRange).c_str()));
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易所代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投机套保标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "HedgeFlag"),
              String::NewFromUtf8(isolate, string(1, data->HedgeFlag).c_str()));
          /* 报单手续费 */
          obj_data->Set(String::NewFromUtf8(isolate, "OrderCommByVolume"),
                        Number::New(isolate, data->OrderCommByVolume));
          /* 撤单手续费 */
          obj_data->Set(String::NewFromUtf8(isolate, "OrderActionCommByVolume"),
                        Number::New(isolate, data->OrderActionCommByVolume));
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_QRY_OPTION_INSTR_TRADE_COST: {
        CThostFtdcOptionInstrTradeCostField *data =
            static_cast<CThostFtdcOptionInstrTradeCostField *>(
                baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 合约代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InstrumentID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InstrumentID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投机套保标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "HedgeFlag"),
              String::NewFromUtf8(isolate, string(1, data->HedgeFlag).c_str()));
          /* 期权合约保证金不变部分 */
          obj_data->Set(String::NewFromUtf8(isolate, "FixedMargin"),
                        Number::New(isolate, data->FixedMargin));
          /* 期权合约最小保证金 */
          obj_data->Set(String::NewFromUtf8(isolate, "MiniMargin"),
                        Number::New(isolate, data->MiniMargin));
          /* 期权合约权利金 */
          obj_data->Set(String::NewFromUtf8(isolate, "Royalty"),
                        Number::New(isolate, data->Royalty));
          /* 交易所期权合约保证金不变部分 */
          obj_data->Set(String::NewFromUtf8(isolate, "ExchFixedMargin"),
                        Number::New(isolate, data->ExchFixedMargin));
          /* 交易所期权合约最小保证金 */
          obj_data->Set(String::NewFromUtf8(isolate, "ExchMiniMargin"),
                        Number::New(isolate, data->ExchMiniMargin));
          /* 交易所代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_QRY_OPTION_INSTR_COMM_RATE: {
        CThostFtdcOptionInstrCommRateField *data =
            static_cast<CThostFtdcOptionInstrCommRateField *>(
                baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 合约代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InstrumentID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InstrumentID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者范围 */
          obj_data->Set(String::NewFromUtf8(isolate, "InvestorRange"),
                        String::NewFromUtf8(
                            isolate, string(1, data->InvestorRange).c_str()));
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 开仓手续费率 */
          obj_data->Set(String::NewFromUtf8(isolate, "OpenRatioByMoney"),
                        Number::New(isolate, data->OpenRatioByMoney));
          /* 开仓手续费 */
          obj_data->Set(String::NewFromUtf8(isolate, "OpenRatioByVolume"),
                        Number::New(isolate, data->OpenRatioByVolume));
          /* 平仓手续费率 */
          obj_data->Set(String::NewFromUtf8(isolate, "CloseRatioByMoney"),
                        Number::New(isolate, data->CloseRatioByMoney));
          /* 平仓手续费 */
          obj_data->Set(String::NewFromUtf8(isolate, "CloseRatioByVolume"),
                        Number::New(isolate, data->CloseRatioByVolume));
          /* 平今手续费率 */
          obj_data->Set(String::NewFromUtf8(isolate, "CloseTodayRatioByMoney"),
                        Number::New(isolate, data->CloseTodayRatioByMoney));
          /* 平今手续费 */
          obj_data->Set(String::NewFromUtf8(isolate, "CloseTodayRatioByVolume"),
                        Number::New(isolate, data->CloseTodayRatioByVolume));
          /* 执行手续费率 */
          obj_data->Set(String::NewFromUtf8(isolate, "StrikeRatioByMoney"),
                        Number::New(isolate, data->StrikeRatioByMoney));
          /* 执行手续费 */
          obj_data->Set(String::NewFromUtf8(isolate, "StrikeRatioByVolume"),
                        Number::New(isolate, data->StrikeRatioByVolume));
          /* 交易所代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_QRY_EXEC_ORDER: {
        CThostFtdcExecOrderField *data =
            static_cast<CThostFtdcExecOrderField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 合约代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InstrumentID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InstrumentID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 执行宣告引用 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExecOrderRef"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExecOrderRef),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 用户代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 数量 */
          obj_data->Set(String::NewFromUtf8(isolate, "Volume"),
                        Number::New(isolate, data->Volume));
          /* 请求编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "RequestID"),
                        Number::New(isolate, data->RequestID));
          /* 业务单元 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BusinessUnit"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BusinessUnit),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 开平标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "OffsetFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->OffsetFlag).c_str()));
          /* 投机套保标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "HedgeFlag"),
              String::NewFromUtf8(isolate, string(1, data->HedgeFlag).c_str()));
          /* 执行类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "ActionType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->ActionType).c_str()));
          /* 保留头寸申请的持仓方向 */
          obj_data->Set(String::NewFromUtf8(isolate, "PosiDirection"),
                        String::NewFromUtf8(
                            isolate, string(1, data->PosiDirection).c_str()));
          /* 期权行权后是否保留期货头寸的标记 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ReservePositionFlag"),
              String::NewFromUtf8(
                  isolate, string(1, data->ReservePositionFlag).c_str()));
          /* 期权行权后生成的头寸是否自动平仓 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CloseFlag"),
              String::NewFromUtf8(isolate, string(1, data->CloseFlag).c_str()));
          /* 本地执行宣告编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExecOrderLocalID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExecOrderLocalID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易所代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 会员代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ParticipantID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ParticipantID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 客户代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ClientID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ClientID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 合约在交易所的代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeInstID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeInstID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易所交易员代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TraderID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TraderID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 安装编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "InstallID"),
                        Number::New(isolate, data->InstallID));
          /* 执行宣告提交状态 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "OrderSubmitStatus"),
              String::NewFromUtf8(isolate,
                                  string(1, data->OrderSubmitStatus).c_str()));
          /* 报单提示序号 */
          obj_data->Set(String::NewFromUtf8(isolate, "NotifySequence"),
                        Number::New(isolate, data->NotifySequence));
          /* 交易日 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradingDay"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradingDay),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 结算编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SettlementID"),
                        Number::New(isolate, data->SettlementID));
          /* 执行宣告编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExecOrderSysID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExecOrderSysID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 报单日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InsertDate"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InsertDate),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 插入时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InsertTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InsertTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 撤销时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CancelTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CancelTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 执行结果 */
          obj_data->Set(String::NewFromUtf8(isolate, "ExecResult"),
                        String::NewFromUtf8(
                            isolate, string(1, data->ExecResult).c_str()));
          /* 结算会员编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ClearingPartID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ClearingPartID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 序号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SequenceNo"),
                        Number::New(isolate, data->SequenceNo));
          /* 前置编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "FrontID"),
                        Number::New(isolate, data->FrontID));
          /* 会话编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SessionID"),
                        Number::New(isolate, data->SessionID));
          /* 用户端产品信息 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "UserProductInfo"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->UserProductInfo),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 状态信息 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "StatusMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->StatusMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 操作用户代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ActiveUserID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ActiveUserID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 经纪公司报单编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "BrokerExecOrderSeq"),
                        Number::New(isolate, data->BrokerExecOrderSeq));
          /* 营业部编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BranchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BranchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资单元代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestUnitID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestUnitID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 资金账号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "AccountID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->AccountID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 币种代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CurrencyID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CurrencyID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* IP地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "IPAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->IPAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* Mac地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "MacAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->MacAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_QRY_FOR_QUOTE: {
        CThostFtdcForQuoteField *data =
            static_cast<CThostFtdcForQuoteField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 合约代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InstrumentID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InstrumentID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 询价引用 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ForQuoteRef"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ForQuoteRef),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 用户代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 本地询价编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ForQuoteLocalID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ForQuoteLocalID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易所代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 会员代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ParticipantID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ParticipantID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 客户代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ClientID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ClientID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 合约在交易所的代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeInstID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeInstID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易所交易员代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TraderID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TraderID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 安装编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "InstallID"),
                        Number::New(isolate, data->InstallID));
          /* 报单日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InsertDate"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InsertDate),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 插入时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InsertTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InsertTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 询价状态 */
          obj_data->Set(String::NewFromUtf8(isolate, "ForQuoteStatus"),
                        String::NewFromUtf8(
                            isolate, string(1, data->ForQuoteStatus).c_str()));
          /* 前置编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "FrontID"),
                        Number::New(isolate, data->FrontID));
          /* 会话编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SessionID"),
                        Number::New(isolate, data->SessionID));
          /* 状态信息 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "StatusMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->StatusMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 操作用户代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ActiveUserID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ActiveUserID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 经纪公司询价编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "BrokerForQutoSeq"),
                        Number::New(isolate, data->BrokerForQutoSeq));
          /* 投资单元代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestUnitID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestUnitID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* IP地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "IPAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->IPAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* Mac地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "MacAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->MacAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 营业部编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BranchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BranchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_QRY_QUOTE: {
        CThostFtdcQuoteField *data =
            static_cast<CThostFtdcQuoteField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 合约代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InstrumentID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InstrumentID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 报价引用 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "QuoteRef"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->QuoteRef),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 用户代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 卖价格 */
          obj_data->Set(String::NewFromUtf8(isolate, "AskPrice"),
                        Number::New(isolate, data->AskPrice));
          /* 买价格 */
          obj_data->Set(String::NewFromUtf8(isolate, "BidPrice"),
                        Number::New(isolate, data->BidPrice));
          /* 卖数量 */
          obj_data->Set(String::NewFromUtf8(isolate, "AskVolume"),
                        Number::New(isolate, data->AskVolume));
          /* 买数量 */
          obj_data->Set(String::NewFromUtf8(isolate, "BidVolume"),
                        Number::New(isolate, data->BidVolume));
          /* 请求编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "RequestID"),
                        Number::New(isolate, data->RequestID));
          /* 业务单元 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BusinessUnit"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BusinessUnit),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 卖开平标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "AskOffsetFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->AskOffsetFlag).c_str()));
          /* 买开平标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "BidOffsetFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BidOffsetFlag).c_str()));
          /* 卖投机套保标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "AskHedgeFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->AskHedgeFlag).c_str()));
          /* 买投机套保标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "BidHedgeFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BidHedgeFlag).c_str()));
          /* 本地报价编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "QuoteLocalID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->QuoteLocalID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易所代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 会员代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ParticipantID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ParticipantID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 客户代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ClientID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ClientID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 合约在交易所的代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeInstID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeInstID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易所交易员代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TraderID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TraderID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 安装编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "InstallID"),
                        Number::New(isolate, data->InstallID));
          /* 报价提示序号 */
          obj_data->Set(String::NewFromUtf8(isolate, "NotifySequence"),
                        Number::New(isolate, data->NotifySequence));
          /* 报价提交状态 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "OrderSubmitStatus"),
              String::NewFromUtf8(isolate,
                                  string(1, data->OrderSubmitStatus).c_str()));
          /* 交易日 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradingDay"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradingDay),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 结算编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SettlementID"),
                        Number::New(isolate, data->SettlementID));
          /* 报价编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "QuoteSysID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->QuoteSysID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 报单日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InsertDate"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InsertDate),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 插入时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InsertTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InsertTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 撤销时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CancelTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CancelTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 报价状态 */
          obj_data->Set(String::NewFromUtf8(isolate, "QuoteStatus"),
                        String::NewFromUtf8(
                            isolate, string(1, data->QuoteStatus).c_str()));
          /* 结算会员编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ClearingPartID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ClearingPartID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 序号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SequenceNo"),
                        Number::New(isolate, data->SequenceNo));
          /* 卖方报单编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "AskOrderSysID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->AskOrderSysID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 买方报单编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BidOrderSysID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BidOrderSysID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 前置编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "FrontID"),
                        Number::New(isolate, data->FrontID));
          /* 会话编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SessionID"),
                        Number::New(isolate, data->SessionID));
          /* 用户端产品信息 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "UserProductInfo"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->UserProductInfo),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 状态信息 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "StatusMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->StatusMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 操作用户代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ActiveUserID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ActiveUserID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 经纪公司报价编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "BrokerQuoteSeq"),
                        Number::New(isolate, data->BrokerQuoteSeq));
          /* 衍生卖报单引用 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "AskOrderRef"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->AskOrderRef),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 衍生买报单引用 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BidOrderRef"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BidOrderRef),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 应价编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ForQuoteSysID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ForQuoteSysID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 营业部编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BranchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BranchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资单元代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestUnitID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestUnitID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 资金账号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "AccountID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->AccountID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 币种代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CurrencyID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CurrencyID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* IP地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "IPAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->IPAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* Mac地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "MacAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->MacAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_QRY_LOCK: {
        CThostFtdcLockField *data =
            static_cast<CThostFtdcLockField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 合约代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InstrumentID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InstrumentID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 锁定引用 */
          obj_data->Set(String::NewFromUtf8(isolate, "LockRef"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->LockRef),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 用户代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 数量 */
          obj_data->Set(String::NewFromUtf8(isolate, "Volume"),
                        Number::New(isolate, data->Volume));
          /* 请求编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "RequestID"),
                        Number::New(isolate, data->RequestID));
          /* 业务单元 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BusinessUnit"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BusinessUnit),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 锁定类型 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "LockType"),
              String::NewFromUtf8(isolate, string(1, data->LockType).c_str()));
          /* 本地锁定编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "LockLocalID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->LockLocalID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易所代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 会员代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ParticipantID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ParticipantID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 客户代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ClientID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ClientID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 合约在交易所的代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeInstID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeInstID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易所交易员代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TraderID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TraderID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 安装编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "InstallID"),
                        Number::New(isolate, data->InstallID));
          /* 执行宣告提交状态 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "OrderSubmitStatus"),
              String::NewFromUtf8(isolate,
                                  string(1, data->OrderSubmitStatus).c_str()));
          /* 报单提示序号 */
          obj_data->Set(String::NewFromUtf8(isolate, "NotifySequence"),
                        Number::New(isolate, data->NotifySequence));
          /* 交易日 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradingDay"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradingDay),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 结算编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SettlementID"),
                        Number::New(isolate, data->SettlementID));
          /* 锁定编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "LockSysID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->LockSysID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 报单日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InsertDate"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InsertDate),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 插入时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InsertTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InsertTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 撤销时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CancelTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CancelTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 锁定状态 */
          obj_data->Set(String::NewFromUtf8(isolate, "LockStatus"),
                        String::NewFromUtf8(
                            isolate, string(1, data->LockStatus).c_str()));
          /* 结算会员编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ClearingPartID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ClearingPartID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 序号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SequenceNo"),
                        Number::New(isolate, data->SequenceNo));
          /* 前置编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "FrontID"),
                        Number::New(isolate, data->FrontID));
          /* 会话编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SessionID"),
                        Number::New(isolate, data->SessionID));
          /* 用户端产品信息 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "UserProductInfo"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->UserProductInfo),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 状态信息 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "StatusMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->StatusMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 操作用户代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ActiveUserID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ActiveUserID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 经纪公司报单编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "BrokerLockSeq"),
                        Number::New(isolate, data->BrokerLockSeq));
          /* 营业部编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BranchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BranchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* IP地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "IPAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->IPAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* Mac地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "MacAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->MacAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_QRY_LOCK_POSITION: {
        CThostFtdcLockPositionField *data =
            static_cast<CThostFtdcLockPositionField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 合约代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InstrumentID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InstrumentID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易所代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 数量 */
          obj_data->Set(String::NewFromUtf8(isolate, "Volume"),
                        Number::New(isolate, data->Volume));
          /* 冻结数量 */
          obj_data->Set(String::NewFromUtf8(isolate, "FrozenVolume"),
                        Number::New(isolate, data->FrozenVolume));
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_QRY_ETFOPTION_INSTR_COMM_RATE: {
        CThostFtdcETFOptionInstrCommRateField *data =
            static_cast<CThostFtdcETFOptionInstrCommRateField *>(
                baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 合约代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InstrumentID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InstrumentID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者范围 */
          obj_data->Set(String::NewFromUtf8(isolate, "InvestorRange"),
                        String::NewFromUtf8(
                            isolate, string(1, data->InvestorRange).c_str()));
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 开仓手续费率 */
          obj_data->Set(String::NewFromUtf8(isolate, "OpenRatioByMoney"),
                        Number::New(isolate, data->OpenRatioByMoney));
          /* 开仓手续费 */
          obj_data->Set(String::NewFromUtf8(isolate, "OpenRatioByVolume"),
                        Number::New(isolate, data->OpenRatioByVolume));
          /* 平仓手续费率 */
          obj_data->Set(String::NewFromUtf8(isolate, "CloseRatioByMoney"),
                        Number::New(isolate, data->CloseRatioByMoney));
          /* 平仓手续费 */
          obj_data->Set(String::NewFromUtf8(isolate, "CloseRatioByVolume"),
                        Number::New(isolate, data->CloseRatioByVolume));
          /* 平今手续费率 */
          obj_data->Set(String::NewFromUtf8(isolate, "CloseTodayRatioByMoney"),
                        Number::New(isolate, data->CloseTodayRatioByMoney));
          /* 平今手续费 */
          obj_data->Set(String::NewFromUtf8(isolate, "CloseTodayRatioByVolume"),
                        Number::New(isolate, data->CloseTodayRatioByVolume));
          /* 执行手续费率 */
          obj_data->Set(String::NewFromUtf8(isolate, "StrikeRatioByMoney"),
                        Number::New(isolate, data->StrikeRatioByMoney));
          /* 执行手续费 */
          obj_data->Set(String::NewFromUtf8(isolate, "StrikeRatioByVolume"),
                        Number::New(isolate, data->StrikeRatioByVolume));
          /* 交易所代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投机套保标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "HedgeFlag"),
              String::NewFromUtf8(isolate, string(1, data->HedgeFlag).c_str()));
          /* 持仓方向 */
          obj_data->Set(String::NewFromUtf8(isolate, "PosiDirection"),
                        String::NewFromUtf8(
                            isolate, string(1, data->PosiDirection).c_str()));
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_QRY_INVESTOR_LEVEL: {
        CThostFtdcInvestorLevelField *data =
            static_cast<CThostFtdcInvestorLevelField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易所代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者分级类型 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "LevelType"),
              String::NewFromUtf8(isolate, string(1, data->LevelType).c_str()));
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_QRY_EXEC_FREEZE: {
        CThostFtdcExecFreezeField *data =
            static_cast<CThostFtdcExecFreezeField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 标的合约代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InstrumentID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InstrumentID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易所代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 持仓多空方向 */
          obj_data->Set(String::NewFromUtf8(isolate, "PosiDirection"),
                        String::NewFromUtf8(
                            isolate, string(1, data->PosiDirection).c_str()));
          /* 期权类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "OptionsType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->OptionsType).c_str()));
          /* 冻结的数量_单位股 */
          obj_data->Set(String::NewFromUtf8(isolate, "Volume"),
                        Number::New(isolate, data->Volume));
          /* 冻结金额 */
          obj_data->Set(String::NewFromUtf8(isolate, "FrozenAmount"),
                        Number::New(isolate, data->FrozenAmount));
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_QRY_COMB_INSTRUMENT_GUARD: {
        CThostFtdcCombInstrumentGuardField *data =
            static_cast<CThostFtdcCombInstrumentGuardField *>(
                baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 合约代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InstrumentID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InstrumentID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /*  */
          obj_data->Set(String::NewFromUtf8(isolate, "GuarantRatio"),
                        Number::New(isolate, data->GuarantRatio));
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_QRY_COMB_ACTION: {
        CThostFtdcCombActionField *data =
            static_cast<CThostFtdcCombActionField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 合约代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InstrumentID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InstrumentID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 组合引用 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CombActionRef"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CombActionRef),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 用户代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 买卖方向 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "Direction"),
              String::NewFromUtf8(isolate, string(1, data->Direction).c_str()));
          /* 数量 */
          obj_data->Set(String::NewFromUtf8(isolate, "Volume"),
                        Number::New(isolate, data->Volume));
          /* 组合指令方向 */
          obj_data->Set(String::NewFromUtf8(isolate, "CombDirection"),
                        String::NewFromUtf8(
                            isolate, string(1, data->CombDirection).c_str()));
          /* 投机套保标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "HedgeFlag"),
              String::NewFromUtf8(isolate, string(1, data->HedgeFlag).c_str()));
          /* 本地申请组合编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ActionLocalID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ActionLocalID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易所代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 会员代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ParticipantID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ParticipantID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 客户代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ClientID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ClientID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 合约在交易所的代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeInstID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeInstID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易所交易员代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TraderID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TraderID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 安装编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "InstallID"),
                        Number::New(isolate, data->InstallID));
          /* 组合状态 */
          obj_data->Set(String::NewFromUtf8(isolate, "ActionStatus"),
                        String::NewFromUtf8(
                            isolate, string(1, data->ActionStatus).c_str()));
          /* 报单提示序号 */
          obj_data->Set(String::NewFromUtf8(isolate, "NotifySequence"),
                        Number::New(isolate, data->NotifySequence));
          /* 交易日 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradingDay"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradingDay),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 结算编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SettlementID"),
                        Number::New(isolate, data->SettlementID));
          /* 序号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SequenceNo"),
                        Number::New(isolate, data->SequenceNo));
          /* 前置编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "FrontID"),
                        Number::New(isolate, data->FrontID));
          /* 会话编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SessionID"),
                        Number::New(isolate, data->SessionID));
          /* 用户端产品信息 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "UserProductInfo"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->UserProductInfo),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 状态信息 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "StatusMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->StatusMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* IP地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "IPAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->IPAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* Mac地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "MacAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->MacAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 组合编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ComTradeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ComTradeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 营业部编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BranchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BranchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_QRY_TRANSFER_SERIAL: {
        CThostFtdcTransferSerialField *data =
            static_cast<CThostFtdcTransferSerialField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 平台流水号 */
          obj_data->Set(String::NewFromUtf8(isolate, "PlateSerial"),
                        Number::New(isolate, data->PlateSerial));
          /* 交易发起方日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeDate"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeDate),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradingDay"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradingDay),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeCode"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeCode),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 会话编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SessionID"),
                        Number::New(isolate, data->SessionID));
          /* 银行编码 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->BankID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 银行分支机构编码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankBranchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankBranchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行帐号类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankAccType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankAccType).c_str()));
          /* 银行帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankAccount"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankAccount),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行流水号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankSerial"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankSerial),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货公司编码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期商分支机构代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerBranchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerBranchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货公司帐号类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "FutureAccType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->FutureAccType).c_str()));
          /* 投资者帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "AccountID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->AccountID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货公司流水号 */
          obj_data->Set(String::NewFromUtf8(isolate, "FutureSerial"),
                        Number::New(isolate, data->FutureSerial));
          /* 证件类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "IdCardType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->IdCardType).c_str()));
          /* 证件号码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "IdentifiedCardNo"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->IdentifiedCardNo),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 币种代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CurrencyID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CurrencyID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易金额 */
          obj_data->Set(String::NewFromUtf8(isolate, "TradeAmount"),
                        Number::New(isolate, data->TradeAmount));
          /* 应收客户费用 */
          obj_data->Set(String::NewFromUtf8(isolate, "CustFee"),
                        Number::New(isolate, data->CustFee));
          /* 应收期货公司费用 */
          obj_data->Set(String::NewFromUtf8(isolate, "BrokerFee"),
                        Number::New(isolate, data->BrokerFee));
          /* 有效标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "AvailabilityFlag"),
              String::NewFromUtf8(isolate,
                                  string(1, data->AvailabilityFlag).c_str()));
          /* 操作员 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "OperatorCode"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->OperatorCode),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 新银行帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankNewAccount"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankNewAccount),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 错误代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "ErrorID"),
                        Number::New(isolate, data->ErrorID));
          /* 错误信息 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_QRY_ACCOUNTREGISTER: {
        CThostFtdcAccountregisterField *data =
            static_cast<CThostFtdcAccountregisterField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 交易日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeDay"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeDay),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行编码 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->BankID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 银行分支机构编码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankBranchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankBranchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankAccount"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankAccount),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货公司编码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货公司分支机构编码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerBranchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerBranchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "AccountID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->AccountID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 证件类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "IdCardType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->IdCardType).c_str()));
          /* 证件号码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "IdentifiedCardNo"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->IdentifiedCardNo),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 客户姓名 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CustomerName"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CustomerName),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 币种代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CurrencyID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CurrencyID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 开销户类别 */
          obj_data->Set(String::NewFromUtf8(isolate, "OpenOrDestroy"),
                        String::NewFromUtf8(
                            isolate, string(1, data->OpenOrDestroy).c_str()));
          /* 签约日期 */
          obj_data->Set(String::NewFromUtf8(isolate, "RegDate"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->RegDate),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 解约日期 */
          obj_data->Set(String::NewFromUtf8(isolate, "OutDate"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->OutDate),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 交易ID */
          obj_data->Set(String::NewFromUtf8(isolate, "TID"),
                        Number::New(isolate, data->TID));
          /* 客户类型 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CustType"),
              String::NewFromUtf8(isolate, string(1, data->CustType).c_str()));
          /* 银行帐号类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankAccType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankAccType).c_str()));
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_ERROR: {
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_error = Object::New(isolate);

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 3, argv);
        break;
      }
      case EV_ON_RTN_ORDER: {
        CThostFtdcOrderField *data =
            static_cast<CThostFtdcOrderField *>(baton->data.get());

        Local<Object> obj_data = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 合约代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InstrumentID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InstrumentID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 报单引用 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "OrderRef"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->OrderRef),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 用户代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 报单价格条件 */
          obj_data->Set(String::NewFromUtf8(isolate, "OrderPriceType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->OrderPriceType).c_str()));
          /* 买卖方向 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "Direction"),
              String::NewFromUtf8(isolate, string(1, data->Direction).c_str()));
          /* 组合开平标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CombOffsetFlag"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CombOffsetFlag),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 组合投机套保标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CombHedgeFlag"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CombHedgeFlag),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 价格 */
          obj_data->Set(String::NewFromUtf8(isolate, "LimitPrice"),
                        Number::New(isolate, data->LimitPrice));
          /* 数量 */
          obj_data->Set(String::NewFromUtf8(isolate, "VolumeTotalOriginal"),
                        Number::New(isolate, data->VolumeTotalOriginal));
          /* 有效期类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "TimeCondition"),
                        String::NewFromUtf8(
                            isolate, string(1, data->TimeCondition).c_str()));
          /* GTD日期 */
          obj_data->Set(String::NewFromUtf8(isolate, "GTDDate"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->GTDDate),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 成交量类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "VolumeCondition"),
                        String::NewFromUtf8(
                            isolate, string(1, data->VolumeCondition).c_str()));
          /* 最小成交量 */
          obj_data->Set(String::NewFromUtf8(isolate, "MinVolume"),
                        Number::New(isolate, data->MinVolume));
          /* 触发条件 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ContingentCondition"),
              String::NewFromUtf8(
                  isolate, string(1, data->ContingentCondition).c_str()));
          /* 止损价 */
          obj_data->Set(String::NewFromUtf8(isolate, "StopPrice"),
                        Number::New(isolate, data->StopPrice));
          /* 强平原因 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ForceCloseReason"),
              String::NewFromUtf8(isolate,
                                  string(1, data->ForceCloseReason).c_str()));
          /* 自动挂起标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "IsAutoSuspend"),
                        Number::New(isolate, data->IsAutoSuspend));
          /* 业务单元 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BusinessUnit"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BusinessUnit),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 请求编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "RequestID"),
                        Number::New(isolate, data->RequestID));
          /* 本地报单编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "OrderLocalID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->OrderLocalID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易所代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 会员代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ParticipantID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ParticipantID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 客户代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ClientID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ClientID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 合约在交易所的代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeInstID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeInstID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易所交易员代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TraderID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TraderID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 安装编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "InstallID"),
                        Number::New(isolate, data->InstallID));
          /* 报单提交状态 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "OrderSubmitStatus"),
              String::NewFromUtf8(isolate,
                                  string(1, data->OrderSubmitStatus).c_str()));
          /* 报单提示序号 */
          obj_data->Set(String::NewFromUtf8(isolate, "NotifySequence"),
                        Number::New(isolate, data->NotifySequence));
          /* 交易日 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradingDay"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradingDay),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 结算编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SettlementID"),
                        Number::New(isolate, data->SettlementID));
          /* 报单编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "OrderSysID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->OrderSysID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 报单来源 */
          obj_data->Set(String::NewFromUtf8(isolate, "OrderSource"),
                        String::NewFromUtf8(
                            isolate, string(1, data->OrderSource).c_str()));
          /* 报单状态 */
          obj_data->Set(String::NewFromUtf8(isolate, "OrderStatus"),
                        String::NewFromUtf8(
                            isolate, string(1, data->OrderStatus).c_str()));
          /* 报单类型 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "OrderType"),
              String::NewFromUtf8(isolate, string(1, data->OrderType).c_str()));
          /* 今成交数量 */
          obj_data->Set(String::NewFromUtf8(isolate, "VolumeTraded"),
                        Number::New(isolate, data->VolumeTraded));
          /* 剩余数量 */
          obj_data->Set(String::NewFromUtf8(isolate, "VolumeTotal"),
                        Number::New(isolate, data->VolumeTotal));
          /* 报单日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InsertDate"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InsertDate),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 委托时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InsertTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InsertTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 激活时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ActiveTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ActiveTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 挂起时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "SuspendTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->SuspendTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 最后修改时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "UpdateTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->UpdateTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 撤销时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CancelTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CancelTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 最后修改交易所交易员代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ActiveTraderID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ActiveTraderID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 结算会员编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ClearingPartID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ClearingPartID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 序号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SequenceNo"),
                        Number::New(isolate, data->SequenceNo));
          /* 前置编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "FrontID"),
                        Number::New(isolate, data->FrontID));
          /* 会话编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SessionID"),
                        Number::New(isolate, data->SessionID));
          /* 用户端产品信息 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "UserProductInfo"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->UserProductInfo),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 状态信息 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "StatusMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->StatusMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 用户强评标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserForceClose"),
                        Number::New(isolate, data->UserForceClose));
          /* 操作用户代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ActiveUserID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ActiveUserID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 经纪公司报单编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "BrokerOrderSeq"),
                        Number::New(isolate, data->BrokerOrderSeq));
          /* 相关报单 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "RelativeOrderSysID"),
              String::NewFromOneByte(isolate, reinterpret_cast<uint8_t *>(
                                                  data->RelativeOrderSysID),
                                     NewStringType::kNormal)
                  .ToLocalChecked());
          /* 郑商所成交数量 */
          obj_data->Set(String::NewFromUtf8(isolate, "ZCETotalTradedVolume"),
                        Number::New(isolate, data->ZCETotalTradedVolume));
          /* 互换单标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "IsSwapOrder"),
                        Number::New(isolate, data->IsSwapOrder));
          /* 营业部编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BranchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BranchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资单元代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestUnitID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestUnitID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 资金账号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "AccountID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->AccountID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 币种代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CurrencyID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CurrencyID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* IP地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "IPAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->IPAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* Mac地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "MacAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->MacAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data};
        MakeCallback(isolate, ctx, cb, 1, argv);
        break;
      }
      case EV_ON_RTN_TRADE: {
        CThostFtdcTradeField *data =
            static_cast<CThostFtdcTradeField *>(baton->data.get());

        Local<Object> obj_data = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 合约代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InstrumentID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InstrumentID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 报单引用 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "OrderRef"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->OrderRef),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 用户代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 交易所代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 成交编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "TradeID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->TradeID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 买卖方向 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "Direction"),
              String::NewFromUtf8(isolate, string(1, data->Direction).c_str()));
          /* 报单编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "OrderSysID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->OrderSysID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 会员代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ParticipantID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ParticipantID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 客户代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ClientID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ClientID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易角色 */
          obj_data->Set(String::NewFromUtf8(isolate, "TradingRole"),
                        String::NewFromUtf8(
                            isolate, string(1, data->TradingRole).c_str()));
          /* 合约在交易所的代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeInstID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeInstID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 开平标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "OffsetFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->OffsetFlag).c_str()));
          /* 投机套保标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "HedgeFlag"),
              String::NewFromUtf8(isolate, string(1, data->HedgeFlag).c_str()));
          /* 价格 */
          obj_data->Set(String::NewFromUtf8(isolate, "Price"),
                        Number::New(isolate, data->Price));
          /* 数量 */
          obj_data->Set(String::NewFromUtf8(isolate, "Volume"),
                        Number::New(isolate, data->Volume));
          /* 成交时期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeDate"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeDate),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 成交时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 成交类型 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeType"),
              String::NewFromUtf8(isolate, string(1, data->TradeType).c_str()));
          /* 成交价来源 */
          obj_data->Set(String::NewFromUtf8(isolate, "PriceSource"),
                        String::NewFromUtf8(
                            isolate, string(1, data->PriceSource).c_str()));
          /* 交易所交易员代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TraderID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TraderID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 本地报单编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "OrderLocalID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->OrderLocalID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 结算会员编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ClearingPartID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ClearingPartID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 业务单元 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BusinessUnit"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BusinessUnit),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 序号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SequenceNo"),
                        Number::New(isolate, data->SequenceNo));
          /* 交易日 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradingDay"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradingDay),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 结算编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SettlementID"),
                        Number::New(isolate, data->SettlementID));
          /* 经纪公司报单编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "BrokerOrderSeq"),
                        Number::New(isolate, data->BrokerOrderSeq));
          /* 成交来源 */
          obj_data->Set(String::NewFromUtf8(isolate, "TradeSource"),
                        String::NewFromUtf8(
                            isolate, string(1, data->TradeSource).c_str()));
        }

        Local<Value> argv[] = {obj_data};
        MakeCallback(isolate, ctx, cb, 1, argv);
        break;
      }
      case EV_ON_ERR_RTN_ORDER_INSERT: {
        CThostFtdcInputOrderField *data =
            static_cast<CThostFtdcInputOrderField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 合约代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InstrumentID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InstrumentID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 报单引用 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "OrderRef"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->OrderRef),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 用户代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 报单价格条件 */
          obj_data->Set(String::NewFromUtf8(isolate, "OrderPriceType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->OrderPriceType).c_str()));
          /* 买卖方向 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "Direction"),
              String::NewFromUtf8(isolate, string(1, data->Direction).c_str()));
          /* 组合开平标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CombOffsetFlag"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CombOffsetFlag),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 组合投机套保标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CombHedgeFlag"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CombHedgeFlag),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 价格 */
          obj_data->Set(String::NewFromUtf8(isolate, "LimitPrice"),
                        Number::New(isolate, data->LimitPrice));
          /* 数量 */
          obj_data->Set(String::NewFromUtf8(isolate, "VolumeTotalOriginal"),
                        Number::New(isolate, data->VolumeTotalOriginal));
          /* 有效期类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "TimeCondition"),
                        String::NewFromUtf8(
                            isolate, string(1, data->TimeCondition).c_str()));
          /* GTD日期 */
          obj_data->Set(String::NewFromUtf8(isolate, "GTDDate"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->GTDDate),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 成交量类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "VolumeCondition"),
                        String::NewFromUtf8(
                            isolate, string(1, data->VolumeCondition).c_str()));
          /* 最小成交量 */
          obj_data->Set(String::NewFromUtf8(isolate, "MinVolume"),
                        Number::New(isolate, data->MinVolume));
          /* 触发条件 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ContingentCondition"),
              String::NewFromUtf8(
                  isolate, string(1, data->ContingentCondition).c_str()));
          /* 止损价 */
          obj_data->Set(String::NewFromUtf8(isolate, "StopPrice"),
                        Number::New(isolate, data->StopPrice));
          /* 强平原因 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ForceCloseReason"),
              String::NewFromUtf8(isolate,
                                  string(1, data->ForceCloseReason).c_str()));
          /* 自动挂起标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "IsAutoSuspend"),
                        Number::New(isolate, data->IsAutoSuspend));
          /* 业务单元 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BusinessUnit"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BusinessUnit),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 请求编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "RequestID"),
                        Number::New(isolate, data->RequestID));
          /* 用户强评标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserForceClose"),
                        Number::New(isolate, data->UserForceClose));
          /* 互换单标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "IsSwapOrder"),
                        Number::New(isolate, data->IsSwapOrder));
          /* 交易所代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资单元代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestUnitID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestUnitID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 资金账号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "AccountID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->AccountID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 币种代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CurrencyID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CurrencyID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易编码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ClientID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ClientID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* IP地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "IPAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->IPAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* Mac地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "MacAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->MacAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error};
        MakeCallback(isolate, ctx, cb, 2, argv);
        break;
      }
      case EV_ON_ERR_RTN_ORDER_ACTION: {
        CThostFtdcOrderActionField *data =
            static_cast<CThostFtdcOrderActionField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 报单操作引用 */
          obj_data->Set(String::NewFromUtf8(isolate, "OrderActionRef"),
                        Number::New(isolate, data->OrderActionRef));
          /* 报单引用 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "OrderRef"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->OrderRef),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 请求编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "RequestID"),
                        Number::New(isolate, data->RequestID));
          /* 前置编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "FrontID"),
                        Number::New(isolate, data->FrontID));
          /* 会话编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SessionID"),
                        Number::New(isolate, data->SessionID));
          /* 交易所代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 报单编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "OrderSysID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->OrderSysID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 操作标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "ActionFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->ActionFlag).c_str()));
          /* 价格 */
          obj_data->Set(String::NewFromUtf8(isolate, "LimitPrice"),
                        Number::New(isolate, data->LimitPrice));
          /* 数量变化 */
          obj_data->Set(String::NewFromUtf8(isolate, "VolumeChange"),
                        Number::New(isolate, data->VolumeChange));
          /* 操作日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ActionDate"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ActionDate),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 操作时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ActionTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ActionTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易所交易员代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TraderID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TraderID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 安装编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "InstallID"),
                        Number::New(isolate, data->InstallID));
          /* 本地报单编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "OrderLocalID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->OrderLocalID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 操作本地编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ActionLocalID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ActionLocalID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 会员代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ParticipantID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ParticipantID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 客户代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ClientID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ClientID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 业务单元 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BusinessUnit"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BusinessUnit),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 报单操作状态 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "OrderActionStatus"),
              String::NewFromUtf8(isolate,
                                  string(1, data->OrderActionStatus).c_str()));
          /* 用户代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 状态信息 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "StatusMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->StatusMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 合约代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InstrumentID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InstrumentID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 营业部编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BranchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BranchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资单元代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestUnitID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestUnitID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* IP地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "IPAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->IPAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* Mac地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "MacAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->MacAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error};
        MakeCallback(isolate, ctx, cb, 2, argv);
        break;
      }
      case EV_ON_RTN_INSTRUMENT_STATUS: {
        CThostFtdcInstrumentStatusField *data =
            static_cast<CThostFtdcInstrumentStatusField *>(baton->data.get());

        Local<Object> obj_data = Object::New(isolate);

        if (data) {
          /* 交易所代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 合约在交易所的代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeInstID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeInstID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 结算组代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "SettlementGroupID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->SettlementGroupID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 合约代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InstrumentID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InstrumentID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 合约交易状态 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InstrumentStatus"),
              String::NewFromUtf8(isolate,
                                  string(1, data->InstrumentStatus).c_str()));
          /* 交易阶段编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "TradingSegmentSN"),
                        Number::New(isolate, data->TradingSegmentSN));
          /* 进入本状态时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "EnterTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->EnterTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 进入本状态原因 */
          obj_data->Set(String::NewFromUtf8(isolate, "EnterReason"),
                        String::NewFromUtf8(
                            isolate, string(1, data->EnterReason).c_str()));
        }

        Local<Value> argv[] = {obj_data};
        MakeCallback(isolate, ctx, cb, 1, argv);
        break;
      }
      case EV_ON_RTN_BULLETIN: {
        CThostFtdcBulletinField *data =
            static_cast<CThostFtdcBulletinField *>(baton->data.get());

        Local<Object> obj_data = Object::New(isolate);

        if (data) {
          /* 交易所代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易日 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradingDay"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradingDay),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 公告编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "BulletinID"),
                        Number::New(isolate, data->BulletinID));
          /* 序列号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SequenceNo"),
                        Number::New(isolate, data->SequenceNo));
          /* 公告类型 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "NewsType"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->NewsType),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 紧急程度 */
          obj_data->Set(String::NewFromUtf8(isolate, "NewsUrgency"),
                        String::NewFromUtf8(
                            isolate, string(1, data->NewsUrgency).c_str()));
          /* 发送时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "SendTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->SendTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 消息摘要 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "Abstract"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->Abstract),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 消息来源 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ComeFrom"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ComeFrom),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 消息正文 */
          obj_data->Set(String::NewFromUtf8(isolate, "Content"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->Content),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* WEB地址 */
          obj_data->Set(String::NewFromUtf8(isolate, "URLLink"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->URLLink),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 市场代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "MarketID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->MarketID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data};
        MakeCallback(isolate, ctx, cb, 1, argv);
        break;
      }
      case EV_ON_RTN_TRADING_NOTICE: {
        CThostFtdcTradingNoticeInfoField *data =
            static_cast<CThostFtdcTradingNoticeInfoField *>(baton->data.get());

        Local<Object> obj_data = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 发送时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "SendTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->SendTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 消息正文 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "FieldContent"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->FieldContent),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 序列系列号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SequenceSeries"),
                        Number::New(isolate, data->SequenceSeries));
          /* 序列号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SequenceNo"),
                        Number::New(isolate, data->SequenceNo));
        }

        Local<Value> argv[] = {obj_data};
        MakeCallback(isolate, ctx, cb, 1, argv);
        break;
      }
      case EV_ON_RTN_ERROR_CONDITIONAL_ORDER: {
        CThostFtdcErrorConditionalOrderField *data =
            static_cast<CThostFtdcErrorConditionalOrderField *>(
                baton->data.get());

        Local<Object> obj_data = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 合约代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InstrumentID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InstrumentID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 报单引用 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "OrderRef"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->OrderRef),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 用户代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 报单价格条件 */
          obj_data->Set(String::NewFromUtf8(isolate, "OrderPriceType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->OrderPriceType).c_str()));
          /* 买卖方向 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "Direction"),
              String::NewFromUtf8(isolate, string(1, data->Direction).c_str()));
          /* 组合开平标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CombOffsetFlag"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CombOffsetFlag),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 组合投机套保标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CombHedgeFlag"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CombHedgeFlag),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 价格 */
          obj_data->Set(String::NewFromUtf8(isolate, "LimitPrice"),
                        Number::New(isolate, data->LimitPrice));
          /* 数量 */
          obj_data->Set(String::NewFromUtf8(isolate, "VolumeTotalOriginal"),
                        Number::New(isolate, data->VolumeTotalOriginal));
          /* 有效期类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "TimeCondition"),
                        String::NewFromUtf8(
                            isolate, string(1, data->TimeCondition).c_str()));
          /* GTD日期 */
          obj_data->Set(String::NewFromUtf8(isolate, "GTDDate"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->GTDDate),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 成交量类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "VolumeCondition"),
                        String::NewFromUtf8(
                            isolate, string(1, data->VolumeCondition).c_str()));
          /* 最小成交量 */
          obj_data->Set(String::NewFromUtf8(isolate, "MinVolume"),
                        Number::New(isolate, data->MinVolume));
          /* 触发条件 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ContingentCondition"),
              String::NewFromUtf8(
                  isolate, string(1, data->ContingentCondition).c_str()));
          /* 止损价 */
          obj_data->Set(String::NewFromUtf8(isolate, "StopPrice"),
                        Number::New(isolate, data->StopPrice));
          /* 强平原因 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ForceCloseReason"),
              String::NewFromUtf8(isolate,
                                  string(1, data->ForceCloseReason).c_str()));
          /* 自动挂起标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "IsAutoSuspend"),
                        Number::New(isolate, data->IsAutoSuspend));
          /* 业务单元 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BusinessUnit"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BusinessUnit),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 请求编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "RequestID"),
                        Number::New(isolate, data->RequestID));
          /* 本地报单编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "OrderLocalID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->OrderLocalID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易所代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 会员代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ParticipantID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ParticipantID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 客户代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ClientID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ClientID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 合约在交易所的代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeInstID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeInstID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易所交易员代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TraderID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TraderID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 安装编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "InstallID"),
                        Number::New(isolate, data->InstallID));
          /* 报单提交状态 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "OrderSubmitStatus"),
              String::NewFromUtf8(isolate,
                                  string(1, data->OrderSubmitStatus).c_str()));
          /* 报单提示序号 */
          obj_data->Set(String::NewFromUtf8(isolate, "NotifySequence"),
                        Number::New(isolate, data->NotifySequence));
          /* 交易日 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradingDay"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradingDay),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 结算编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SettlementID"),
                        Number::New(isolate, data->SettlementID));
          /* 报单编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "OrderSysID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->OrderSysID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 报单来源 */
          obj_data->Set(String::NewFromUtf8(isolate, "OrderSource"),
                        String::NewFromUtf8(
                            isolate, string(1, data->OrderSource).c_str()));
          /* 报单状态 */
          obj_data->Set(String::NewFromUtf8(isolate, "OrderStatus"),
                        String::NewFromUtf8(
                            isolate, string(1, data->OrderStatus).c_str()));
          /* 报单类型 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "OrderType"),
              String::NewFromUtf8(isolate, string(1, data->OrderType).c_str()));
          /* 今成交数量 */
          obj_data->Set(String::NewFromUtf8(isolate, "VolumeTraded"),
                        Number::New(isolate, data->VolumeTraded));
          /* 剩余数量 */
          obj_data->Set(String::NewFromUtf8(isolate, "VolumeTotal"),
                        Number::New(isolate, data->VolumeTotal));
          /* 报单日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InsertDate"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InsertDate),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 委托时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InsertTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InsertTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 激活时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ActiveTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ActiveTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 挂起时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "SuspendTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->SuspendTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 最后修改时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "UpdateTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->UpdateTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 撤销时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CancelTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CancelTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 最后修改交易所交易员代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ActiveTraderID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ActiveTraderID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 结算会员编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ClearingPartID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ClearingPartID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 序号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SequenceNo"),
                        Number::New(isolate, data->SequenceNo));
          /* 前置编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "FrontID"),
                        Number::New(isolate, data->FrontID));
          /* 会话编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SessionID"),
                        Number::New(isolate, data->SessionID));
          /* 用户端产品信息 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "UserProductInfo"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->UserProductInfo),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 状态信息 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "StatusMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->StatusMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 用户强评标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserForceClose"),
                        Number::New(isolate, data->UserForceClose));
          /* 操作用户代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ActiveUserID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ActiveUserID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 经纪公司报单编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "BrokerOrderSeq"),
                        Number::New(isolate, data->BrokerOrderSeq));
          /* 相关报单 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "RelativeOrderSysID"),
              String::NewFromOneByte(isolate, reinterpret_cast<uint8_t *>(
                                                  data->RelativeOrderSysID),
                                     NewStringType::kNormal)
                  .ToLocalChecked());
          /* 郑商所成交数量 */
          obj_data->Set(String::NewFromUtf8(isolate, "ZCETotalTradedVolume"),
                        Number::New(isolate, data->ZCETotalTradedVolume));
          /* 错误代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "ErrorID"),
                        Number::New(isolate, data->ErrorID));
          /* 错误信息 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 互换单标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "IsSwapOrder"),
                        Number::New(isolate, data->IsSwapOrder));
          /* 营业部编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BranchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BranchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资单元代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestUnitID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestUnitID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 资金账号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "AccountID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->AccountID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 币种代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CurrencyID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CurrencyID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* IP地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "IPAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->IPAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* Mac地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "MacAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->MacAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data};
        MakeCallback(isolate, ctx, cb, 1, argv);
        break;
      }
      case EV_ON_RTN_EXEC_ORDER: {
        CThostFtdcExecOrderField *data =
            static_cast<CThostFtdcExecOrderField *>(baton->data.get());

        Local<Object> obj_data = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 合约代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InstrumentID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InstrumentID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 执行宣告引用 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExecOrderRef"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExecOrderRef),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 用户代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 数量 */
          obj_data->Set(String::NewFromUtf8(isolate, "Volume"),
                        Number::New(isolate, data->Volume));
          /* 请求编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "RequestID"),
                        Number::New(isolate, data->RequestID));
          /* 业务单元 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BusinessUnit"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BusinessUnit),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 开平标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "OffsetFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->OffsetFlag).c_str()));
          /* 投机套保标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "HedgeFlag"),
              String::NewFromUtf8(isolate, string(1, data->HedgeFlag).c_str()));
          /* 执行类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "ActionType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->ActionType).c_str()));
          /* 保留头寸申请的持仓方向 */
          obj_data->Set(String::NewFromUtf8(isolate, "PosiDirection"),
                        String::NewFromUtf8(
                            isolate, string(1, data->PosiDirection).c_str()));
          /* 期权行权后是否保留期货头寸的标记 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ReservePositionFlag"),
              String::NewFromUtf8(
                  isolate, string(1, data->ReservePositionFlag).c_str()));
          /* 期权行权后生成的头寸是否自动平仓 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CloseFlag"),
              String::NewFromUtf8(isolate, string(1, data->CloseFlag).c_str()));
          /* 本地执行宣告编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExecOrderLocalID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExecOrderLocalID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易所代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 会员代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ParticipantID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ParticipantID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 客户代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ClientID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ClientID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 合约在交易所的代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeInstID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeInstID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易所交易员代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TraderID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TraderID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 安装编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "InstallID"),
                        Number::New(isolate, data->InstallID));
          /* 执行宣告提交状态 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "OrderSubmitStatus"),
              String::NewFromUtf8(isolate,
                                  string(1, data->OrderSubmitStatus).c_str()));
          /* 报单提示序号 */
          obj_data->Set(String::NewFromUtf8(isolate, "NotifySequence"),
                        Number::New(isolate, data->NotifySequence));
          /* 交易日 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradingDay"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradingDay),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 结算编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SettlementID"),
                        Number::New(isolate, data->SettlementID));
          /* 执行宣告编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExecOrderSysID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExecOrderSysID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 报单日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InsertDate"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InsertDate),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 插入时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InsertTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InsertTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 撤销时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CancelTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CancelTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 执行结果 */
          obj_data->Set(String::NewFromUtf8(isolate, "ExecResult"),
                        String::NewFromUtf8(
                            isolate, string(1, data->ExecResult).c_str()));
          /* 结算会员编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ClearingPartID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ClearingPartID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 序号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SequenceNo"),
                        Number::New(isolate, data->SequenceNo));
          /* 前置编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "FrontID"),
                        Number::New(isolate, data->FrontID));
          /* 会话编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SessionID"),
                        Number::New(isolate, data->SessionID));
          /* 用户端产品信息 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "UserProductInfo"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->UserProductInfo),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 状态信息 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "StatusMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->StatusMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 操作用户代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ActiveUserID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ActiveUserID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 经纪公司报单编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "BrokerExecOrderSeq"),
                        Number::New(isolate, data->BrokerExecOrderSeq));
          /* 营业部编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BranchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BranchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资单元代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestUnitID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestUnitID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 资金账号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "AccountID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->AccountID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 币种代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CurrencyID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CurrencyID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* IP地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "IPAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->IPAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* Mac地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "MacAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->MacAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data};
        MakeCallback(isolate, ctx, cb, 1, argv);
        break;
      }
      case EV_ON_ERR_RTN_EXEC_ORDER_INSERT: {
        CThostFtdcInputExecOrderField *data =
            static_cast<CThostFtdcInputExecOrderField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 合约代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InstrumentID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InstrumentID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 执行宣告引用 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExecOrderRef"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExecOrderRef),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 用户代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 数量 */
          obj_data->Set(String::NewFromUtf8(isolate, "Volume"),
                        Number::New(isolate, data->Volume));
          /* 请求编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "RequestID"),
                        Number::New(isolate, data->RequestID));
          /* 业务单元 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BusinessUnit"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BusinessUnit),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 开平标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "OffsetFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->OffsetFlag).c_str()));
          /* 投机套保标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "HedgeFlag"),
              String::NewFromUtf8(isolate, string(1, data->HedgeFlag).c_str()));
          /* 执行类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "ActionType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->ActionType).c_str()));
          /* 保留头寸申请的持仓方向 */
          obj_data->Set(String::NewFromUtf8(isolate, "PosiDirection"),
                        String::NewFromUtf8(
                            isolate, string(1, data->PosiDirection).c_str()));
          /* 期权行权后是否保留期货头寸的标记 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ReservePositionFlag"),
              String::NewFromUtf8(
                  isolate, string(1, data->ReservePositionFlag).c_str()));
          /* 期权行权后生成的头寸是否自动平仓 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CloseFlag"),
              String::NewFromUtf8(isolate, string(1, data->CloseFlag).c_str()));
          /* 交易所代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资单元代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestUnitID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestUnitID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 资金账号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "AccountID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->AccountID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 币种代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CurrencyID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CurrencyID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易编码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ClientID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ClientID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* IP地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "IPAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->IPAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* Mac地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "MacAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->MacAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error};
        MakeCallback(isolate, ctx, cb, 2, argv);
        break;
      }
      case EV_ON_ERR_RTN_EXEC_ORDER_ACTION: {
        CThostFtdcExecOrderActionField *data =
            static_cast<CThostFtdcExecOrderActionField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 执行宣告操作引用 */
          obj_data->Set(String::NewFromUtf8(isolate, "ExecOrderActionRef"),
                        Number::New(isolate, data->ExecOrderActionRef));
          /* 执行宣告引用 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExecOrderRef"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExecOrderRef),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 请求编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "RequestID"),
                        Number::New(isolate, data->RequestID));
          /* 前置编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "FrontID"),
                        Number::New(isolate, data->FrontID));
          /* 会话编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SessionID"),
                        Number::New(isolate, data->SessionID));
          /* 交易所代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 执行宣告操作编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExecOrderSysID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExecOrderSysID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 操作标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "ActionFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->ActionFlag).c_str()));
          /* 操作日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ActionDate"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ActionDate),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 操作时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ActionTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ActionTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易所交易员代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TraderID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TraderID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 安装编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "InstallID"),
                        Number::New(isolate, data->InstallID));
          /* 本地执行宣告编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExecOrderLocalID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExecOrderLocalID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 操作本地编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ActionLocalID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ActionLocalID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 会员代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ParticipantID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ParticipantID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 客户代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ClientID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ClientID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 业务单元 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BusinessUnit"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BusinessUnit),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 报单操作状态 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "OrderActionStatus"),
              String::NewFromUtf8(isolate,
                                  string(1, data->OrderActionStatus).c_str()));
          /* 用户代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 执行类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "ActionType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->ActionType).c_str()));
          /* 状态信息 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "StatusMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->StatusMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 合约代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InstrumentID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InstrumentID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 营业部编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BranchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BranchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资单元代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestUnitID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestUnitID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* IP地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "IPAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->IPAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* Mac地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "MacAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->MacAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error};
        MakeCallback(isolate, ctx, cb, 2, argv);
        break;
      }
      case EV_ON_ERR_RTN_FOR_QUOTE_INSERT: {
        CThostFtdcInputForQuoteField *data =
            static_cast<CThostFtdcInputForQuoteField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 合约代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InstrumentID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InstrumentID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 询价引用 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ForQuoteRef"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ForQuoteRef),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 用户代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 交易所代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资单元代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestUnitID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestUnitID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* IP地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "IPAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->IPAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* Mac地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "MacAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->MacAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error};
        MakeCallback(isolate, ctx, cb, 2, argv);
        break;
      }
      case EV_ON_RTN_QUOTE: {
        CThostFtdcQuoteField *data =
            static_cast<CThostFtdcQuoteField *>(baton->data.get());

        Local<Object> obj_data = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 合约代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InstrumentID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InstrumentID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 报价引用 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "QuoteRef"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->QuoteRef),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 用户代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 卖价格 */
          obj_data->Set(String::NewFromUtf8(isolate, "AskPrice"),
                        Number::New(isolate, data->AskPrice));
          /* 买价格 */
          obj_data->Set(String::NewFromUtf8(isolate, "BidPrice"),
                        Number::New(isolate, data->BidPrice));
          /* 卖数量 */
          obj_data->Set(String::NewFromUtf8(isolate, "AskVolume"),
                        Number::New(isolate, data->AskVolume));
          /* 买数量 */
          obj_data->Set(String::NewFromUtf8(isolate, "BidVolume"),
                        Number::New(isolate, data->BidVolume));
          /* 请求编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "RequestID"),
                        Number::New(isolate, data->RequestID));
          /* 业务单元 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BusinessUnit"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BusinessUnit),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 卖开平标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "AskOffsetFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->AskOffsetFlag).c_str()));
          /* 买开平标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "BidOffsetFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BidOffsetFlag).c_str()));
          /* 卖投机套保标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "AskHedgeFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->AskHedgeFlag).c_str()));
          /* 买投机套保标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "BidHedgeFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BidHedgeFlag).c_str()));
          /* 本地报价编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "QuoteLocalID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->QuoteLocalID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易所代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 会员代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ParticipantID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ParticipantID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 客户代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ClientID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ClientID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 合约在交易所的代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeInstID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeInstID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易所交易员代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TraderID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TraderID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 安装编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "InstallID"),
                        Number::New(isolate, data->InstallID));
          /* 报价提示序号 */
          obj_data->Set(String::NewFromUtf8(isolate, "NotifySequence"),
                        Number::New(isolate, data->NotifySequence));
          /* 报价提交状态 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "OrderSubmitStatus"),
              String::NewFromUtf8(isolate,
                                  string(1, data->OrderSubmitStatus).c_str()));
          /* 交易日 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradingDay"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradingDay),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 结算编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SettlementID"),
                        Number::New(isolate, data->SettlementID));
          /* 报价编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "QuoteSysID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->QuoteSysID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 报单日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InsertDate"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InsertDate),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 插入时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InsertTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InsertTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 撤销时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CancelTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CancelTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 报价状态 */
          obj_data->Set(String::NewFromUtf8(isolate, "QuoteStatus"),
                        String::NewFromUtf8(
                            isolate, string(1, data->QuoteStatus).c_str()));
          /* 结算会员编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ClearingPartID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ClearingPartID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 序号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SequenceNo"),
                        Number::New(isolate, data->SequenceNo));
          /* 卖方报单编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "AskOrderSysID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->AskOrderSysID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 买方报单编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BidOrderSysID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BidOrderSysID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 前置编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "FrontID"),
                        Number::New(isolate, data->FrontID));
          /* 会话编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SessionID"),
                        Number::New(isolate, data->SessionID));
          /* 用户端产品信息 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "UserProductInfo"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->UserProductInfo),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 状态信息 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "StatusMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->StatusMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 操作用户代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ActiveUserID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ActiveUserID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 经纪公司报价编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "BrokerQuoteSeq"),
                        Number::New(isolate, data->BrokerQuoteSeq));
          /* 衍生卖报单引用 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "AskOrderRef"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->AskOrderRef),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 衍生买报单引用 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BidOrderRef"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BidOrderRef),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 应价编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ForQuoteSysID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ForQuoteSysID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 营业部编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BranchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BranchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资单元代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestUnitID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestUnitID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 资金账号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "AccountID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->AccountID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 币种代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CurrencyID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CurrencyID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* IP地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "IPAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->IPAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* Mac地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "MacAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->MacAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data};
        MakeCallback(isolate, ctx, cb, 1, argv);
        break;
      }
      case EV_ON_ERR_RTN_QUOTE_INSERT: {
        CThostFtdcInputQuoteField *data =
            static_cast<CThostFtdcInputQuoteField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 合约代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InstrumentID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InstrumentID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 报价引用 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "QuoteRef"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->QuoteRef),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 用户代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 卖价格 */
          obj_data->Set(String::NewFromUtf8(isolate, "AskPrice"),
                        Number::New(isolate, data->AskPrice));
          /* 买价格 */
          obj_data->Set(String::NewFromUtf8(isolate, "BidPrice"),
                        Number::New(isolate, data->BidPrice));
          /* 卖数量 */
          obj_data->Set(String::NewFromUtf8(isolate, "AskVolume"),
                        Number::New(isolate, data->AskVolume));
          /* 买数量 */
          obj_data->Set(String::NewFromUtf8(isolate, "BidVolume"),
                        Number::New(isolate, data->BidVolume));
          /* 请求编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "RequestID"),
                        Number::New(isolate, data->RequestID));
          /* 业务单元 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BusinessUnit"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BusinessUnit),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 卖开平标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "AskOffsetFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->AskOffsetFlag).c_str()));
          /* 买开平标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "BidOffsetFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BidOffsetFlag).c_str()));
          /* 卖投机套保标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "AskHedgeFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->AskHedgeFlag).c_str()));
          /* 买投机套保标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "BidHedgeFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BidHedgeFlag).c_str()));
          /* 衍生卖报单引用 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "AskOrderRef"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->AskOrderRef),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 衍生买报单引用 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BidOrderRef"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BidOrderRef),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 应价编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ForQuoteSysID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ForQuoteSysID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易所代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资单元代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestUnitID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestUnitID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易编码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ClientID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ClientID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* IP地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "IPAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->IPAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* Mac地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "MacAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->MacAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error};
        MakeCallback(isolate, ctx, cb, 2, argv);
        break;
      }
      case EV_ON_ERR_RTN_QUOTE_ACTION: {
        CThostFtdcQuoteActionField *data =
            static_cast<CThostFtdcQuoteActionField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 报价操作引用 */
          obj_data->Set(String::NewFromUtf8(isolate, "QuoteActionRef"),
                        Number::New(isolate, data->QuoteActionRef));
          /* 报价引用 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "QuoteRef"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->QuoteRef),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 请求编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "RequestID"),
                        Number::New(isolate, data->RequestID));
          /* 前置编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "FrontID"),
                        Number::New(isolate, data->FrontID));
          /* 会话编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SessionID"),
                        Number::New(isolate, data->SessionID));
          /* 交易所代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 报价操作编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "QuoteSysID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->QuoteSysID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 操作标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "ActionFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->ActionFlag).c_str()));
          /* 操作日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ActionDate"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ActionDate),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 操作时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ActionTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ActionTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易所交易员代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TraderID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TraderID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 安装编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "InstallID"),
                        Number::New(isolate, data->InstallID));
          /* 本地报价编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "QuoteLocalID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->QuoteLocalID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 操作本地编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ActionLocalID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ActionLocalID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 会员代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ParticipantID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ParticipantID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 客户代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ClientID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ClientID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 业务单元 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BusinessUnit"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BusinessUnit),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 报单操作状态 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "OrderActionStatus"),
              String::NewFromUtf8(isolate,
                                  string(1, data->OrderActionStatus).c_str()));
          /* 用户代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 状态信息 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "StatusMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->StatusMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 合约代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InstrumentID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InstrumentID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 营业部编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BranchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BranchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资单元代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestUnitID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestUnitID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* IP地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "IPAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->IPAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* Mac地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "MacAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->MacAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error};
        MakeCallback(isolate, ctx, cb, 2, argv);
        break;
      }
      case EV_ON_RTN_FOR_QUOTE_RSP: {
        CThostFtdcForQuoteRspField *data =
            static_cast<CThostFtdcForQuoteRspField *>(baton->data.get());

        Local<Object> obj_data = Object::New(isolate);

        if (data) {
          /* 交易日 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradingDay"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradingDay),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 合约代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InstrumentID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InstrumentID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 询价编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ForQuoteSysID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ForQuoteSysID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 询价时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ForQuoteTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ForQuoteTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 业务日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ActionDay"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ActionDay),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易所代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data};
        MakeCallback(isolate, ctx, cb, 1, argv);
        break;
      }
      case EV_ON_RTN_CFMMCTRADING_ACCOUNT_TOKEN: {
        CThostFtdcCFMMCTradingAccountTokenField *data =
            static_cast<CThostFtdcCFMMCTradingAccountTokenField *>(
                baton->data.get());

        Local<Object> obj_data = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 经纪公司统一编码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ParticipantID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ParticipantID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "AccountID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->AccountID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 密钥编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "KeyID"),
                        Number::New(isolate, data->KeyID));
          /* 动态令牌 */
          obj_data->Set(String::NewFromUtf8(isolate, "Token"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->Token),
                            NewStringType::kNormal)
                            .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data};
        MakeCallback(isolate, ctx, cb, 1, argv);
        break;
      }
      case EV_ON_RTN_LOCK: {
        CThostFtdcLockField *data =
            static_cast<CThostFtdcLockField *>(baton->data.get());

        Local<Object> obj_data = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 合约代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InstrumentID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InstrumentID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 锁定引用 */
          obj_data->Set(String::NewFromUtf8(isolate, "LockRef"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->LockRef),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 用户代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 数量 */
          obj_data->Set(String::NewFromUtf8(isolate, "Volume"),
                        Number::New(isolate, data->Volume));
          /* 请求编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "RequestID"),
                        Number::New(isolate, data->RequestID));
          /* 业务单元 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BusinessUnit"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BusinessUnit),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 锁定类型 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "LockType"),
              String::NewFromUtf8(isolate, string(1, data->LockType).c_str()));
          /* 本地锁定编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "LockLocalID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->LockLocalID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易所代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 会员代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ParticipantID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ParticipantID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 客户代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ClientID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ClientID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 合约在交易所的代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeInstID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeInstID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易所交易员代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TraderID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TraderID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 安装编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "InstallID"),
                        Number::New(isolate, data->InstallID));
          /* 执行宣告提交状态 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "OrderSubmitStatus"),
              String::NewFromUtf8(isolate,
                                  string(1, data->OrderSubmitStatus).c_str()));
          /* 报单提示序号 */
          obj_data->Set(String::NewFromUtf8(isolate, "NotifySequence"),
                        Number::New(isolate, data->NotifySequence));
          /* 交易日 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradingDay"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradingDay),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 结算编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SettlementID"),
                        Number::New(isolate, data->SettlementID));
          /* 锁定编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "LockSysID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->LockSysID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 报单日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InsertDate"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InsertDate),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 插入时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InsertTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InsertTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 撤销时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CancelTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CancelTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 锁定状态 */
          obj_data->Set(String::NewFromUtf8(isolate, "LockStatus"),
                        String::NewFromUtf8(
                            isolate, string(1, data->LockStatus).c_str()));
          /* 结算会员编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ClearingPartID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ClearingPartID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 序号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SequenceNo"),
                        Number::New(isolate, data->SequenceNo));
          /* 前置编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "FrontID"),
                        Number::New(isolate, data->FrontID));
          /* 会话编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SessionID"),
                        Number::New(isolate, data->SessionID));
          /* 用户端产品信息 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "UserProductInfo"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->UserProductInfo),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 状态信息 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "StatusMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->StatusMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 操作用户代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ActiveUserID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ActiveUserID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 经纪公司报单编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "BrokerLockSeq"),
                        Number::New(isolate, data->BrokerLockSeq));
          /* 营业部编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BranchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BranchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* IP地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "IPAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->IPAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* Mac地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "MacAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->MacAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data};
        MakeCallback(isolate, ctx, cb, 1, argv);
        break;
      }
      case EV_ON_ERR_RTN_LOCK_INSERT: {
        CThostFtdcInputLockField *data =
            static_cast<CThostFtdcInputLockField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 合约代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InstrumentID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InstrumentID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 锁定引用 */
          obj_data->Set(String::NewFromUtf8(isolate, "LockRef"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->LockRef),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 用户代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 数量 */
          obj_data->Set(String::NewFromUtf8(isolate, "Volume"),
                        Number::New(isolate, data->Volume));
          /* 请求编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "RequestID"),
                        Number::New(isolate, data->RequestID));
          /* 业务单元 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BusinessUnit"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BusinessUnit),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 锁定类型 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "LockType"),
              String::NewFromUtf8(isolate, string(1, data->LockType).c_str()));
          /* 交易所代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* IP地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "IPAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->IPAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* Mac地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "MacAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->MacAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error};
        MakeCallback(isolate, ctx, cb, 2, argv);
        break;
      }
      case EV_ON_ERR_RTN_BATCH_ORDER_ACTION: {
        CThostFtdcBatchOrderActionField *data =
            static_cast<CThostFtdcBatchOrderActionField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 报单操作引用 */
          obj_data->Set(String::NewFromUtf8(isolate, "OrderActionRef"),
                        Number::New(isolate, data->OrderActionRef));
          /* 请求编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "RequestID"),
                        Number::New(isolate, data->RequestID));
          /* 前置编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "FrontID"),
                        Number::New(isolate, data->FrontID));
          /* 会话编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SessionID"),
                        Number::New(isolate, data->SessionID));
          /* 交易所代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 操作日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ActionDate"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ActionDate),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 操作时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ActionTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ActionTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易所交易员代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TraderID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TraderID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 安装编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "InstallID"),
                        Number::New(isolate, data->InstallID));
          /* 操作本地编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ActionLocalID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ActionLocalID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 会员代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ParticipantID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ParticipantID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 客户代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ClientID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ClientID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 业务单元 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BusinessUnit"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BusinessUnit),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 报单操作状态 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "OrderActionStatus"),
              String::NewFromUtf8(isolate,
                                  string(1, data->OrderActionStatus).c_str()));
          /* 用户代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 状态信息 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "StatusMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->StatusMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资单元代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestUnitID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestUnitID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* IP地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "IPAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->IPAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* Mac地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "MacAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->MacAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error};
        MakeCallback(isolate, ctx, cb, 2, argv);
        break;
      }
      case EV_ON_RTN_COMB_ACTION: {
        CThostFtdcCombActionField *data =
            static_cast<CThostFtdcCombActionField *>(baton->data.get());

        Local<Object> obj_data = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 合约代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InstrumentID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InstrumentID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 组合引用 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CombActionRef"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CombActionRef),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 用户代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 买卖方向 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "Direction"),
              String::NewFromUtf8(isolate, string(1, data->Direction).c_str()));
          /* 数量 */
          obj_data->Set(String::NewFromUtf8(isolate, "Volume"),
                        Number::New(isolate, data->Volume));
          /* 组合指令方向 */
          obj_data->Set(String::NewFromUtf8(isolate, "CombDirection"),
                        String::NewFromUtf8(
                            isolate, string(1, data->CombDirection).c_str()));
          /* 投机套保标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "HedgeFlag"),
              String::NewFromUtf8(isolate, string(1, data->HedgeFlag).c_str()));
          /* 本地申请组合编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ActionLocalID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ActionLocalID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易所代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 会员代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ParticipantID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ParticipantID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 客户代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ClientID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ClientID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 合约在交易所的代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeInstID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeInstID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易所交易员代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TraderID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TraderID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 安装编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "InstallID"),
                        Number::New(isolate, data->InstallID));
          /* 组合状态 */
          obj_data->Set(String::NewFromUtf8(isolate, "ActionStatus"),
                        String::NewFromUtf8(
                            isolate, string(1, data->ActionStatus).c_str()));
          /* 报单提示序号 */
          obj_data->Set(String::NewFromUtf8(isolate, "NotifySequence"),
                        Number::New(isolate, data->NotifySequence));
          /* 交易日 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradingDay"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradingDay),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 结算编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SettlementID"),
                        Number::New(isolate, data->SettlementID));
          /* 序号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SequenceNo"),
                        Number::New(isolate, data->SequenceNo));
          /* 前置编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "FrontID"),
                        Number::New(isolate, data->FrontID));
          /* 会话编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SessionID"),
                        Number::New(isolate, data->SessionID));
          /* 用户端产品信息 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "UserProductInfo"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->UserProductInfo),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 状态信息 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "StatusMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->StatusMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* IP地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "IPAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->IPAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* Mac地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "MacAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->MacAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 组合编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ComTradeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ComTradeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 营业部编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BranchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BranchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data};
        MakeCallback(isolate, ctx, cb, 1, argv);
        break;
      }
      case EV_ON_ERR_RTN_COMB_ACTION_INSERT: {
        CThostFtdcInputCombActionField *data =
            static_cast<CThostFtdcInputCombActionField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 合约代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InstrumentID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InstrumentID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 组合引用 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CombActionRef"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CombActionRef),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 用户代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 买卖方向 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "Direction"),
              String::NewFromUtf8(isolate, string(1, data->Direction).c_str()));
          /* 数量 */
          obj_data->Set(String::NewFromUtf8(isolate, "Volume"),
                        Number::New(isolate, data->Volume));
          /* 组合指令方向 */
          obj_data->Set(String::NewFromUtf8(isolate, "CombDirection"),
                        String::NewFromUtf8(
                            isolate, string(1, data->CombDirection).c_str()));
          /* 投机套保标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "HedgeFlag"),
              String::NewFromUtf8(isolate, string(1, data->HedgeFlag).c_str()));
          /* 交易所代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* IP地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "IPAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->IPAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* Mac地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "MacAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->MacAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error};
        MakeCallback(isolate, ctx, cb, 2, argv);
        break;
      }
      case EV_ON_RSP_QRY_CONTRACT_BANK: {
        CThostFtdcContractBankField *data =
            static_cast<CThostFtdcContractBankField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->BankID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 银行分中心代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankBrchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankBrchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行名称 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankName"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankName),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_QRY_PARKED_ORDER: {
        CThostFtdcParkedOrderField *data =
            static_cast<CThostFtdcParkedOrderField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 合约代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InstrumentID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InstrumentID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 报单引用 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "OrderRef"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->OrderRef),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 用户代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 报单价格条件 */
          obj_data->Set(String::NewFromUtf8(isolate, "OrderPriceType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->OrderPriceType).c_str()));
          /* 买卖方向 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "Direction"),
              String::NewFromUtf8(isolate, string(1, data->Direction).c_str()));
          /* 组合开平标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CombOffsetFlag"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CombOffsetFlag),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 组合投机套保标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CombHedgeFlag"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CombHedgeFlag),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 价格 */
          obj_data->Set(String::NewFromUtf8(isolate, "LimitPrice"),
                        Number::New(isolate, data->LimitPrice));
          /* 数量 */
          obj_data->Set(String::NewFromUtf8(isolate, "VolumeTotalOriginal"),
                        Number::New(isolate, data->VolumeTotalOriginal));
          /* 有效期类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "TimeCondition"),
                        String::NewFromUtf8(
                            isolate, string(1, data->TimeCondition).c_str()));
          /* GTD日期 */
          obj_data->Set(String::NewFromUtf8(isolate, "GTDDate"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->GTDDate),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 成交量类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "VolumeCondition"),
                        String::NewFromUtf8(
                            isolate, string(1, data->VolumeCondition).c_str()));
          /* 最小成交量 */
          obj_data->Set(String::NewFromUtf8(isolate, "MinVolume"),
                        Number::New(isolate, data->MinVolume));
          /* 触发条件 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ContingentCondition"),
              String::NewFromUtf8(
                  isolate, string(1, data->ContingentCondition).c_str()));
          /* 止损价 */
          obj_data->Set(String::NewFromUtf8(isolate, "StopPrice"),
                        Number::New(isolate, data->StopPrice));
          /* 强平原因 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ForceCloseReason"),
              String::NewFromUtf8(isolate,
                                  string(1, data->ForceCloseReason).c_str()));
          /* 自动挂起标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "IsAutoSuspend"),
                        Number::New(isolate, data->IsAutoSuspend));
          /* 业务单元 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BusinessUnit"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BusinessUnit),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 请求编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "RequestID"),
                        Number::New(isolate, data->RequestID));
          /* 用户强评标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserForceClose"),
                        Number::New(isolate, data->UserForceClose));
          /* 交易所代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 预埋报单编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ParkedOrderID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ParkedOrderID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 用户类型 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "UserType"),
              String::NewFromUtf8(isolate, string(1, data->UserType).c_str()));
          /* 预埋单状态 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "Status"),
              String::NewFromUtf8(isolate, string(1, data->Status).c_str()));
          /* 错误代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "ErrorID"),
                        Number::New(isolate, data->ErrorID));
          /* 错误信息 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 互换单标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "IsSwapOrder"),
                        Number::New(isolate, data->IsSwapOrder));
          /* 资金账号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "AccountID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->AccountID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 币种代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CurrencyID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CurrencyID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易编码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ClientID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ClientID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资单元代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestUnitID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestUnitID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* IP地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "IPAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->IPAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* Mac地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "MacAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->MacAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_QRY_PARKED_ORDER_ACTION: {
        CThostFtdcParkedOrderActionField *data =
            static_cast<CThostFtdcParkedOrderActionField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 报单操作引用 */
          obj_data->Set(String::NewFromUtf8(isolate, "OrderActionRef"),
                        Number::New(isolate, data->OrderActionRef));
          /* 报单引用 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "OrderRef"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->OrderRef),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 请求编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "RequestID"),
                        Number::New(isolate, data->RequestID));
          /* 前置编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "FrontID"),
                        Number::New(isolate, data->FrontID));
          /* 会话编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SessionID"),
                        Number::New(isolate, data->SessionID));
          /* 交易所代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 报单编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "OrderSysID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->OrderSysID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 操作标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "ActionFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->ActionFlag).c_str()));
          /* 价格 */
          obj_data->Set(String::NewFromUtf8(isolate, "LimitPrice"),
                        Number::New(isolate, data->LimitPrice));
          /* 数量变化 */
          obj_data->Set(String::NewFromUtf8(isolate, "VolumeChange"),
                        Number::New(isolate, data->VolumeChange));
          /* 用户代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 合约代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InstrumentID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InstrumentID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 预埋撤单单编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ParkedOrderActionID"),
              String::NewFromOneByte(isolate, reinterpret_cast<uint8_t *>(
                                                  data->ParkedOrderActionID),
                                     NewStringType::kNormal)
                  .ToLocalChecked());
          /* 用户类型 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "UserType"),
              String::NewFromUtf8(isolate, string(1, data->UserType).c_str()));
          /* 预埋撤单状态 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "Status"),
              String::NewFromUtf8(isolate, string(1, data->Status).c_str()));
          /* 错误代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "ErrorID"),
                        Number::New(isolate, data->ErrorID));
          /* 错误信息 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资单元代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestUnitID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestUnitID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* IP地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "IPAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->IPAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* Mac地址 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "MacAddress"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->MacAddress),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_QRY_TRADING_NOTICE: {
        CThostFtdcTradingNoticeField *data =
            static_cast<CThostFtdcTradingNoticeField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者范围 */
          obj_data->Set(String::NewFromUtf8(isolate, "InvestorRange"),
                        String::NewFromUtf8(
                            isolate, string(1, data->InvestorRange).c_str()));
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 序列系列号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SequenceSeries"),
                        Number::New(isolate, data->SequenceSeries));
          /* 用户代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 发送时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "SendTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->SendTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 序列号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SequenceNo"),
                        Number::New(isolate, data->SequenceNo));
          /* 消息正文 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "FieldContent"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->FieldContent),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_QRY_BROKER_TRADING_PARAMS: {
        CThostFtdcBrokerTradingParamsField *data =
            static_cast<CThostFtdcBrokerTradingParamsField *>(
                baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 保证金价格类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "MarginPriceType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->MarginPriceType).c_str()));
          /* 盈亏算法 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "Algorithm"),
              String::NewFromUtf8(isolate, string(1, data->Algorithm).c_str()));
          /* 可用是否包含平仓盈利 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "AvailIncludeCloseProfit"),
              String::NewFromUtf8(
                  isolate, string(1, data->AvailIncludeCloseProfit).c_str()));
          /* 币种代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CurrencyID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CurrencyID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期权权利金价格类型 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "OptionRoyaltyPriceType"),
              String::NewFromUtf8(
                  isolate, string(1, data->OptionRoyaltyPriceType).c_str()));
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_QRY_BROKER_TRADING_ALGOS: {
        CThostFtdcBrokerTradingAlgosField *data =
            static_cast<CThostFtdcBrokerTradingAlgosField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易所代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ExchangeID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ExchangeID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 合约代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InstrumentID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InstrumentID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 持仓处理算法编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "HandlePositionAlgoID"),
              String::NewFromUtf8(
                  isolate, string(1, data->HandlePositionAlgoID).c_str()));
          /* 寻找保证金率算法编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "FindMarginRateAlgoID"),
              String::NewFromUtf8(
                  isolate, string(1, data->FindMarginRateAlgoID).c_str()));
          /* 资金处理算法编号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "HandleTradingAccountAlgoID"),
              String::NewFromUtf8(
                  isolate,
                  string(1, data->HandleTradingAccountAlgoID).c_str()));
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_QUERY_CFMMCTRADING_ACCOUNT_TOKEN: {
        CThostFtdcQueryCFMMCTradingAccountTokenField *data =
            static_cast<CThostFtdcQueryCFMMCTradingAccountTokenField *>(
                baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 经纪公司代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "InvestorID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->InvestorID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RTN_FROM_BANK_TO_FUTURE_BY_BANK: {
        CThostFtdcRspTransferField *data =
            static_cast<CThostFtdcRspTransferField *>(baton->data.get());

        Local<Object> obj_data = Object::New(isolate);

        if (data) {
          /* 业务功能码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeCode"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeCode),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->BankID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 银行分支机构代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankBranchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankBranchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期商代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期商分支机构代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerBranchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerBranchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeDate"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeDate),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行流水号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankSerial"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankSerial),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易系统日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradingDay"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradingDay),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银期平台消息流水号 */
          obj_data->Set(String::NewFromUtf8(isolate, "PlateSerial"),
                        Number::New(isolate, data->PlateSerial));
          /* 最后分片标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "LastFragment"),
                        String::NewFromUtf8(
                            isolate, string(1, data->LastFragment).c_str()));
          /* 会话号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SessionID"),
                        Number::New(isolate, data->SessionID));
          /* 客户姓名 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CustomerName"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CustomerName),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 证件类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "IdCardType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->IdCardType).c_str()));
          /* 证件号码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "IdentifiedCardNo"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->IdentifiedCardNo),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 客户类型 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CustType"),
              String::NewFromUtf8(isolate, string(1, data->CustType).c_str()));
          /* 银行帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankAccount"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankAccount),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行密码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankPassWord"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankPassWord),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "AccountID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->AccountID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货密码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "Password"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->Password),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 安装编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "InstallID"),
                        Number::New(isolate, data->InstallID));
          /* 期货公司流水号 */
          obj_data->Set(String::NewFromUtf8(isolate, "FutureSerial"),
                        Number::New(isolate, data->FutureSerial));
          /* 用户标识 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 验证客户证件号码标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "VerifyCertNoFlag"),
              String::NewFromUtf8(isolate,
                                  string(1, data->VerifyCertNoFlag).c_str()));
          /* 币种代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CurrencyID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CurrencyID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 转帐金额 */
          obj_data->Set(String::NewFromUtf8(isolate, "TradeAmount"),
                        Number::New(isolate, data->TradeAmount));
          /* 期货可取金额 */
          obj_data->Set(String::NewFromUtf8(isolate, "FutureFetchAmount"),
                        Number::New(isolate, data->FutureFetchAmount));
          /* 费用支付标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "FeePayFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->FeePayFlag).c_str()));
          /* 应收客户费用 */
          obj_data->Set(String::NewFromUtf8(isolate, "CustFee"),
                        Number::New(isolate, data->CustFee));
          /* 应收期货公司费用 */
          obj_data->Set(String::NewFromUtf8(isolate, "BrokerFee"),
                        Number::New(isolate, data->BrokerFee));
          /* 发送方给接收方的消息 */
          obj_data->Set(String::NewFromUtf8(isolate, "Message"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->Message),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 摘要 */
          obj_data->Set(String::NewFromUtf8(isolate, "Digest"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->Digest),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 银行帐号类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankAccType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankAccType).c_str()));
          /* 渠道标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "DeviceID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->DeviceID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货单位帐号类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankSecuAccType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankSecuAccType).c_str()));
          /* 期货公司银行编码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerIDByBank"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerIDByBank),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货单位帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankSecuAcc"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankSecuAcc),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行密码标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankPwdFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankPwdFlag).c_str()));
          /* 期货资金密码核对标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "SecuPwdFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->SecuPwdFlag).c_str()));
          /* 交易柜员 */
          obj_data->Set(String::NewFromUtf8(isolate, "OperNo"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->OperNo),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 请求编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "RequestID"),
                        Number::New(isolate, data->RequestID));
          /* 交易ID */
          obj_data->Set(String::NewFromUtf8(isolate, "TID"),
                        Number::New(isolate, data->TID));
          /* 转账交易状态 */
          obj_data->Set(String::NewFromUtf8(isolate, "TransferStatus"),
                        String::NewFromUtf8(
                            isolate, string(1, data->TransferStatus).c_str()));
          /* 错误代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "ErrorID"),
                        Number::New(isolate, data->ErrorID));
          /* 错误信息 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data};
        MakeCallback(isolate, ctx, cb, 1, argv);
        break;
      }
      case EV_ON_RTN_FROM_FUTURE_TO_BANK_BY_BANK: {
        CThostFtdcRspTransferField *data =
            static_cast<CThostFtdcRspTransferField *>(baton->data.get());

        Local<Object> obj_data = Object::New(isolate);

        if (data) {
          /* 业务功能码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeCode"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeCode),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->BankID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 银行分支机构代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankBranchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankBranchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期商代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期商分支机构代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerBranchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerBranchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeDate"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeDate),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行流水号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankSerial"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankSerial),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易系统日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradingDay"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradingDay),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银期平台消息流水号 */
          obj_data->Set(String::NewFromUtf8(isolate, "PlateSerial"),
                        Number::New(isolate, data->PlateSerial));
          /* 最后分片标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "LastFragment"),
                        String::NewFromUtf8(
                            isolate, string(1, data->LastFragment).c_str()));
          /* 会话号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SessionID"),
                        Number::New(isolate, data->SessionID));
          /* 客户姓名 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CustomerName"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CustomerName),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 证件类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "IdCardType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->IdCardType).c_str()));
          /* 证件号码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "IdentifiedCardNo"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->IdentifiedCardNo),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 客户类型 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CustType"),
              String::NewFromUtf8(isolate, string(1, data->CustType).c_str()));
          /* 银行帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankAccount"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankAccount),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行密码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankPassWord"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankPassWord),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "AccountID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->AccountID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货密码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "Password"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->Password),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 安装编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "InstallID"),
                        Number::New(isolate, data->InstallID));
          /* 期货公司流水号 */
          obj_data->Set(String::NewFromUtf8(isolate, "FutureSerial"),
                        Number::New(isolate, data->FutureSerial));
          /* 用户标识 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 验证客户证件号码标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "VerifyCertNoFlag"),
              String::NewFromUtf8(isolate,
                                  string(1, data->VerifyCertNoFlag).c_str()));
          /* 币种代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CurrencyID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CurrencyID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 转帐金额 */
          obj_data->Set(String::NewFromUtf8(isolate, "TradeAmount"),
                        Number::New(isolate, data->TradeAmount));
          /* 期货可取金额 */
          obj_data->Set(String::NewFromUtf8(isolate, "FutureFetchAmount"),
                        Number::New(isolate, data->FutureFetchAmount));
          /* 费用支付标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "FeePayFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->FeePayFlag).c_str()));
          /* 应收客户费用 */
          obj_data->Set(String::NewFromUtf8(isolate, "CustFee"),
                        Number::New(isolate, data->CustFee));
          /* 应收期货公司费用 */
          obj_data->Set(String::NewFromUtf8(isolate, "BrokerFee"),
                        Number::New(isolate, data->BrokerFee));
          /* 发送方给接收方的消息 */
          obj_data->Set(String::NewFromUtf8(isolate, "Message"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->Message),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 摘要 */
          obj_data->Set(String::NewFromUtf8(isolate, "Digest"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->Digest),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 银行帐号类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankAccType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankAccType).c_str()));
          /* 渠道标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "DeviceID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->DeviceID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货单位帐号类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankSecuAccType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankSecuAccType).c_str()));
          /* 期货公司银行编码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerIDByBank"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerIDByBank),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货单位帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankSecuAcc"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankSecuAcc),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行密码标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankPwdFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankPwdFlag).c_str()));
          /* 期货资金密码核对标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "SecuPwdFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->SecuPwdFlag).c_str()));
          /* 交易柜员 */
          obj_data->Set(String::NewFromUtf8(isolate, "OperNo"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->OperNo),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 请求编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "RequestID"),
                        Number::New(isolate, data->RequestID));
          /* 交易ID */
          obj_data->Set(String::NewFromUtf8(isolate, "TID"),
                        Number::New(isolate, data->TID));
          /* 转账交易状态 */
          obj_data->Set(String::NewFromUtf8(isolate, "TransferStatus"),
                        String::NewFromUtf8(
                            isolate, string(1, data->TransferStatus).c_str()));
          /* 错误代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "ErrorID"),
                        Number::New(isolate, data->ErrorID));
          /* 错误信息 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data};
        MakeCallback(isolate, ctx, cb, 1, argv);
        break;
      }
      case EV_ON_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_BANK: {
        CThostFtdcRspRepealField *data =
            static_cast<CThostFtdcRspRepealField *>(baton->data.get());

        Local<Object> obj_data = Object::New(isolate);

        if (data) {
          /* 冲正时间间隔 */
          obj_data->Set(String::NewFromUtf8(isolate, "RepealTimeInterval"),
                        Number::New(isolate, data->RepealTimeInterval));
          /* 已经冲正次数 */
          obj_data->Set(String::NewFromUtf8(isolate, "RepealedTimes"),
                        Number::New(isolate, data->RepealedTimes));
          /* 银行冲正标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankRepealFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankRepealFlag).c_str()));
          /* 期商冲正标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerRepealFlag"),
              String::NewFromUtf8(isolate,
                                  string(1, data->BrokerRepealFlag).c_str()));
          /* 被冲正平台流水号 */
          obj_data->Set(String::NewFromUtf8(isolate, "PlateRepealSerial"),
                        Number::New(isolate, data->PlateRepealSerial));
          /* 被冲正银行流水号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankRepealSerial"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankRepealSerial),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 被冲正期货流水号 */
          obj_data->Set(String::NewFromUtf8(isolate, "FutureRepealSerial"),
                        Number::New(isolate, data->FutureRepealSerial));
          /* 业务功能码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeCode"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeCode),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->BankID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 银行分支机构代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankBranchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankBranchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期商代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期商分支机构代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerBranchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerBranchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeDate"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeDate),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行流水号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankSerial"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankSerial),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易系统日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradingDay"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradingDay),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银期平台消息流水号 */
          obj_data->Set(String::NewFromUtf8(isolate, "PlateSerial"),
                        Number::New(isolate, data->PlateSerial));
          /* 最后分片标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "LastFragment"),
                        String::NewFromUtf8(
                            isolate, string(1, data->LastFragment).c_str()));
          /* 会话号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SessionID"),
                        Number::New(isolate, data->SessionID));
          /* 客户姓名 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CustomerName"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CustomerName),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 证件类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "IdCardType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->IdCardType).c_str()));
          /* 证件号码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "IdentifiedCardNo"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->IdentifiedCardNo),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 客户类型 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CustType"),
              String::NewFromUtf8(isolate, string(1, data->CustType).c_str()));
          /* 银行帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankAccount"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankAccount),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行密码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankPassWord"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankPassWord),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "AccountID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->AccountID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货密码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "Password"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->Password),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 安装编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "InstallID"),
                        Number::New(isolate, data->InstallID));
          /* 期货公司流水号 */
          obj_data->Set(String::NewFromUtf8(isolate, "FutureSerial"),
                        Number::New(isolate, data->FutureSerial));
          /* 用户标识 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 验证客户证件号码标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "VerifyCertNoFlag"),
              String::NewFromUtf8(isolate,
                                  string(1, data->VerifyCertNoFlag).c_str()));
          /* 币种代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CurrencyID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CurrencyID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 转帐金额 */
          obj_data->Set(String::NewFromUtf8(isolate, "TradeAmount"),
                        Number::New(isolate, data->TradeAmount));
          /* 期货可取金额 */
          obj_data->Set(String::NewFromUtf8(isolate, "FutureFetchAmount"),
                        Number::New(isolate, data->FutureFetchAmount));
          /* 费用支付标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "FeePayFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->FeePayFlag).c_str()));
          /* 应收客户费用 */
          obj_data->Set(String::NewFromUtf8(isolate, "CustFee"),
                        Number::New(isolate, data->CustFee));
          /* 应收期货公司费用 */
          obj_data->Set(String::NewFromUtf8(isolate, "BrokerFee"),
                        Number::New(isolate, data->BrokerFee));
          /* 发送方给接收方的消息 */
          obj_data->Set(String::NewFromUtf8(isolate, "Message"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->Message),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 摘要 */
          obj_data->Set(String::NewFromUtf8(isolate, "Digest"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->Digest),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 银行帐号类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankAccType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankAccType).c_str()));
          /* 渠道标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "DeviceID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->DeviceID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货单位帐号类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankSecuAccType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankSecuAccType).c_str()));
          /* 期货公司银行编码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerIDByBank"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerIDByBank),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货单位帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankSecuAcc"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankSecuAcc),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行密码标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankPwdFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankPwdFlag).c_str()));
          /* 期货资金密码核对标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "SecuPwdFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->SecuPwdFlag).c_str()));
          /* 交易柜员 */
          obj_data->Set(String::NewFromUtf8(isolate, "OperNo"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->OperNo),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 请求编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "RequestID"),
                        Number::New(isolate, data->RequestID));
          /* 交易ID */
          obj_data->Set(String::NewFromUtf8(isolate, "TID"),
                        Number::New(isolate, data->TID));
          /* 转账交易状态 */
          obj_data->Set(String::NewFromUtf8(isolate, "TransferStatus"),
                        String::NewFromUtf8(
                            isolate, string(1, data->TransferStatus).c_str()));
          /* 错误代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "ErrorID"),
                        Number::New(isolate, data->ErrorID));
          /* 错误信息 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data};
        MakeCallback(isolate, ctx, cb, 1, argv);
        break;
      }
      case EV_ON_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_BANK: {
        CThostFtdcRspRepealField *data =
            static_cast<CThostFtdcRspRepealField *>(baton->data.get());

        Local<Object> obj_data = Object::New(isolate);

        if (data) {
          /* 冲正时间间隔 */
          obj_data->Set(String::NewFromUtf8(isolate, "RepealTimeInterval"),
                        Number::New(isolate, data->RepealTimeInterval));
          /* 已经冲正次数 */
          obj_data->Set(String::NewFromUtf8(isolate, "RepealedTimes"),
                        Number::New(isolate, data->RepealedTimes));
          /* 银行冲正标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankRepealFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankRepealFlag).c_str()));
          /* 期商冲正标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerRepealFlag"),
              String::NewFromUtf8(isolate,
                                  string(1, data->BrokerRepealFlag).c_str()));
          /* 被冲正平台流水号 */
          obj_data->Set(String::NewFromUtf8(isolate, "PlateRepealSerial"),
                        Number::New(isolate, data->PlateRepealSerial));
          /* 被冲正银行流水号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankRepealSerial"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankRepealSerial),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 被冲正期货流水号 */
          obj_data->Set(String::NewFromUtf8(isolate, "FutureRepealSerial"),
                        Number::New(isolate, data->FutureRepealSerial));
          /* 业务功能码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeCode"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeCode),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->BankID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 银行分支机构代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankBranchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankBranchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期商代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期商分支机构代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerBranchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerBranchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeDate"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeDate),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行流水号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankSerial"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankSerial),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易系统日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradingDay"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradingDay),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银期平台消息流水号 */
          obj_data->Set(String::NewFromUtf8(isolate, "PlateSerial"),
                        Number::New(isolate, data->PlateSerial));
          /* 最后分片标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "LastFragment"),
                        String::NewFromUtf8(
                            isolate, string(1, data->LastFragment).c_str()));
          /* 会话号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SessionID"),
                        Number::New(isolate, data->SessionID));
          /* 客户姓名 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CustomerName"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CustomerName),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 证件类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "IdCardType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->IdCardType).c_str()));
          /* 证件号码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "IdentifiedCardNo"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->IdentifiedCardNo),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 客户类型 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CustType"),
              String::NewFromUtf8(isolate, string(1, data->CustType).c_str()));
          /* 银行帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankAccount"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankAccount),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行密码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankPassWord"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankPassWord),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "AccountID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->AccountID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货密码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "Password"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->Password),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 安装编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "InstallID"),
                        Number::New(isolate, data->InstallID));
          /* 期货公司流水号 */
          obj_data->Set(String::NewFromUtf8(isolate, "FutureSerial"),
                        Number::New(isolate, data->FutureSerial));
          /* 用户标识 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 验证客户证件号码标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "VerifyCertNoFlag"),
              String::NewFromUtf8(isolate,
                                  string(1, data->VerifyCertNoFlag).c_str()));
          /* 币种代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CurrencyID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CurrencyID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 转帐金额 */
          obj_data->Set(String::NewFromUtf8(isolate, "TradeAmount"),
                        Number::New(isolate, data->TradeAmount));
          /* 期货可取金额 */
          obj_data->Set(String::NewFromUtf8(isolate, "FutureFetchAmount"),
                        Number::New(isolate, data->FutureFetchAmount));
          /* 费用支付标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "FeePayFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->FeePayFlag).c_str()));
          /* 应收客户费用 */
          obj_data->Set(String::NewFromUtf8(isolate, "CustFee"),
                        Number::New(isolate, data->CustFee));
          /* 应收期货公司费用 */
          obj_data->Set(String::NewFromUtf8(isolate, "BrokerFee"),
                        Number::New(isolate, data->BrokerFee));
          /* 发送方给接收方的消息 */
          obj_data->Set(String::NewFromUtf8(isolate, "Message"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->Message),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 摘要 */
          obj_data->Set(String::NewFromUtf8(isolate, "Digest"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->Digest),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 银行帐号类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankAccType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankAccType).c_str()));
          /* 渠道标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "DeviceID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->DeviceID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货单位帐号类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankSecuAccType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankSecuAccType).c_str()));
          /* 期货公司银行编码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerIDByBank"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerIDByBank),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货单位帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankSecuAcc"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankSecuAcc),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行密码标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankPwdFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankPwdFlag).c_str()));
          /* 期货资金密码核对标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "SecuPwdFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->SecuPwdFlag).c_str()));
          /* 交易柜员 */
          obj_data->Set(String::NewFromUtf8(isolate, "OperNo"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->OperNo),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 请求编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "RequestID"),
                        Number::New(isolate, data->RequestID));
          /* 交易ID */
          obj_data->Set(String::NewFromUtf8(isolate, "TID"),
                        Number::New(isolate, data->TID));
          /* 转账交易状态 */
          obj_data->Set(String::NewFromUtf8(isolate, "TransferStatus"),
                        String::NewFromUtf8(
                            isolate, string(1, data->TransferStatus).c_str()));
          /* 错误代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "ErrorID"),
                        Number::New(isolate, data->ErrorID));
          /* 错误信息 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data};
        MakeCallback(isolate, ctx, cb, 1, argv);
        break;
      }
      case EV_ON_RTN_FROM_BANK_TO_FUTURE_BY_FUTURE: {
        CThostFtdcRspTransferField *data =
            static_cast<CThostFtdcRspTransferField *>(baton->data.get());

        Local<Object> obj_data = Object::New(isolate);

        if (data) {
          /* 业务功能码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeCode"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeCode),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->BankID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 银行分支机构代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankBranchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankBranchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期商代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期商分支机构代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerBranchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerBranchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeDate"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeDate),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行流水号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankSerial"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankSerial),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易系统日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradingDay"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradingDay),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银期平台消息流水号 */
          obj_data->Set(String::NewFromUtf8(isolate, "PlateSerial"),
                        Number::New(isolate, data->PlateSerial));
          /* 最后分片标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "LastFragment"),
                        String::NewFromUtf8(
                            isolate, string(1, data->LastFragment).c_str()));
          /* 会话号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SessionID"),
                        Number::New(isolate, data->SessionID));
          /* 客户姓名 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CustomerName"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CustomerName),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 证件类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "IdCardType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->IdCardType).c_str()));
          /* 证件号码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "IdentifiedCardNo"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->IdentifiedCardNo),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 客户类型 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CustType"),
              String::NewFromUtf8(isolate, string(1, data->CustType).c_str()));
          /* 银行帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankAccount"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankAccount),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行密码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankPassWord"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankPassWord),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "AccountID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->AccountID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货密码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "Password"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->Password),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 安装编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "InstallID"),
                        Number::New(isolate, data->InstallID));
          /* 期货公司流水号 */
          obj_data->Set(String::NewFromUtf8(isolate, "FutureSerial"),
                        Number::New(isolate, data->FutureSerial));
          /* 用户标识 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 验证客户证件号码标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "VerifyCertNoFlag"),
              String::NewFromUtf8(isolate,
                                  string(1, data->VerifyCertNoFlag).c_str()));
          /* 币种代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CurrencyID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CurrencyID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 转帐金额 */
          obj_data->Set(String::NewFromUtf8(isolate, "TradeAmount"),
                        Number::New(isolate, data->TradeAmount));
          /* 期货可取金额 */
          obj_data->Set(String::NewFromUtf8(isolate, "FutureFetchAmount"),
                        Number::New(isolate, data->FutureFetchAmount));
          /* 费用支付标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "FeePayFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->FeePayFlag).c_str()));
          /* 应收客户费用 */
          obj_data->Set(String::NewFromUtf8(isolate, "CustFee"),
                        Number::New(isolate, data->CustFee));
          /* 应收期货公司费用 */
          obj_data->Set(String::NewFromUtf8(isolate, "BrokerFee"),
                        Number::New(isolate, data->BrokerFee));
          /* 发送方给接收方的消息 */
          obj_data->Set(String::NewFromUtf8(isolate, "Message"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->Message),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 摘要 */
          obj_data->Set(String::NewFromUtf8(isolate, "Digest"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->Digest),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 银行帐号类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankAccType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankAccType).c_str()));
          /* 渠道标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "DeviceID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->DeviceID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货单位帐号类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankSecuAccType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankSecuAccType).c_str()));
          /* 期货公司银行编码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerIDByBank"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerIDByBank),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货单位帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankSecuAcc"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankSecuAcc),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行密码标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankPwdFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankPwdFlag).c_str()));
          /* 期货资金密码核对标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "SecuPwdFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->SecuPwdFlag).c_str()));
          /* 交易柜员 */
          obj_data->Set(String::NewFromUtf8(isolate, "OperNo"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->OperNo),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 请求编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "RequestID"),
                        Number::New(isolate, data->RequestID));
          /* 交易ID */
          obj_data->Set(String::NewFromUtf8(isolate, "TID"),
                        Number::New(isolate, data->TID));
          /* 转账交易状态 */
          obj_data->Set(String::NewFromUtf8(isolate, "TransferStatus"),
                        String::NewFromUtf8(
                            isolate, string(1, data->TransferStatus).c_str()));
          /* 错误代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "ErrorID"),
                        Number::New(isolate, data->ErrorID));
          /* 错误信息 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data};
        MakeCallback(isolate, ctx, cb, 1, argv);
        break;
      }
      case EV_ON_RTN_FROM_FUTURE_TO_BANK_BY_FUTURE: {
        CThostFtdcRspTransferField *data =
            static_cast<CThostFtdcRspTransferField *>(baton->data.get());

        Local<Object> obj_data = Object::New(isolate);

        if (data) {
          /* 业务功能码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeCode"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeCode),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->BankID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 银行分支机构代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankBranchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankBranchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期商代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期商分支机构代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerBranchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerBranchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeDate"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeDate),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行流水号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankSerial"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankSerial),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易系统日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradingDay"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradingDay),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银期平台消息流水号 */
          obj_data->Set(String::NewFromUtf8(isolate, "PlateSerial"),
                        Number::New(isolate, data->PlateSerial));
          /* 最后分片标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "LastFragment"),
                        String::NewFromUtf8(
                            isolate, string(1, data->LastFragment).c_str()));
          /* 会话号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SessionID"),
                        Number::New(isolate, data->SessionID));
          /* 客户姓名 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CustomerName"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CustomerName),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 证件类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "IdCardType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->IdCardType).c_str()));
          /* 证件号码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "IdentifiedCardNo"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->IdentifiedCardNo),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 客户类型 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CustType"),
              String::NewFromUtf8(isolate, string(1, data->CustType).c_str()));
          /* 银行帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankAccount"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankAccount),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行密码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankPassWord"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankPassWord),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "AccountID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->AccountID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货密码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "Password"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->Password),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 安装编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "InstallID"),
                        Number::New(isolate, data->InstallID));
          /* 期货公司流水号 */
          obj_data->Set(String::NewFromUtf8(isolate, "FutureSerial"),
                        Number::New(isolate, data->FutureSerial));
          /* 用户标识 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 验证客户证件号码标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "VerifyCertNoFlag"),
              String::NewFromUtf8(isolate,
                                  string(1, data->VerifyCertNoFlag).c_str()));
          /* 币种代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CurrencyID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CurrencyID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 转帐金额 */
          obj_data->Set(String::NewFromUtf8(isolate, "TradeAmount"),
                        Number::New(isolate, data->TradeAmount));
          /* 期货可取金额 */
          obj_data->Set(String::NewFromUtf8(isolate, "FutureFetchAmount"),
                        Number::New(isolate, data->FutureFetchAmount));
          /* 费用支付标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "FeePayFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->FeePayFlag).c_str()));
          /* 应收客户费用 */
          obj_data->Set(String::NewFromUtf8(isolate, "CustFee"),
                        Number::New(isolate, data->CustFee));
          /* 应收期货公司费用 */
          obj_data->Set(String::NewFromUtf8(isolate, "BrokerFee"),
                        Number::New(isolate, data->BrokerFee));
          /* 发送方给接收方的消息 */
          obj_data->Set(String::NewFromUtf8(isolate, "Message"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->Message),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 摘要 */
          obj_data->Set(String::NewFromUtf8(isolate, "Digest"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->Digest),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 银行帐号类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankAccType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankAccType).c_str()));
          /* 渠道标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "DeviceID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->DeviceID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货单位帐号类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankSecuAccType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankSecuAccType).c_str()));
          /* 期货公司银行编码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerIDByBank"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerIDByBank),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货单位帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankSecuAcc"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankSecuAcc),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行密码标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankPwdFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankPwdFlag).c_str()));
          /* 期货资金密码核对标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "SecuPwdFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->SecuPwdFlag).c_str()));
          /* 交易柜员 */
          obj_data->Set(String::NewFromUtf8(isolate, "OperNo"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->OperNo),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 请求编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "RequestID"),
                        Number::New(isolate, data->RequestID));
          /* 交易ID */
          obj_data->Set(String::NewFromUtf8(isolate, "TID"),
                        Number::New(isolate, data->TID));
          /* 转账交易状态 */
          obj_data->Set(String::NewFromUtf8(isolate, "TransferStatus"),
                        String::NewFromUtf8(
                            isolate, string(1, data->TransferStatus).c_str()));
          /* 错误代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "ErrorID"),
                        Number::New(isolate, data->ErrorID));
          /* 错误信息 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data};
        MakeCallback(isolate, ctx, cb, 1, argv);
        break;
      }
      case EV_ON_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE_MANUAL: {
        CThostFtdcRspRepealField *data =
            static_cast<CThostFtdcRspRepealField *>(baton->data.get());

        Local<Object> obj_data = Object::New(isolate);

        if (data) {
          /* 冲正时间间隔 */
          obj_data->Set(String::NewFromUtf8(isolate, "RepealTimeInterval"),
                        Number::New(isolate, data->RepealTimeInterval));
          /* 已经冲正次数 */
          obj_data->Set(String::NewFromUtf8(isolate, "RepealedTimes"),
                        Number::New(isolate, data->RepealedTimes));
          /* 银行冲正标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankRepealFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankRepealFlag).c_str()));
          /* 期商冲正标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerRepealFlag"),
              String::NewFromUtf8(isolate,
                                  string(1, data->BrokerRepealFlag).c_str()));
          /* 被冲正平台流水号 */
          obj_data->Set(String::NewFromUtf8(isolate, "PlateRepealSerial"),
                        Number::New(isolate, data->PlateRepealSerial));
          /* 被冲正银行流水号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankRepealSerial"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankRepealSerial),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 被冲正期货流水号 */
          obj_data->Set(String::NewFromUtf8(isolate, "FutureRepealSerial"),
                        Number::New(isolate, data->FutureRepealSerial));
          /* 业务功能码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeCode"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeCode),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->BankID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 银行分支机构代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankBranchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankBranchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期商代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期商分支机构代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerBranchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerBranchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeDate"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeDate),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行流水号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankSerial"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankSerial),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易系统日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradingDay"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradingDay),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银期平台消息流水号 */
          obj_data->Set(String::NewFromUtf8(isolate, "PlateSerial"),
                        Number::New(isolate, data->PlateSerial));
          /* 最后分片标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "LastFragment"),
                        String::NewFromUtf8(
                            isolate, string(1, data->LastFragment).c_str()));
          /* 会话号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SessionID"),
                        Number::New(isolate, data->SessionID));
          /* 客户姓名 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CustomerName"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CustomerName),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 证件类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "IdCardType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->IdCardType).c_str()));
          /* 证件号码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "IdentifiedCardNo"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->IdentifiedCardNo),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 客户类型 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CustType"),
              String::NewFromUtf8(isolate, string(1, data->CustType).c_str()));
          /* 银行帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankAccount"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankAccount),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行密码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankPassWord"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankPassWord),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "AccountID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->AccountID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货密码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "Password"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->Password),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 安装编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "InstallID"),
                        Number::New(isolate, data->InstallID));
          /* 期货公司流水号 */
          obj_data->Set(String::NewFromUtf8(isolate, "FutureSerial"),
                        Number::New(isolate, data->FutureSerial));
          /* 用户标识 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 验证客户证件号码标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "VerifyCertNoFlag"),
              String::NewFromUtf8(isolate,
                                  string(1, data->VerifyCertNoFlag).c_str()));
          /* 币种代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CurrencyID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CurrencyID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 转帐金额 */
          obj_data->Set(String::NewFromUtf8(isolate, "TradeAmount"),
                        Number::New(isolate, data->TradeAmount));
          /* 期货可取金额 */
          obj_data->Set(String::NewFromUtf8(isolate, "FutureFetchAmount"),
                        Number::New(isolate, data->FutureFetchAmount));
          /* 费用支付标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "FeePayFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->FeePayFlag).c_str()));
          /* 应收客户费用 */
          obj_data->Set(String::NewFromUtf8(isolate, "CustFee"),
                        Number::New(isolate, data->CustFee));
          /* 应收期货公司费用 */
          obj_data->Set(String::NewFromUtf8(isolate, "BrokerFee"),
                        Number::New(isolate, data->BrokerFee));
          /* 发送方给接收方的消息 */
          obj_data->Set(String::NewFromUtf8(isolate, "Message"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->Message),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 摘要 */
          obj_data->Set(String::NewFromUtf8(isolate, "Digest"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->Digest),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 银行帐号类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankAccType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankAccType).c_str()));
          /* 渠道标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "DeviceID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->DeviceID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货单位帐号类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankSecuAccType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankSecuAccType).c_str()));
          /* 期货公司银行编码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerIDByBank"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerIDByBank),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货单位帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankSecuAcc"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankSecuAcc),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行密码标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankPwdFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankPwdFlag).c_str()));
          /* 期货资金密码核对标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "SecuPwdFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->SecuPwdFlag).c_str()));
          /* 交易柜员 */
          obj_data->Set(String::NewFromUtf8(isolate, "OperNo"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->OperNo),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 请求编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "RequestID"),
                        Number::New(isolate, data->RequestID));
          /* 交易ID */
          obj_data->Set(String::NewFromUtf8(isolate, "TID"),
                        Number::New(isolate, data->TID));
          /* 转账交易状态 */
          obj_data->Set(String::NewFromUtf8(isolate, "TransferStatus"),
                        String::NewFromUtf8(
                            isolate, string(1, data->TransferStatus).c_str()));
          /* 错误代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "ErrorID"),
                        Number::New(isolate, data->ErrorID));
          /* 错误信息 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data};
        MakeCallback(isolate, ctx, cb, 1, argv);
        break;
      }
      case EV_ON_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE_MANUAL: {
        CThostFtdcRspRepealField *data =
            static_cast<CThostFtdcRspRepealField *>(baton->data.get());

        Local<Object> obj_data = Object::New(isolate);

        if (data) {
          /* 冲正时间间隔 */
          obj_data->Set(String::NewFromUtf8(isolate, "RepealTimeInterval"),
                        Number::New(isolate, data->RepealTimeInterval));
          /* 已经冲正次数 */
          obj_data->Set(String::NewFromUtf8(isolate, "RepealedTimes"),
                        Number::New(isolate, data->RepealedTimes));
          /* 银行冲正标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankRepealFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankRepealFlag).c_str()));
          /* 期商冲正标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerRepealFlag"),
              String::NewFromUtf8(isolate,
                                  string(1, data->BrokerRepealFlag).c_str()));
          /* 被冲正平台流水号 */
          obj_data->Set(String::NewFromUtf8(isolate, "PlateRepealSerial"),
                        Number::New(isolate, data->PlateRepealSerial));
          /* 被冲正银行流水号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankRepealSerial"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankRepealSerial),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 被冲正期货流水号 */
          obj_data->Set(String::NewFromUtf8(isolate, "FutureRepealSerial"),
                        Number::New(isolate, data->FutureRepealSerial));
          /* 业务功能码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeCode"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeCode),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->BankID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 银行分支机构代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankBranchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankBranchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期商代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期商分支机构代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerBranchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerBranchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeDate"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeDate),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行流水号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankSerial"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankSerial),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易系统日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradingDay"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradingDay),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银期平台消息流水号 */
          obj_data->Set(String::NewFromUtf8(isolate, "PlateSerial"),
                        Number::New(isolate, data->PlateSerial));
          /* 最后分片标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "LastFragment"),
                        String::NewFromUtf8(
                            isolate, string(1, data->LastFragment).c_str()));
          /* 会话号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SessionID"),
                        Number::New(isolate, data->SessionID));
          /* 客户姓名 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CustomerName"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CustomerName),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 证件类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "IdCardType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->IdCardType).c_str()));
          /* 证件号码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "IdentifiedCardNo"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->IdentifiedCardNo),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 客户类型 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CustType"),
              String::NewFromUtf8(isolate, string(1, data->CustType).c_str()));
          /* 银行帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankAccount"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankAccount),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行密码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankPassWord"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankPassWord),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "AccountID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->AccountID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货密码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "Password"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->Password),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 安装编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "InstallID"),
                        Number::New(isolate, data->InstallID));
          /* 期货公司流水号 */
          obj_data->Set(String::NewFromUtf8(isolate, "FutureSerial"),
                        Number::New(isolate, data->FutureSerial));
          /* 用户标识 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 验证客户证件号码标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "VerifyCertNoFlag"),
              String::NewFromUtf8(isolate,
                                  string(1, data->VerifyCertNoFlag).c_str()));
          /* 币种代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CurrencyID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CurrencyID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 转帐金额 */
          obj_data->Set(String::NewFromUtf8(isolate, "TradeAmount"),
                        Number::New(isolate, data->TradeAmount));
          /* 期货可取金额 */
          obj_data->Set(String::NewFromUtf8(isolate, "FutureFetchAmount"),
                        Number::New(isolate, data->FutureFetchAmount));
          /* 费用支付标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "FeePayFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->FeePayFlag).c_str()));
          /* 应收客户费用 */
          obj_data->Set(String::NewFromUtf8(isolate, "CustFee"),
                        Number::New(isolate, data->CustFee));
          /* 应收期货公司费用 */
          obj_data->Set(String::NewFromUtf8(isolate, "BrokerFee"),
                        Number::New(isolate, data->BrokerFee));
          /* 发送方给接收方的消息 */
          obj_data->Set(String::NewFromUtf8(isolate, "Message"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->Message),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 摘要 */
          obj_data->Set(String::NewFromUtf8(isolate, "Digest"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->Digest),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 银行帐号类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankAccType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankAccType).c_str()));
          /* 渠道标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "DeviceID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->DeviceID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货单位帐号类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankSecuAccType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankSecuAccType).c_str()));
          /* 期货公司银行编码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerIDByBank"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerIDByBank),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货单位帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankSecuAcc"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankSecuAcc),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行密码标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankPwdFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankPwdFlag).c_str()));
          /* 期货资金密码核对标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "SecuPwdFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->SecuPwdFlag).c_str()));
          /* 交易柜员 */
          obj_data->Set(String::NewFromUtf8(isolate, "OperNo"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->OperNo),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 请求编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "RequestID"),
                        Number::New(isolate, data->RequestID));
          /* 交易ID */
          obj_data->Set(String::NewFromUtf8(isolate, "TID"),
                        Number::New(isolate, data->TID));
          /* 转账交易状态 */
          obj_data->Set(String::NewFromUtf8(isolate, "TransferStatus"),
                        String::NewFromUtf8(
                            isolate, string(1, data->TransferStatus).c_str()));
          /* 错误代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "ErrorID"),
                        Number::New(isolate, data->ErrorID));
          /* 错误信息 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data};
        MakeCallback(isolate, ctx, cb, 1, argv);
        break;
      }
      case EV_ON_RTN_QUERY_BANK_BALANCE_BY_FUTURE: {
        CThostFtdcNotifyQueryAccountField *data =
            static_cast<CThostFtdcNotifyQueryAccountField *>(baton->data.get());

        Local<Object> obj_data = Object::New(isolate);

        if (data) {
          /* 业务功能码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeCode"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeCode),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->BankID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 银行分支机构代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankBranchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankBranchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期商代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期商分支机构代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerBranchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerBranchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeDate"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeDate),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行流水号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankSerial"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankSerial),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易系统日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradingDay"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradingDay),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银期平台消息流水号 */
          obj_data->Set(String::NewFromUtf8(isolate, "PlateSerial"),
                        Number::New(isolate, data->PlateSerial));
          /* 最后分片标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "LastFragment"),
                        String::NewFromUtf8(
                            isolate, string(1, data->LastFragment).c_str()));
          /* 会话号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SessionID"),
                        Number::New(isolate, data->SessionID));
          /* 客户姓名 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CustomerName"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CustomerName),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 证件类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "IdCardType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->IdCardType).c_str()));
          /* 证件号码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "IdentifiedCardNo"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->IdentifiedCardNo),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 客户类型 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CustType"),
              String::NewFromUtf8(isolate, string(1, data->CustType).c_str()));
          /* 银行帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankAccount"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankAccount),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行密码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankPassWord"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankPassWord),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "AccountID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->AccountID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货密码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "Password"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->Password),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货公司流水号 */
          obj_data->Set(String::NewFromUtf8(isolate, "FutureSerial"),
                        Number::New(isolate, data->FutureSerial));
          /* 安装编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "InstallID"),
                        Number::New(isolate, data->InstallID));
          /* 用户标识 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 验证客户证件号码标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "VerifyCertNoFlag"),
              String::NewFromUtf8(isolate,
                                  string(1, data->VerifyCertNoFlag).c_str()));
          /* 币种代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CurrencyID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CurrencyID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 摘要 */
          obj_data->Set(String::NewFromUtf8(isolate, "Digest"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->Digest),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 银行帐号类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankAccType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankAccType).c_str()));
          /* 渠道标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "DeviceID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->DeviceID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货单位帐号类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankSecuAccType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankSecuAccType).c_str()));
          /* 期货公司银行编码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerIDByBank"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerIDByBank),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货单位帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankSecuAcc"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankSecuAcc),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行密码标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankPwdFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankPwdFlag).c_str()));
          /* 期货资金密码核对标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "SecuPwdFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->SecuPwdFlag).c_str()));
          /* 交易柜员 */
          obj_data->Set(String::NewFromUtf8(isolate, "OperNo"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->OperNo),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 请求编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "RequestID"),
                        Number::New(isolate, data->RequestID));
          /* 交易ID */
          obj_data->Set(String::NewFromUtf8(isolate, "TID"),
                        Number::New(isolate, data->TID));
          /* 银行可用金额 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankUseAmount"),
                        Number::New(isolate, data->BankUseAmount));
          /* 银行可取金额 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankFetchAmount"),
                        Number::New(isolate, data->BankFetchAmount));
          /* 错误代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "ErrorID"),
                        Number::New(isolate, data->ErrorID));
          /* 错误信息 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data};
        MakeCallback(isolate, ctx, cb, 1, argv);
        break;
      }
      case EV_ON_ERR_RTN_BANK_TO_FUTURE_BY_FUTURE: {
        CThostFtdcReqTransferField *data =
            static_cast<CThostFtdcReqTransferField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 业务功能码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeCode"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeCode),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->BankID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 银行分支机构代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankBranchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankBranchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期商代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期商分支机构代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerBranchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerBranchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeDate"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeDate),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行流水号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankSerial"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankSerial),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易系统日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradingDay"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradingDay),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银期平台消息流水号 */
          obj_data->Set(String::NewFromUtf8(isolate, "PlateSerial"),
                        Number::New(isolate, data->PlateSerial));
          /* 最后分片标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "LastFragment"),
                        String::NewFromUtf8(
                            isolate, string(1, data->LastFragment).c_str()));
          /* 会话号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SessionID"),
                        Number::New(isolate, data->SessionID));
          /* 客户姓名 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CustomerName"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CustomerName),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 证件类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "IdCardType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->IdCardType).c_str()));
          /* 证件号码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "IdentifiedCardNo"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->IdentifiedCardNo),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 客户类型 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CustType"),
              String::NewFromUtf8(isolate, string(1, data->CustType).c_str()));
          /* 银行帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankAccount"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankAccount),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行密码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankPassWord"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankPassWord),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "AccountID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->AccountID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货密码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "Password"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->Password),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 安装编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "InstallID"),
                        Number::New(isolate, data->InstallID));
          /* 期货公司流水号 */
          obj_data->Set(String::NewFromUtf8(isolate, "FutureSerial"),
                        Number::New(isolate, data->FutureSerial));
          /* 用户标识 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 验证客户证件号码标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "VerifyCertNoFlag"),
              String::NewFromUtf8(isolate,
                                  string(1, data->VerifyCertNoFlag).c_str()));
          /* 币种代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CurrencyID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CurrencyID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 转帐金额 */
          obj_data->Set(String::NewFromUtf8(isolate, "TradeAmount"),
                        Number::New(isolate, data->TradeAmount));
          /* 期货可取金额 */
          obj_data->Set(String::NewFromUtf8(isolate, "FutureFetchAmount"),
                        Number::New(isolate, data->FutureFetchAmount));
          /* 费用支付标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "FeePayFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->FeePayFlag).c_str()));
          /* 应收客户费用 */
          obj_data->Set(String::NewFromUtf8(isolate, "CustFee"),
                        Number::New(isolate, data->CustFee));
          /* 应收期货公司费用 */
          obj_data->Set(String::NewFromUtf8(isolate, "BrokerFee"),
                        Number::New(isolate, data->BrokerFee));
          /* 发送方给接收方的消息 */
          obj_data->Set(String::NewFromUtf8(isolate, "Message"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->Message),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 摘要 */
          obj_data->Set(String::NewFromUtf8(isolate, "Digest"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->Digest),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 银行帐号类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankAccType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankAccType).c_str()));
          /* 渠道标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "DeviceID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->DeviceID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货单位帐号类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankSecuAccType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankSecuAccType).c_str()));
          /* 期货公司银行编码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerIDByBank"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerIDByBank),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货单位帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankSecuAcc"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankSecuAcc),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行密码标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankPwdFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankPwdFlag).c_str()));
          /* 期货资金密码核对标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "SecuPwdFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->SecuPwdFlag).c_str()));
          /* 交易柜员 */
          obj_data->Set(String::NewFromUtf8(isolate, "OperNo"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->OperNo),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 请求编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "RequestID"),
                        Number::New(isolate, data->RequestID));
          /* 交易ID */
          obj_data->Set(String::NewFromUtf8(isolate, "TID"),
                        Number::New(isolate, data->TID));
          /* 转账交易状态 */
          obj_data->Set(String::NewFromUtf8(isolate, "TransferStatus"),
                        String::NewFromUtf8(
                            isolate, string(1, data->TransferStatus).c_str()));
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error};
        MakeCallback(isolate, ctx, cb, 2, argv);
        break;
      }
      case EV_ON_ERR_RTN_FUTURE_TO_BANK_BY_FUTURE: {
        CThostFtdcReqTransferField *data =
            static_cast<CThostFtdcReqTransferField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 业务功能码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeCode"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeCode),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->BankID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 银行分支机构代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankBranchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankBranchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期商代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期商分支机构代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerBranchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerBranchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeDate"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeDate),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行流水号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankSerial"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankSerial),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易系统日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradingDay"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradingDay),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银期平台消息流水号 */
          obj_data->Set(String::NewFromUtf8(isolate, "PlateSerial"),
                        Number::New(isolate, data->PlateSerial));
          /* 最后分片标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "LastFragment"),
                        String::NewFromUtf8(
                            isolate, string(1, data->LastFragment).c_str()));
          /* 会话号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SessionID"),
                        Number::New(isolate, data->SessionID));
          /* 客户姓名 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CustomerName"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CustomerName),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 证件类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "IdCardType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->IdCardType).c_str()));
          /* 证件号码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "IdentifiedCardNo"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->IdentifiedCardNo),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 客户类型 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CustType"),
              String::NewFromUtf8(isolate, string(1, data->CustType).c_str()));
          /* 银行帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankAccount"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankAccount),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行密码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankPassWord"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankPassWord),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "AccountID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->AccountID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货密码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "Password"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->Password),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 安装编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "InstallID"),
                        Number::New(isolate, data->InstallID));
          /* 期货公司流水号 */
          obj_data->Set(String::NewFromUtf8(isolate, "FutureSerial"),
                        Number::New(isolate, data->FutureSerial));
          /* 用户标识 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 验证客户证件号码标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "VerifyCertNoFlag"),
              String::NewFromUtf8(isolate,
                                  string(1, data->VerifyCertNoFlag).c_str()));
          /* 币种代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CurrencyID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CurrencyID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 转帐金额 */
          obj_data->Set(String::NewFromUtf8(isolate, "TradeAmount"),
                        Number::New(isolate, data->TradeAmount));
          /* 期货可取金额 */
          obj_data->Set(String::NewFromUtf8(isolate, "FutureFetchAmount"),
                        Number::New(isolate, data->FutureFetchAmount));
          /* 费用支付标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "FeePayFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->FeePayFlag).c_str()));
          /* 应收客户费用 */
          obj_data->Set(String::NewFromUtf8(isolate, "CustFee"),
                        Number::New(isolate, data->CustFee));
          /* 应收期货公司费用 */
          obj_data->Set(String::NewFromUtf8(isolate, "BrokerFee"),
                        Number::New(isolate, data->BrokerFee));
          /* 发送方给接收方的消息 */
          obj_data->Set(String::NewFromUtf8(isolate, "Message"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->Message),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 摘要 */
          obj_data->Set(String::NewFromUtf8(isolate, "Digest"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->Digest),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 银行帐号类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankAccType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankAccType).c_str()));
          /* 渠道标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "DeviceID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->DeviceID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货单位帐号类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankSecuAccType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankSecuAccType).c_str()));
          /* 期货公司银行编码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerIDByBank"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerIDByBank),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货单位帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankSecuAcc"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankSecuAcc),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行密码标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankPwdFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankPwdFlag).c_str()));
          /* 期货资金密码核对标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "SecuPwdFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->SecuPwdFlag).c_str()));
          /* 交易柜员 */
          obj_data->Set(String::NewFromUtf8(isolate, "OperNo"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->OperNo),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 请求编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "RequestID"),
                        Number::New(isolate, data->RequestID));
          /* 交易ID */
          obj_data->Set(String::NewFromUtf8(isolate, "TID"),
                        Number::New(isolate, data->TID));
          /* 转账交易状态 */
          obj_data->Set(String::NewFromUtf8(isolate, "TransferStatus"),
                        String::NewFromUtf8(
                            isolate, string(1, data->TransferStatus).c_str()));
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error};
        MakeCallback(isolate, ctx, cb, 2, argv);
        break;
      }
      case EV_ON_ERR_RTN_REPEAL_BANK_TO_FUTURE_BY_FUTURE_MANUAL: {
        CThostFtdcReqRepealField *data =
            static_cast<CThostFtdcReqRepealField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 冲正时间间隔 */
          obj_data->Set(String::NewFromUtf8(isolate, "RepealTimeInterval"),
                        Number::New(isolate, data->RepealTimeInterval));
          /* 已经冲正次数 */
          obj_data->Set(String::NewFromUtf8(isolate, "RepealedTimes"),
                        Number::New(isolate, data->RepealedTimes));
          /* 银行冲正标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankRepealFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankRepealFlag).c_str()));
          /* 期商冲正标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerRepealFlag"),
              String::NewFromUtf8(isolate,
                                  string(1, data->BrokerRepealFlag).c_str()));
          /* 被冲正平台流水号 */
          obj_data->Set(String::NewFromUtf8(isolate, "PlateRepealSerial"),
                        Number::New(isolate, data->PlateRepealSerial));
          /* 被冲正银行流水号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankRepealSerial"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankRepealSerial),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 被冲正期货流水号 */
          obj_data->Set(String::NewFromUtf8(isolate, "FutureRepealSerial"),
                        Number::New(isolate, data->FutureRepealSerial));
          /* 业务功能码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeCode"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeCode),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->BankID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 银行分支机构代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankBranchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankBranchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期商代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期商分支机构代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerBranchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerBranchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeDate"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeDate),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行流水号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankSerial"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankSerial),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易系统日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradingDay"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradingDay),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银期平台消息流水号 */
          obj_data->Set(String::NewFromUtf8(isolate, "PlateSerial"),
                        Number::New(isolate, data->PlateSerial));
          /* 最后分片标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "LastFragment"),
                        String::NewFromUtf8(
                            isolate, string(1, data->LastFragment).c_str()));
          /* 会话号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SessionID"),
                        Number::New(isolate, data->SessionID));
          /* 客户姓名 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CustomerName"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CustomerName),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 证件类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "IdCardType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->IdCardType).c_str()));
          /* 证件号码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "IdentifiedCardNo"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->IdentifiedCardNo),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 客户类型 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CustType"),
              String::NewFromUtf8(isolate, string(1, data->CustType).c_str()));
          /* 银行帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankAccount"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankAccount),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行密码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankPassWord"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankPassWord),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "AccountID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->AccountID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货密码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "Password"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->Password),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 安装编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "InstallID"),
                        Number::New(isolate, data->InstallID));
          /* 期货公司流水号 */
          obj_data->Set(String::NewFromUtf8(isolate, "FutureSerial"),
                        Number::New(isolate, data->FutureSerial));
          /* 用户标识 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 验证客户证件号码标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "VerifyCertNoFlag"),
              String::NewFromUtf8(isolate,
                                  string(1, data->VerifyCertNoFlag).c_str()));
          /* 币种代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CurrencyID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CurrencyID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 转帐金额 */
          obj_data->Set(String::NewFromUtf8(isolate, "TradeAmount"),
                        Number::New(isolate, data->TradeAmount));
          /* 期货可取金额 */
          obj_data->Set(String::NewFromUtf8(isolate, "FutureFetchAmount"),
                        Number::New(isolate, data->FutureFetchAmount));
          /* 费用支付标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "FeePayFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->FeePayFlag).c_str()));
          /* 应收客户费用 */
          obj_data->Set(String::NewFromUtf8(isolate, "CustFee"),
                        Number::New(isolate, data->CustFee));
          /* 应收期货公司费用 */
          obj_data->Set(String::NewFromUtf8(isolate, "BrokerFee"),
                        Number::New(isolate, data->BrokerFee));
          /* 发送方给接收方的消息 */
          obj_data->Set(String::NewFromUtf8(isolate, "Message"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->Message),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 摘要 */
          obj_data->Set(String::NewFromUtf8(isolate, "Digest"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->Digest),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 银行帐号类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankAccType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankAccType).c_str()));
          /* 渠道标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "DeviceID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->DeviceID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货单位帐号类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankSecuAccType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankSecuAccType).c_str()));
          /* 期货公司银行编码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerIDByBank"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerIDByBank),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货单位帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankSecuAcc"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankSecuAcc),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行密码标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankPwdFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankPwdFlag).c_str()));
          /* 期货资金密码核对标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "SecuPwdFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->SecuPwdFlag).c_str()));
          /* 交易柜员 */
          obj_data->Set(String::NewFromUtf8(isolate, "OperNo"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->OperNo),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 请求编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "RequestID"),
                        Number::New(isolate, data->RequestID));
          /* 交易ID */
          obj_data->Set(String::NewFromUtf8(isolate, "TID"),
                        Number::New(isolate, data->TID));
          /* 转账交易状态 */
          obj_data->Set(String::NewFromUtf8(isolate, "TransferStatus"),
                        String::NewFromUtf8(
                            isolate, string(1, data->TransferStatus).c_str()));
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error};
        MakeCallback(isolate, ctx, cb, 2, argv);
        break;
      }
      case EV_ON_ERR_RTN_REPEAL_FUTURE_TO_BANK_BY_FUTURE_MANUAL: {
        CThostFtdcReqRepealField *data =
            static_cast<CThostFtdcReqRepealField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 冲正时间间隔 */
          obj_data->Set(String::NewFromUtf8(isolate, "RepealTimeInterval"),
                        Number::New(isolate, data->RepealTimeInterval));
          /* 已经冲正次数 */
          obj_data->Set(String::NewFromUtf8(isolate, "RepealedTimes"),
                        Number::New(isolate, data->RepealedTimes));
          /* 银行冲正标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankRepealFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankRepealFlag).c_str()));
          /* 期商冲正标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerRepealFlag"),
              String::NewFromUtf8(isolate,
                                  string(1, data->BrokerRepealFlag).c_str()));
          /* 被冲正平台流水号 */
          obj_data->Set(String::NewFromUtf8(isolate, "PlateRepealSerial"),
                        Number::New(isolate, data->PlateRepealSerial));
          /* 被冲正银行流水号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankRepealSerial"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankRepealSerial),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 被冲正期货流水号 */
          obj_data->Set(String::NewFromUtf8(isolate, "FutureRepealSerial"),
                        Number::New(isolate, data->FutureRepealSerial));
          /* 业务功能码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeCode"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeCode),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->BankID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 银行分支机构代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankBranchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankBranchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期商代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期商分支机构代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerBranchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerBranchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeDate"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeDate),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行流水号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankSerial"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankSerial),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易系统日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradingDay"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradingDay),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银期平台消息流水号 */
          obj_data->Set(String::NewFromUtf8(isolate, "PlateSerial"),
                        Number::New(isolate, data->PlateSerial));
          /* 最后分片标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "LastFragment"),
                        String::NewFromUtf8(
                            isolate, string(1, data->LastFragment).c_str()));
          /* 会话号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SessionID"),
                        Number::New(isolate, data->SessionID));
          /* 客户姓名 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CustomerName"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CustomerName),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 证件类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "IdCardType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->IdCardType).c_str()));
          /* 证件号码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "IdentifiedCardNo"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->IdentifiedCardNo),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 客户类型 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CustType"),
              String::NewFromUtf8(isolate, string(1, data->CustType).c_str()));
          /* 银行帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankAccount"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankAccount),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行密码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankPassWord"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankPassWord),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "AccountID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->AccountID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货密码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "Password"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->Password),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 安装编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "InstallID"),
                        Number::New(isolate, data->InstallID));
          /* 期货公司流水号 */
          obj_data->Set(String::NewFromUtf8(isolate, "FutureSerial"),
                        Number::New(isolate, data->FutureSerial));
          /* 用户标识 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 验证客户证件号码标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "VerifyCertNoFlag"),
              String::NewFromUtf8(isolate,
                                  string(1, data->VerifyCertNoFlag).c_str()));
          /* 币种代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CurrencyID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CurrencyID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 转帐金额 */
          obj_data->Set(String::NewFromUtf8(isolate, "TradeAmount"),
                        Number::New(isolate, data->TradeAmount));
          /* 期货可取金额 */
          obj_data->Set(String::NewFromUtf8(isolate, "FutureFetchAmount"),
                        Number::New(isolate, data->FutureFetchAmount));
          /* 费用支付标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "FeePayFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->FeePayFlag).c_str()));
          /* 应收客户费用 */
          obj_data->Set(String::NewFromUtf8(isolate, "CustFee"),
                        Number::New(isolate, data->CustFee));
          /* 应收期货公司费用 */
          obj_data->Set(String::NewFromUtf8(isolate, "BrokerFee"),
                        Number::New(isolate, data->BrokerFee));
          /* 发送方给接收方的消息 */
          obj_data->Set(String::NewFromUtf8(isolate, "Message"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->Message),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 摘要 */
          obj_data->Set(String::NewFromUtf8(isolate, "Digest"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->Digest),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 银行帐号类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankAccType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankAccType).c_str()));
          /* 渠道标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "DeviceID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->DeviceID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货单位帐号类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankSecuAccType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankSecuAccType).c_str()));
          /* 期货公司银行编码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerIDByBank"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerIDByBank),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货单位帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankSecuAcc"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankSecuAcc),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行密码标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankPwdFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankPwdFlag).c_str()));
          /* 期货资金密码核对标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "SecuPwdFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->SecuPwdFlag).c_str()));
          /* 交易柜员 */
          obj_data->Set(String::NewFromUtf8(isolate, "OperNo"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->OperNo),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 请求编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "RequestID"),
                        Number::New(isolate, data->RequestID));
          /* 交易ID */
          obj_data->Set(String::NewFromUtf8(isolate, "TID"),
                        Number::New(isolate, data->TID));
          /* 转账交易状态 */
          obj_data->Set(String::NewFromUtf8(isolate, "TransferStatus"),
                        String::NewFromUtf8(
                            isolate, string(1, data->TransferStatus).c_str()));
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error};
        MakeCallback(isolate, ctx, cb, 2, argv);
        break;
      }
      case EV_ON_ERR_RTN_QUERY_BANK_BALANCE_BY_FUTURE: {
        CThostFtdcReqQueryAccountField *data =
            static_cast<CThostFtdcReqQueryAccountField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 业务功能码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeCode"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeCode),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->BankID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 银行分支机构代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankBranchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankBranchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期商代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期商分支机构代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerBranchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerBranchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeDate"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeDate),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行流水号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankSerial"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankSerial),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易系统日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradingDay"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradingDay),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银期平台消息流水号 */
          obj_data->Set(String::NewFromUtf8(isolate, "PlateSerial"),
                        Number::New(isolate, data->PlateSerial));
          /* 最后分片标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "LastFragment"),
                        String::NewFromUtf8(
                            isolate, string(1, data->LastFragment).c_str()));
          /* 会话号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SessionID"),
                        Number::New(isolate, data->SessionID));
          /* 客户姓名 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CustomerName"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CustomerName),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 证件类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "IdCardType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->IdCardType).c_str()));
          /* 证件号码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "IdentifiedCardNo"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->IdentifiedCardNo),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 客户类型 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CustType"),
              String::NewFromUtf8(isolate, string(1, data->CustType).c_str()));
          /* 银行帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankAccount"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankAccount),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行密码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankPassWord"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankPassWord),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "AccountID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->AccountID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货密码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "Password"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->Password),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货公司流水号 */
          obj_data->Set(String::NewFromUtf8(isolate, "FutureSerial"),
                        Number::New(isolate, data->FutureSerial));
          /* 安装编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "InstallID"),
                        Number::New(isolate, data->InstallID));
          /* 用户标识 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 验证客户证件号码标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "VerifyCertNoFlag"),
              String::NewFromUtf8(isolate,
                                  string(1, data->VerifyCertNoFlag).c_str()));
          /* 币种代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CurrencyID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CurrencyID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 摘要 */
          obj_data->Set(String::NewFromUtf8(isolate, "Digest"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->Digest),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 银行帐号类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankAccType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankAccType).c_str()));
          /* 渠道标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "DeviceID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->DeviceID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货单位帐号类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankSecuAccType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankSecuAccType).c_str()));
          /* 期货公司银行编码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerIDByBank"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerIDByBank),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货单位帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankSecuAcc"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankSecuAcc),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行密码标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankPwdFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankPwdFlag).c_str()));
          /* 期货资金密码核对标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "SecuPwdFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->SecuPwdFlag).c_str()));
          /* 交易柜员 */
          obj_data->Set(String::NewFromUtf8(isolate, "OperNo"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->OperNo),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 请求编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "RequestID"),
                        Number::New(isolate, data->RequestID));
          /* 交易ID */
          obj_data->Set(String::NewFromUtf8(isolate, "TID"),
                        Number::New(isolate, data->TID));
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error};
        MakeCallback(isolate, ctx, cb, 2, argv);
        break;
      }
      case EV_ON_RTN_REPEAL_FROM_BANK_TO_FUTURE_BY_FUTURE: {
        CThostFtdcRspRepealField *data =
            static_cast<CThostFtdcRspRepealField *>(baton->data.get());

        Local<Object> obj_data = Object::New(isolate);

        if (data) {
          /* 冲正时间间隔 */
          obj_data->Set(String::NewFromUtf8(isolate, "RepealTimeInterval"),
                        Number::New(isolate, data->RepealTimeInterval));
          /* 已经冲正次数 */
          obj_data->Set(String::NewFromUtf8(isolate, "RepealedTimes"),
                        Number::New(isolate, data->RepealedTimes));
          /* 银行冲正标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankRepealFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankRepealFlag).c_str()));
          /* 期商冲正标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerRepealFlag"),
              String::NewFromUtf8(isolate,
                                  string(1, data->BrokerRepealFlag).c_str()));
          /* 被冲正平台流水号 */
          obj_data->Set(String::NewFromUtf8(isolate, "PlateRepealSerial"),
                        Number::New(isolate, data->PlateRepealSerial));
          /* 被冲正银行流水号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankRepealSerial"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankRepealSerial),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 被冲正期货流水号 */
          obj_data->Set(String::NewFromUtf8(isolate, "FutureRepealSerial"),
                        Number::New(isolate, data->FutureRepealSerial));
          /* 业务功能码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeCode"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeCode),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->BankID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 银行分支机构代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankBranchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankBranchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期商代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期商分支机构代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerBranchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerBranchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeDate"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeDate),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行流水号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankSerial"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankSerial),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易系统日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradingDay"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradingDay),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银期平台消息流水号 */
          obj_data->Set(String::NewFromUtf8(isolate, "PlateSerial"),
                        Number::New(isolate, data->PlateSerial));
          /* 最后分片标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "LastFragment"),
                        String::NewFromUtf8(
                            isolate, string(1, data->LastFragment).c_str()));
          /* 会话号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SessionID"),
                        Number::New(isolate, data->SessionID));
          /* 客户姓名 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CustomerName"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CustomerName),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 证件类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "IdCardType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->IdCardType).c_str()));
          /* 证件号码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "IdentifiedCardNo"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->IdentifiedCardNo),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 客户类型 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CustType"),
              String::NewFromUtf8(isolate, string(1, data->CustType).c_str()));
          /* 银行帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankAccount"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankAccount),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行密码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankPassWord"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankPassWord),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "AccountID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->AccountID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货密码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "Password"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->Password),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 安装编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "InstallID"),
                        Number::New(isolate, data->InstallID));
          /* 期货公司流水号 */
          obj_data->Set(String::NewFromUtf8(isolate, "FutureSerial"),
                        Number::New(isolate, data->FutureSerial));
          /* 用户标识 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 验证客户证件号码标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "VerifyCertNoFlag"),
              String::NewFromUtf8(isolate,
                                  string(1, data->VerifyCertNoFlag).c_str()));
          /* 币种代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CurrencyID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CurrencyID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 转帐金额 */
          obj_data->Set(String::NewFromUtf8(isolate, "TradeAmount"),
                        Number::New(isolate, data->TradeAmount));
          /* 期货可取金额 */
          obj_data->Set(String::NewFromUtf8(isolate, "FutureFetchAmount"),
                        Number::New(isolate, data->FutureFetchAmount));
          /* 费用支付标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "FeePayFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->FeePayFlag).c_str()));
          /* 应收客户费用 */
          obj_data->Set(String::NewFromUtf8(isolate, "CustFee"),
                        Number::New(isolate, data->CustFee));
          /* 应收期货公司费用 */
          obj_data->Set(String::NewFromUtf8(isolate, "BrokerFee"),
                        Number::New(isolate, data->BrokerFee));
          /* 发送方给接收方的消息 */
          obj_data->Set(String::NewFromUtf8(isolate, "Message"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->Message),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 摘要 */
          obj_data->Set(String::NewFromUtf8(isolate, "Digest"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->Digest),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 银行帐号类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankAccType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankAccType).c_str()));
          /* 渠道标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "DeviceID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->DeviceID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货单位帐号类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankSecuAccType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankSecuAccType).c_str()));
          /* 期货公司银行编码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerIDByBank"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerIDByBank),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货单位帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankSecuAcc"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankSecuAcc),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行密码标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankPwdFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankPwdFlag).c_str()));
          /* 期货资金密码核对标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "SecuPwdFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->SecuPwdFlag).c_str()));
          /* 交易柜员 */
          obj_data->Set(String::NewFromUtf8(isolate, "OperNo"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->OperNo),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 请求编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "RequestID"),
                        Number::New(isolate, data->RequestID));
          /* 交易ID */
          obj_data->Set(String::NewFromUtf8(isolate, "TID"),
                        Number::New(isolate, data->TID));
          /* 转账交易状态 */
          obj_data->Set(String::NewFromUtf8(isolate, "TransferStatus"),
                        String::NewFromUtf8(
                            isolate, string(1, data->TransferStatus).c_str()));
          /* 错误代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "ErrorID"),
                        Number::New(isolate, data->ErrorID));
          /* 错误信息 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data};
        MakeCallback(isolate, ctx, cb, 1, argv);
        break;
      }
      case EV_ON_RTN_REPEAL_FROM_FUTURE_TO_BANK_BY_FUTURE: {
        CThostFtdcRspRepealField *data =
            static_cast<CThostFtdcRspRepealField *>(baton->data.get());

        Local<Object> obj_data = Object::New(isolate);

        if (data) {
          /* 冲正时间间隔 */
          obj_data->Set(String::NewFromUtf8(isolate, "RepealTimeInterval"),
                        Number::New(isolate, data->RepealTimeInterval));
          /* 已经冲正次数 */
          obj_data->Set(String::NewFromUtf8(isolate, "RepealedTimes"),
                        Number::New(isolate, data->RepealedTimes));
          /* 银行冲正标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankRepealFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankRepealFlag).c_str()));
          /* 期商冲正标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerRepealFlag"),
              String::NewFromUtf8(isolate,
                                  string(1, data->BrokerRepealFlag).c_str()));
          /* 被冲正平台流水号 */
          obj_data->Set(String::NewFromUtf8(isolate, "PlateRepealSerial"),
                        Number::New(isolate, data->PlateRepealSerial));
          /* 被冲正银行流水号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankRepealSerial"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankRepealSerial),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 被冲正期货流水号 */
          obj_data->Set(String::NewFromUtf8(isolate, "FutureRepealSerial"),
                        Number::New(isolate, data->FutureRepealSerial));
          /* 业务功能码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeCode"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeCode),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->BankID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 银行分支机构代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankBranchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankBranchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期商代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期商分支机构代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerBranchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerBranchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeDate"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeDate),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行流水号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankSerial"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankSerial),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易系统日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradingDay"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradingDay),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银期平台消息流水号 */
          obj_data->Set(String::NewFromUtf8(isolate, "PlateSerial"),
                        Number::New(isolate, data->PlateSerial));
          /* 最后分片标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "LastFragment"),
                        String::NewFromUtf8(
                            isolate, string(1, data->LastFragment).c_str()));
          /* 会话号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SessionID"),
                        Number::New(isolate, data->SessionID));
          /* 客户姓名 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CustomerName"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CustomerName),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 证件类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "IdCardType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->IdCardType).c_str()));
          /* 证件号码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "IdentifiedCardNo"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->IdentifiedCardNo),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 客户类型 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CustType"),
              String::NewFromUtf8(isolate, string(1, data->CustType).c_str()));
          /* 银行帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankAccount"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankAccount),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行密码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankPassWord"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankPassWord),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "AccountID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->AccountID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货密码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "Password"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->Password),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 安装编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "InstallID"),
                        Number::New(isolate, data->InstallID));
          /* 期货公司流水号 */
          obj_data->Set(String::NewFromUtf8(isolate, "FutureSerial"),
                        Number::New(isolate, data->FutureSerial));
          /* 用户标识 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 验证客户证件号码标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "VerifyCertNoFlag"),
              String::NewFromUtf8(isolate,
                                  string(1, data->VerifyCertNoFlag).c_str()));
          /* 币种代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CurrencyID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CurrencyID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 转帐金额 */
          obj_data->Set(String::NewFromUtf8(isolate, "TradeAmount"),
                        Number::New(isolate, data->TradeAmount));
          /* 期货可取金额 */
          obj_data->Set(String::NewFromUtf8(isolate, "FutureFetchAmount"),
                        Number::New(isolate, data->FutureFetchAmount));
          /* 费用支付标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "FeePayFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->FeePayFlag).c_str()));
          /* 应收客户费用 */
          obj_data->Set(String::NewFromUtf8(isolate, "CustFee"),
                        Number::New(isolate, data->CustFee));
          /* 应收期货公司费用 */
          obj_data->Set(String::NewFromUtf8(isolate, "BrokerFee"),
                        Number::New(isolate, data->BrokerFee));
          /* 发送方给接收方的消息 */
          obj_data->Set(String::NewFromUtf8(isolate, "Message"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->Message),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 摘要 */
          obj_data->Set(String::NewFromUtf8(isolate, "Digest"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->Digest),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 银行帐号类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankAccType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankAccType).c_str()));
          /* 渠道标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "DeviceID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->DeviceID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货单位帐号类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankSecuAccType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankSecuAccType).c_str()));
          /* 期货公司银行编码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerIDByBank"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerIDByBank),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货单位帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankSecuAcc"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankSecuAcc),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行密码标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankPwdFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankPwdFlag).c_str()));
          /* 期货资金密码核对标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "SecuPwdFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->SecuPwdFlag).c_str()));
          /* 交易柜员 */
          obj_data->Set(String::NewFromUtf8(isolate, "OperNo"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->OperNo),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 请求编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "RequestID"),
                        Number::New(isolate, data->RequestID));
          /* 交易ID */
          obj_data->Set(String::NewFromUtf8(isolate, "TID"),
                        Number::New(isolate, data->TID));
          /* 转账交易状态 */
          obj_data->Set(String::NewFromUtf8(isolate, "TransferStatus"),
                        String::NewFromUtf8(
                            isolate, string(1, data->TransferStatus).c_str()));
          /* 错误代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "ErrorID"),
                        Number::New(isolate, data->ErrorID));
          /* 错误信息 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data};
        MakeCallback(isolate, ctx, cb, 1, argv);
        break;
      }
      case EV_ON_RSP_FROM_BANK_TO_FUTURE_BY_FUTURE: {
        CThostFtdcReqTransferField *data =
            static_cast<CThostFtdcReqTransferField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 业务功能码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeCode"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeCode),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->BankID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 银行分支机构代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankBranchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankBranchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期商代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期商分支机构代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerBranchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerBranchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeDate"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeDate),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行流水号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankSerial"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankSerial),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易系统日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradingDay"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradingDay),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银期平台消息流水号 */
          obj_data->Set(String::NewFromUtf8(isolate, "PlateSerial"),
                        Number::New(isolate, data->PlateSerial));
          /* 最后分片标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "LastFragment"),
                        String::NewFromUtf8(
                            isolate, string(1, data->LastFragment).c_str()));
          /* 会话号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SessionID"),
                        Number::New(isolate, data->SessionID));
          /* 客户姓名 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CustomerName"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CustomerName),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 证件类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "IdCardType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->IdCardType).c_str()));
          /* 证件号码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "IdentifiedCardNo"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->IdentifiedCardNo),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 客户类型 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CustType"),
              String::NewFromUtf8(isolate, string(1, data->CustType).c_str()));
          /* 银行帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankAccount"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankAccount),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行密码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankPassWord"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankPassWord),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "AccountID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->AccountID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货密码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "Password"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->Password),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 安装编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "InstallID"),
                        Number::New(isolate, data->InstallID));
          /* 期货公司流水号 */
          obj_data->Set(String::NewFromUtf8(isolate, "FutureSerial"),
                        Number::New(isolate, data->FutureSerial));
          /* 用户标识 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 验证客户证件号码标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "VerifyCertNoFlag"),
              String::NewFromUtf8(isolate,
                                  string(1, data->VerifyCertNoFlag).c_str()));
          /* 币种代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CurrencyID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CurrencyID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 转帐金额 */
          obj_data->Set(String::NewFromUtf8(isolate, "TradeAmount"),
                        Number::New(isolate, data->TradeAmount));
          /* 期货可取金额 */
          obj_data->Set(String::NewFromUtf8(isolate, "FutureFetchAmount"),
                        Number::New(isolate, data->FutureFetchAmount));
          /* 费用支付标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "FeePayFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->FeePayFlag).c_str()));
          /* 应收客户费用 */
          obj_data->Set(String::NewFromUtf8(isolate, "CustFee"),
                        Number::New(isolate, data->CustFee));
          /* 应收期货公司费用 */
          obj_data->Set(String::NewFromUtf8(isolate, "BrokerFee"),
                        Number::New(isolate, data->BrokerFee));
          /* 发送方给接收方的消息 */
          obj_data->Set(String::NewFromUtf8(isolate, "Message"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->Message),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 摘要 */
          obj_data->Set(String::NewFromUtf8(isolate, "Digest"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->Digest),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 银行帐号类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankAccType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankAccType).c_str()));
          /* 渠道标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "DeviceID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->DeviceID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货单位帐号类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankSecuAccType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankSecuAccType).c_str()));
          /* 期货公司银行编码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerIDByBank"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerIDByBank),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货单位帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankSecuAcc"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankSecuAcc),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行密码标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankPwdFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankPwdFlag).c_str()));
          /* 期货资金密码核对标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "SecuPwdFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->SecuPwdFlag).c_str()));
          /* 交易柜员 */
          obj_data->Set(String::NewFromUtf8(isolate, "OperNo"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->OperNo),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 请求编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "RequestID"),
                        Number::New(isolate, data->RequestID));
          /* 交易ID */
          obj_data->Set(String::NewFromUtf8(isolate, "TID"),
                        Number::New(isolate, data->TID));
          /* 转账交易状态 */
          obj_data->Set(String::NewFromUtf8(isolate, "TransferStatus"),
                        String::NewFromUtf8(
                            isolate, string(1, data->TransferStatus).c_str()));
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_FROM_FUTURE_TO_BANK_BY_FUTURE: {
        CThostFtdcReqTransferField *data =
            static_cast<CThostFtdcReqTransferField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 业务功能码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeCode"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeCode),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->BankID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 银行分支机构代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankBranchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankBranchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期商代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期商分支机构代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerBranchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerBranchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeDate"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeDate),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行流水号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankSerial"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankSerial),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易系统日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradingDay"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradingDay),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银期平台消息流水号 */
          obj_data->Set(String::NewFromUtf8(isolate, "PlateSerial"),
                        Number::New(isolate, data->PlateSerial));
          /* 最后分片标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "LastFragment"),
                        String::NewFromUtf8(
                            isolate, string(1, data->LastFragment).c_str()));
          /* 会话号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SessionID"),
                        Number::New(isolate, data->SessionID));
          /* 客户姓名 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CustomerName"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CustomerName),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 证件类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "IdCardType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->IdCardType).c_str()));
          /* 证件号码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "IdentifiedCardNo"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->IdentifiedCardNo),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 客户类型 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CustType"),
              String::NewFromUtf8(isolate, string(1, data->CustType).c_str()));
          /* 银行帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankAccount"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankAccount),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行密码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankPassWord"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankPassWord),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "AccountID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->AccountID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货密码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "Password"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->Password),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 安装编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "InstallID"),
                        Number::New(isolate, data->InstallID));
          /* 期货公司流水号 */
          obj_data->Set(String::NewFromUtf8(isolate, "FutureSerial"),
                        Number::New(isolate, data->FutureSerial));
          /* 用户标识 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 验证客户证件号码标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "VerifyCertNoFlag"),
              String::NewFromUtf8(isolate,
                                  string(1, data->VerifyCertNoFlag).c_str()));
          /* 币种代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CurrencyID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CurrencyID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 转帐金额 */
          obj_data->Set(String::NewFromUtf8(isolate, "TradeAmount"),
                        Number::New(isolate, data->TradeAmount));
          /* 期货可取金额 */
          obj_data->Set(String::NewFromUtf8(isolate, "FutureFetchAmount"),
                        Number::New(isolate, data->FutureFetchAmount));
          /* 费用支付标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "FeePayFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->FeePayFlag).c_str()));
          /* 应收客户费用 */
          obj_data->Set(String::NewFromUtf8(isolate, "CustFee"),
                        Number::New(isolate, data->CustFee));
          /* 应收期货公司费用 */
          obj_data->Set(String::NewFromUtf8(isolate, "BrokerFee"),
                        Number::New(isolate, data->BrokerFee));
          /* 发送方给接收方的消息 */
          obj_data->Set(String::NewFromUtf8(isolate, "Message"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->Message),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 摘要 */
          obj_data->Set(String::NewFromUtf8(isolate, "Digest"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->Digest),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 银行帐号类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankAccType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankAccType).c_str()));
          /* 渠道标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "DeviceID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->DeviceID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货单位帐号类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankSecuAccType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankSecuAccType).c_str()));
          /* 期货公司银行编码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerIDByBank"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerIDByBank),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货单位帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankSecuAcc"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankSecuAcc),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行密码标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankPwdFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankPwdFlag).c_str()));
          /* 期货资金密码核对标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "SecuPwdFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->SecuPwdFlag).c_str()));
          /* 交易柜员 */
          obj_data->Set(String::NewFromUtf8(isolate, "OperNo"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->OperNo),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 请求编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "RequestID"),
                        Number::New(isolate, data->RequestID));
          /* 交易ID */
          obj_data->Set(String::NewFromUtf8(isolate, "TID"),
                        Number::New(isolate, data->TID));
          /* 转账交易状态 */
          obj_data->Set(String::NewFromUtf8(isolate, "TransferStatus"),
                        String::NewFromUtf8(
                            isolate, string(1, data->TransferStatus).c_str()));
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RSP_QUERY_BANK_ACCOUNT_MONEY_BY_FUTURE: {
        CThostFtdcReqQueryAccountField *data =
            static_cast<CThostFtdcReqQueryAccountField *>(baton->data.get());
        CThostFtdcRspInfoField *error =
            static_cast<CThostFtdcRspInfoField *>(baton->error.get());

        Local<Object> obj_data = Object::New(isolate);
        Local<Object> obj_error = Object::New(isolate);

        if (data) {
          /* 业务功能码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeCode"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeCode),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->BankID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 银行分支机构代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankBranchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankBranchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期商代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期商分支机构代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerBranchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerBranchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeDate"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeDate),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行流水号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankSerial"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankSerial),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易系统日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradingDay"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradingDay),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银期平台消息流水号 */
          obj_data->Set(String::NewFromUtf8(isolate, "PlateSerial"),
                        Number::New(isolate, data->PlateSerial));
          /* 最后分片标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "LastFragment"),
                        String::NewFromUtf8(
                            isolate, string(1, data->LastFragment).c_str()));
          /* 会话号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SessionID"),
                        Number::New(isolate, data->SessionID));
          /* 客户姓名 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CustomerName"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CustomerName),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 证件类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "IdCardType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->IdCardType).c_str()));
          /* 证件号码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "IdentifiedCardNo"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->IdentifiedCardNo),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 客户类型 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CustType"),
              String::NewFromUtf8(isolate, string(1, data->CustType).c_str()));
          /* 银行帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankAccount"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankAccount),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行密码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankPassWord"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankPassWord),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "AccountID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->AccountID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货密码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "Password"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->Password),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货公司流水号 */
          obj_data->Set(String::NewFromUtf8(isolate, "FutureSerial"),
                        Number::New(isolate, data->FutureSerial));
          /* 安装编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "InstallID"),
                        Number::New(isolate, data->InstallID));
          /* 用户标识 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 验证客户证件号码标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "VerifyCertNoFlag"),
              String::NewFromUtf8(isolate,
                                  string(1, data->VerifyCertNoFlag).c_str()));
          /* 币种代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CurrencyID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CurrencyID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 摘要 */
          obj_data->Set(String::NewFromUtf8(isolate, "Digest"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->Digest),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 银行帐号类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankAccType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankAccType).c_str()));
          /* 渠道标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "DeviceID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->DeviceID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货单位帐号类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankSecuAccType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankSecuAccType).c_str()));
          /* 期货公司银行编码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerIDByBank"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerIDByBank),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货单位帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankSecuAcc"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankSecuAcc),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行密码标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankPwdFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankPwdFlag).c_str()));
          /* 期货资金密码核对标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "SecuPwdFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->SecuPwdFlag).c_str()));
          /* 交易柜员 */
          obj_data->Set(String::NewFromUtf8(isolate, "OperNo"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->OperNo),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 请求编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "RequestID"),
                        Number::New(isolate, data->RequestID));
          /* 交易ID */
          obj_data->Set(String::NewFromUtf8(isolate, "TID"),
                        Number::New(isolate, data->TID));
        }

        if (error) {
          /* 错误代码 */
          obj_error->Set(String::NewFromUtf8(isolate, "ErrorID"),
                         Number::New(isolate, error->ErrorID));
          /* 错误信息 */
          obj_error->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(error->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data, obj_error,
                               Number::New(isolate, baton->request_id),
                               Boolean::New(isolate, baton->last)};
        MakeCallback(isolate, ctx, cb, 4, argv);
        break;
      }
      case EV_ON_RTN_OPEN_ACCOUNT_BY_BANK: {
        CThostFtdcOpenAccountField *data =
            static_cast<CThostFtdcOpenAccountField *>(baton->data.get());

        Local<Object> obj_data = Object::New(isolate);

        if (data) {
          /* 业务功能码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeCode"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeCode),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->BankID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 银行分支机构代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankBranchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankBranchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期商代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期商分支机构代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerBranchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerBranchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeDate"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeDate),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行流水号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankSerial"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankSerial),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易系统日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradingDay"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradingDay),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银期平台消息流水号 */
          obj_data->Set(String::NewFromUtf8(isolate, "PlateSerial"),
                        Number::New(isolate, data->PlateSerial));
          /* 最后分片标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "LastFragment"),
                        String::NewFromUtf8(
                            isolate, string(1, data->LastFragment).c_str()));
          /* 会话号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SessionID"),
                        Number::New(isolate, data->SessionID));
          /* 客户姓名 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CustomerName"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CustomerName),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 证件类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "IdCardType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->IdCardType).c_str()));
          /* 证件号码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "IdentifiedCardNo"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->IdentifiedCardNo),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 性别 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "Gender"),
              String::NewFromUtf8(isolate, string(1, data->Gender).c_str()));
          /* 国家代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CountryCode"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CountryCode),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 客户类型 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CustType"),
              String::NewFromUtf8(isolate, string(1, data->CustType).c_str()));
          /* 地址 */
          obj_data->Set(String::NewFromUtf8(isolate, "Address"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->Address),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 邮编 */
          obj_data->Set(String::NewFromUtf8(isolate, "ZipCode"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->ZipCode),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 电话号码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "Telephone"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->Telephone),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 手机 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "MobilePhone"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->MobilePhone),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 传真 */
          obj_data->Set(String::NewFromUtf8(isolate, "Fax"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->Fax),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 电子邮件 */
          obj_data->Set(String::NewFromUtf8(isolate, "EMail"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->EMail),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 资金账户状态 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "MoneyAccountStatus"),
              String::NewFromUtf8(isolate,
                                  string(1, data->MoneyAccountStatus).c_str()));
          /* 银行帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankAccount"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankAccount),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行密码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankPassWord"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankPassWord),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "AccountID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->AccountID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货密码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "Password"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->Password),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 安装编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "InstallID"),
                        Number::New(isolate, data->InstallID));
          /* 验证客户证件号码标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "VerifyCertNoFlag"),
              String::NewFromUtf8(isolate,
                                  string(1, data->VerifyCertNoFlag).c_str()));
          /* 币种代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CurrencyID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CurrencyID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 汇钞标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CashExchangeCode"),
              String::NewFromUtf8(isolate,
                                  string(1, data->CashExchangeCode).c_str()));
          /* 摘要 */
          obj_data->Set(String::NewFromUtf8(isolate, "Digest"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->Digest),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 银行帐号类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankAccType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankAccType).c_str()));
          /* 渠道标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "DeviceID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->DeviceID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货单位帐号类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankSecuAccType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankSecuAccType).c_str()));
          /* 期货公司银行编码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerIDByBank"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerIDByBank),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货单位帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankSecuAcc"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankSecuAcc),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行密码标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankPwdFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankPwdFlag).c_str()));
          /* 期货资金密码核对标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "SecuPwdFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->SecuPwdFlag).c_str()));
          /* 交易柜员 */
          obj_data->Set(String::NewFromUtf8(isolate, "OperNo"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->OperNo),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 交易ID */
          obj_data->Set(String::NewFromUtf8(isolate, "TID"),
                        Number::New(isolate, data->TID));
          /* 用户标识 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 错误代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "ErrorID"),
                        Number::New(isolate, data->ErrorID));
          /* 错误信息 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data};
        MakeCallback(isolate, ctx, cb, 1, argv);
        break;
      }
      case EV_ON_RTN_CANCEL_ACCOUNT_BY_BANK: {
        CThostFtdcCancelAccountField *data =
            static_cast<CThostFtdcCancelAccountField *>(baton->data.get());

        Local<Object> obj_data = Object::New(isolate);

        if (data) {
          /* 业务功能码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeCode"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeCode),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->BankID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 银行分支机构代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankBranchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankBranchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期商代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期商分支机构代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerBranchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerBranchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeDate"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeDate),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行流水号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankSerial"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankSerial),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易系统日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradingDay"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradingDay),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银期平台消息流水号 */
          obj_data->Set(String::NewFromUtf8(isolate, "PlateSerial"),
                        Number::New(isolate, data->PlateSerial));
          /* 最后分片标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "LastFragment"),
                        String::NewFromUtf8(
                            isolate, string(1, data->LastFragment).c_str()));
          /* 会话号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SessionID"),
                        Number::New(isolate, data->SessionID));
          /* 客户姓名 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CustomerName"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CustomerName),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 证件类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "IdCardType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->IdCardType).c_str()));
          /* 证件号码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "IdentifiedCardNo"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->IdentifiedCardNo),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 性别 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "Gender"),
              String::NewFromUtf8(isolate, string(1, data->Gender).c_str()));
          /* 国家代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CountryCode"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CountryCode),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 客户类型 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CustType"),
              String::NewFromUtf8(isolate, string(1, data->CustType).c_str()));
          /* 地址 */
          obj_data->Set(String::NewFromUtf8(isolate, "Address"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->Address),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 邮编 */
          obj_data->Set(String::NewFromUtf8(isolate, "ZipCode"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->ZipCode),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 电话号码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "Telephone"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->Telephone),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 手机 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "MobilePhone"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->MobilePhone),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 传真 */
          obj_data->Set(String::NewFromUtf8(isolate, "Fax"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->Fax),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 电子邮件 */
          obj_data->Set(String::NewFromUtf8(isolate, "EMail"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->EMail),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 资金账户状态 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "MoneyAccountStatus"),
              String::NewFromUtf8(isolate,
                                  string(1, data->MoneyAccountStatus).c_str()));
          /* 银行帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankAccount"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankAccount),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行密码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankPassWord"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankPassWord),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "AccountID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->AccountID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货密码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "Password"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->Password),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 安装编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "InstallID"),
                        Number::New(isolate, data->InstallID));
          /* 验证客户证件号码标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "VerifyCertNoFlag"),
              String::NewFromUtf8(isolate,
                                  string(1, data->VerifyCertNoFlag).c_str()));
          /* 币种代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CurrencyID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CurrencyID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 汇钞标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CashExchangeCode"),
              String::NewFromUtf8(isolate,
                                  string(1, data->CashExchangeCode).c_str()));
          /* 摘要 */
          obj_data->Set(String::NewFromUtf8(isolate, "Digest"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->Digest),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 银行帐号类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankAccType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankAccType).c_str()));
          /* 渠道标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "DeviceID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->DeviceID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货单位帐号类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankSecuAccType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankSecuAccType).c_str()));
          /* 期货公司银行编码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerIDByBank"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerIDByBank),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货单位帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankSecuAcc"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankSecuAcc),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行密码标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankPwdFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankPwdFlag).c_str()));
          /* 期货资金密码核对标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "SecuPwdFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->SecuPwdFlag).c_str()));
          /* 交易柜员 */
          obj_data->Set(String::NewFromUtf8(isolate, "OperNo"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->OperNo),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 交易ID */
          obj_data->Set(String::NewFromUtf8(isolate, "TID"),
                        Number::New(isolate, data->TID));
          /* 用户标识 */
          obj_data->Set(String::NewFromUtf8(isolate, "UserID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->UserID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 错误代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "ErrorID"),
                        Number::New(isolate, data->ErrorID));
          /* 错误信息 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data};
        MakeCallback(isolate, ctx, cb, 1, argv);
        break;
      }
      case EV_ON_RTN_CHANGE_ACCOUNT_BY_BANK: {
        CThostFtdcChangeAccountField *data =
            static_cast<CThostFtdcChangeAccountField *>(baton->data.get());

        Local<Object> obj_data = Object::New(isolate);

        if (data) {
          /* 业务功能码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeCode"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeCode),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankID"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->BankID),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 银行分支机构代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankBranchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankBranchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期商代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期商分支机构代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerBranchID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerBranchID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeDate"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeDate),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易时间 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradeTime"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradeTime),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行流水号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankSerial"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankSerial),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 交易系统日期 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "TradingDay"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->TradingDay),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银期平台消息流水号 */
          obj_data->Set(String::NewFromUtf8(isolate, "PlateSerial"),
                        Number::New(isolate, data->PlateSerial));
          /* 最后分片标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "LastFragment"),
                        String::NewFromUtf8(
                            isolate, string(1, data->LastFragment).c_str()));
          /* 会话号 */
          obj_data->Set(String::NewFromUtf8(isolate, "SessionID"),
                        Number::New(isolate, data->SessionID));
          /* 客户姓名 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CustomerName"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CustomerName),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 证件类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "IdCardType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->IdCardType).c_str()));
          /* 证件号码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "IdentifiedCardNo"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->IdentifiedCardNo),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 性别 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "Gender"),
              String::NewFromUtf8(isolate, string(1, data->Gender).c_str()));
          /* 国家代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CountryCode"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CountryCode),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 客户类型 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CustType"),
              String::NewFromUtf8(isolate, string(1, data->CustType).c_str()));
          /* 地址 */
          obj_data->Set(String::NewFromUtf8(isolate, "Address"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->Address),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 邮编 */
          obj_data->Set(String::NewFromUtf8(isolate, "ZipCode"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->ZipCode),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 电话号码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "Telephone"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->Telephone),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 手机 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "MobilePhone"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->MobilePhone),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 传真 */
          obj_data->Set(String::NewFromUtf8(isolate, "Fax"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->Fax),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 电子邮件 */
          obj_data->Set(String::NewFromUtf8(isolate, "EMail"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->EMail),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 资金账户状态 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "MoneyAccountStatus"),
              String::NewFromUtf8(isolate,
                                  string(1, data->MoneyAccountStatus).c_str()));
          /* 银行帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankAccount"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankAccount),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行密码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BankPassWord"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BankPassWord),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 新银行帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "NewBankAccount"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->NewBankAccount),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 新银行密码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "NewBankPassWord"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->NewBankPassWord),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 投资者帐号 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "AccountID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->AccountID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货密码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "Password"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->Password),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行帐号类型 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankAccType"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankAccType).c_str()));
          /* 安装编号 */
          obj_data->Set(String::NewFromUtf8(isolate, "InstallID"),
                        Number::New(isolate, data->InstallID));
          /* 验证客户证件号码标志 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "VerifyCertNoFlag"),
              String::NewFromUtf8(isolate,
                                  string(1, data->VerifyCertNoFlag).c_str()));
          /* 币种代码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "CurrencyID"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->CurrencyID),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 期货公司银行编码 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "BrokerIDByBank"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->BrokerIDByBank),
                  NewStringType::kNormal)
                  .ToLocalChecked());
          /* 银行密码标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "BankPwdFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->BankPwdFlag).c_str()));
          /* 期货资金密码核对标志 */
          obj_data->Set(String::NewFromUtf8(isolate, "SecuPwdFlag"),
                        String::NewFromUtf8(
                            isolate, string(1, data->SecuPwdFlag).c_str()));
          /* 交易ID */
          obj_data->Set(String::NewFromUtf8(isolate, "TID"),
                        Number::New(isolate, data->TID));
          /* 摘要 */
          obj_data->Set(String::NewFromUtf8(isolate, "Digest"),
                        String::NewFromOneByte(
                            isolate, reinterpret_cast<uint8_t *>(data->Digest),
                            NewStringType::kNormal)
                            .ToLocalChecked());
          /* 错误代码 */
          obj_data->Set(String::NewFromUtf8(isolate, "ErrorID"),
                        Number::New(isolate, data->ErrorID));
          /* 错误信息 */
          obj_data->Set(
              String::NewFromUtf8(isolate, "ErrorMsg"),
              String::NewFromOneByte(
                  isolate, reinterpret_cast<uint8_t *>(data->ErrorMsg),
                  NewStringType::kNormal)
                  .ToLocalChecked());
        }

        Local<Value> argv[] = {obj_data};
        MakeCallback(isolate, ctx, cb, 1, argv);
        break;
      }
      default: { break; }
    }

    delete baton;
  }
}

} /* namespace node_ctp */
